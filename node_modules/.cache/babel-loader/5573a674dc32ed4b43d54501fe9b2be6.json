{"ast":null,"code":"/*!\n* jquery.inputmask.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2019 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.9\n*/\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"jquery\", \"./inputmask\"], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = factory(require(\"jquery\"), require(\"./inputmask\"));\n  } else {\n    factory(jQuery, window.Inputmask);\n  }\n})(function ($, Inputmask) {\n  if ($.fn.inputmask === undefined) {\n    $.fn.inputmask = function (fn, options) {\n      var nptmask,\n          input = this[0];\n      if (options === undefined) options = {};\n\n      if (typeof fn === \"string\") {\n        switch (fn) {\n          case \"unmaskedvalue\":\n            return input && input.inputmask ? input.inputmask.unmaskedvalue() : $(input).val();\n\n          case \"remove\":\n            return this.each(function () {\n              if (this.inputmask) this.inputmask.remove();\n            });\n\n          case \"getemptymask\":\n            return input && input.inputmask ? input.inputmask.getemptymask() : \"\";\n\n          case \"hasMaskedValue\":\n            return input && input.inputmask ? input.inputmask.hasMaskedValue() : false;\n\n          case \"isComplete\":\n            return input && input.inputmask ? input.inputmask.isComplete() : true;\n\n          case \"getmetadata\":\n            return input && input.inputmask ? input.inputmask.getmetadata() : undefined;\n\n          case \"setvalue\":\n            Inputmask.setValue(input, options);\n            break;\n\n          case \"option\":\n            if (typeof options === \"string\") {\n              if (input && input.inputmask !== undefined) {\n                return input.inputmask.option(options);\n              }\n            } else {\n              return this.each(function () {\n                if (this.inputmask !== undefined) {\n                  return this.inputmask.option(options);\n                }\n              });\n            }\n\n            break;\n\n          default:\n            options.alias = fn;\n            nptmask = new Inputmask(options);\n            return this.each(function () {\n              nptmask.mask(this);\n            });\n        }\n      } else if (Array.isArray(fn)) {\n        options.alias = fn;\n        nptmask = new Inputmask(options);\n        return this.each(function () {\n          nptmask.mask(this);\n        });\n      } else if (typeof fn == \"object\") {\n        nptmask = new Inputmask(fn);\n\n        if (fn.mask === undefined && fn.alias === undefined) {\n          return this.each(function () {\n            if (this.inputmask !== undefined) {\n              return this.inputmask.option(fn);\n            } else nptmask.mask(this);\n          });\n        } else {\n          return this.each(function () {\n            nptmask.mask(this);\n          });\n        }\n      } else if (fn === undefined) {\n        return this.each(function () {\n          nptmask = new Inputmask(options);\n          nptmask.mask(this);\n        });\n      }\n    };\n  }\n\n  return $.fn.inputmask;\n});","map":null,"metadata":{},"sourceType":"script"}