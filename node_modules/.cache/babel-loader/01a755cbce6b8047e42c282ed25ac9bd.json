{"ast":null,"code":"/*!\n* inputmask.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2019 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.9\n*/\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"./dependencyLibs/inputmask.dependencyLib\", \"./global/window\"], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = factory(require(\"./dependencyLibs/inputmask.dependencyLib\"), require(\"./global/window\"));\n  } else {\n    window.Inputmask = factory(window.dependencyLib || jQuery, window);\n  }\n})(function ($, window, undefined) {\n  var document = window.document,\n      ua = navigator.userAgent,\n      ie = ua.indexOf(\"MSIE \") > 0 || ua.indexOf(\"Trident/\") > 0,\n      mobile = isInputEventSupported(\"touchstart\"),\n      iemobile = /iemobile/i.test(ua),\n      iphone = /iphone/i.test(ua) && !iemobile;\n\n  function Inputmask(alias, options, internal) {\n    if (!(this instanceof Inputmask)) {\n      return new Inputmask(alias, options, internal);\n    }\n\n    this.el = undefined;\n    this.events = {};\n    this.maskset = undefined;\n    this.refreshValue = false;\n\n    if (internal !== true) {\n      if ($.isPlainObject(alias)) {\n        options = alias;\n      } else {\n        options = options || {};\n        if (alias) options.alias = alias;\n      }\n\n      this.opts = $.extend(true, {}, this.defaults, options);\n      this.noMasksCache = options && options.definitions !== undefined;\n      this.userOptions = options || {};\n      this.isRTL = this.opts.numericInput;\n      resolveAlias(this.opts.alias, options, this.opts);\n    }\n  }\n\n  Inputmask.prototype = {\n    dataAttribute: \"data-inputmask\",\n    defaults: {\n      placeholder: \"_\",\n      optionalmarker: [\"[\", \"]\"],\n      quantifiermarker: [\"{\", \"}\"],\n      groupmarker: [\"(\", \")\"],\n      alternatormarker: \"|\",\n      escapeChar: \"\\\\\",\n      mask: null,\n      regex: null,\n      oncomplete: $.noop,\n      onincomplete: $.noop,\n      oncleared: $.noop,\n      repeat: 0,\n      greedy: false,\n      autoUnmask: false,\n      removeMaskOnSubmit: false,\n      clearMaskOnLostFocus: true,\n      insertMode: true,\n      clearIncomplete: false,\n      alias: null,\n      onKeyDown: $.noop,\n      onBeforeMask: null,\n      onBeforePaste: function (pastedValue, opts) {\n        return $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(this, pastedValue, opts) : pastedValue;\n      },\n      onBeforeWrite: null,\n      onUnMask: null,\n      showMaskOnFocus: true,\n      showMaskOnHover: true,\n      onKeyValidation: $.noop,\n      skipOptionalPartCharacter: \" \",\n      numericInput: false,\n      rightAlign: false,\n      undoOnEscape: true,\n      radixPoint: \"\",\n      _radixDance: false,\n      groupSeparator: \"\",\n      keepStatic: null,\n      positionCaretOnTab: true,\n      tabThrough: false,\n      supportsInputType: [\"text\", \"tel\", \"url\", \"password\", \"search\"],\n      ignorables: [8, 9, 13, 19, 27, 33, 34, 35, 36, 37, 38, 39, 40, 45, 46, 93, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 0, 229],\n      isComplete: null,\n      preValidation: null,\n      postValidation: null,\n      staticDefinitionSymbol: undefined,\n      jitMasking: false,\n      nullable: true,\n      inputEventOnly: false,\n      noValuePatching: false,\n      positionCaretOnClick: \"lvp\",\n      casing: null,\n      inputmode: \"verbatim\",\n      colorMask: false,\n      disablePredictiveText: false,\n      importDataAttributes: true,\n      shiftPositions: true\n    },\n    definitions: {\n      9: {\n        validator: \"[0-9\\uff11-\\uff19]\",\n        definitionSymbol: \"*\"\n      },\n      a: {\n        validator: \"[A-Za-z\\u0410-\\u044f\\u0401\\u0451\\xc0-\\xff\\xb5]\",\n        definitionSymbol: \"*\"\n      },\n      \"*\": {\n        validator: \"[0-9\\uff11-\\uff19A-Za-z\\u0410-\\u044f\\u0401\\u0451\\xc0-\\xff\\xb5]\"\n      }\n    },\n    aliases: {},\n    masksCache: {},\n    mask: function (elems) {\n      var that = this;\n\n      function importAttributeOptions(npt, opts, userOptions, dataAttribute) {\n        if (opts.importDataAttributes === true) {\n          var attrOptions = npt.getAttribute(dataAttribute),\n              option,\n              dataoptions,\n              optionData,\n              p;\n\n          var importOption = function (option, optionData) {\n            optionData = optionData !== undefined ? optionData : npt.getAttribute(dataAttribute + \"-\" + option);\n\n            if (optionData !== null) {\n              if (typeof optionData === \"string\") {\n                if (option.indexOf(\"on\") === 0) optionData = window[optionData];else if (optionData === \"false\") optionData = false;else if (optionData === \"true\") optionData = true;\n              }\n\n              userOptions[option] = optionData;\n            }\n          };\n\n          if (attrOptions && attrOptions !== \"\") {\n            attrOptions = attrOptions.replace(/'/g, '\"');\n            dataoptions = JSON.parse(\"{\" + attrOptions + \"}\");\n          }\n\n          if (dataoptions) {\n            optionData = undefined;\n\n            for (p in dataoptions) {\n              if (p.toLowerCase() === \"alias\") {\n                optionData = dataoptions[p];\n                break;\n              }\n            }\n          }\n\n          importOption(\"alias\", optionData);\n\n          if (userOptions.alias) {\n            resolveAlias(userOptions.alias, userOptions, opts);\n          }\n\n          for (option in opts) {\n            if (dataoptions) {\n              optionData = undefined;\n\n              for (p in dataoptions) {\n                if (p.toLowerCase() === option.toLowerCase()) {\n                  optionData = dataoptions[p];\n                  break;\n                }\n              }\n            }\n\n            importOption(option, optionData);\n          }\n        }\n\n        $.extend(true, opts, userOptions);\n\n        if (npt.dir === \"rtl\" || opts.rightAlign) {\n          npt.style.textAlign = \"right\";\n        }\n\n        if (npt.dir === \"rtl\" || opts.numericInput) {\n          npt.dir = \"ltr\";\n          npt.removeAttribute(\"dir\");\n          opts.isRTL = true;\n        }\n\n        return Object.keys(userOptions).length;\n      }\n\n      if (typeof elems === \"string\") {\n        elems = document.getElementById(elems) || document.querySelectorAll(elems);\n      }\n\n      elems = elems.nodeName ? [elems] : elems;\n      $.each(elems, function (ndx, el) {\n        var scopedOpts = $.extend(true, {}, that.opts);\n\n        if (importAttributeOptions(el, scopedOpts, $.extend(true, {}, that.userOptions), that.dataAttribute)) {\n          var maskset = generateMaskSet(scopedOpts, that.noMasksCache);\n\n          if (maskset !== undefined) {\n            if (el.inputmask !== undefined) {\n              el.inputmask.opts.autoUnmask = true;\n              el.inputmask.remove();\n            }\n\n            el.inputmask = new Inputmask(undefined, undefined, true);\n            el.inputmask.opts = scopedOpts;\n            el.inputmask.noMasksCache = that.noMasksCache;\n            el.inputmask.userOptions = $.extend(true, {}, that.userOptions);\n            el.inputmask.isRTL = scopedOpts.isRTL || scopedOpts.numericInput;\n            el.inputmask.el = el;\n            el.inputmask.maskset = maskset;\n            $.data(el, \"_inputmask_opts\", scopedOpts);\n            maskScope.call(el.inputmask, {\n              action: \"mask\"\n            });\n          }\n        }\n      });\n      return elems && elems[0] ? elems[0].inputmask || this : this;\n    },\n    option: function (options, noremask) {\n      if (typeof options === \"string\") {\n        return this.opts[options];\n      } else if (typeof options === \"object\") {\n        $.extend(this.userOptions, options);\n\n        if (this.el && noremask !== true) {\n          this.mask(this.el);\n        }\n\n        return this;\n      }\n    },\n    unmaskedvalue: function (value) {\n      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n      return maskScope.call(this, {\n        action: \"unmaskedvalue\",\n        value: value\n      });\n    },\n    remove: function () {\n      return maskScope.call(this, {\n        action: \"remove\"\n      });\n    },\n    getemptymask: function () {\n      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n      return maskScope.call(this, {\n        action: \"getemptymask\"\n      });\n    },\n    hasMaskedValue: function () {\n      return !this.opts.autoUnmask;\n    },\n    isComplete: function () {\n      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n      return maskScope.call(this, {\n        action: \"isComplete\"\n      });\n    },\n    getmetadata: function () {\n      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n      return maskScope.call(this, {\n        action: \"getmetadata\"\n      });\n    },\n    isValid: function (value) {\n      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n      return maskScope.call(this, {\n        action: \"isValid\",\n        value: value\n      });\n    },\n    format: function (value, metadata) {\n      this.maskset = this.maskset || generateMaskSet(this.opts, this.noMasksCache);\n      return maskScope.call(this, {\n        action: \"format\",\n        value: value,\n        metadata: metadata\n      });\n    },\n    setValue: function (value) {\n      if (this.el) {\n        $(this.el).trigger(\"setvalue\", [value]);\n      }\n    },\n    analyseMask: function (mask, regexMask, opts) {\n      var tokenizer = /(?:[?*+]|\\{[0-9\\+\\*]+(?:,[0-9\\+\\*]*)?(?:\\|[0-9\\+\\*]*)?\\})|[^.?*+^${[]()|\\\\]+|./g,\n          regexTokenizer = /\\[\\^?]?(?:[^\\\\\\]]+|\\\\[\\S\\s]?)*]?|\\\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\\S\\s]?)|\\((?:\\?[:=!]?)?|(?:[?*+]|\\{[0-9]+(?:,[0-9]*)?\\})\\??|[^.?*+^${[()|\\\\]+|./g,\n          escaped = false,\n          currentToken = new MaskToken(),\n          match,\n          m,\n          openenings = [],\n          maskTokens = [],\n          openingToken,\n          currentOpeningToken,\n          alternator,\n          lastMatch,\n          groupToken;\n\n      function MaskToken(isGroup, isOptional, isQuantifier, isAlternator) {\n        this.matches = [];\n        this.openGroup = isGroup || false;\n        this.alternatorGroup = false;\n        this.isGroup = isGroup || false;\n        this.isOptional = isOptional || false;\n        this.isQuantifier = isQuantifier || false;\n        this.isAlternator = isAlternator || false;\n        this.quantifier = {\n          min: 1,\n          max: 1\n        };\n      }\n\n      function insertTestDefinition(mtoken, element, position) {\n        position = position !== undefined ? position : mtoken.matches.length;\n        var prevMatch = mtoken.matches[position - 1];\n\n        if (regexMask) {\n          if (element.indexOf(\"[\") === 0 || escaped && /\\\\d|\\\\s|\\\\w]/i.test(element) || element === \".\") {\n            mtoken.matches.splice(position++, 0, {\n              fn: new RegExp(element, opts.casing ? \"i\" : \"\"),\n              optionality: false,\n              newBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== element,\n              casing: null,\n              def: element,\n              placeholder: undefined,\n              nativeDef: element\n            });\n          } else {\n            if (escaped) element = element[element.length - 1];\n            $.each(element.split(\"\"), function (ndx, lmnt) {\n              prevMatch = mtoken.matches[position - 1];\n              mtoken.matches.splice(position++, 0, {\n                fn: null,\n                optionality: false,\n                newBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== lmnt && prevMatch.fn !== null,\n                casing: null,\n                def: opts.staticDefinitionSymbol || lmnt,\n                placeholder: opts.staticDefinitionSymbol !== undefined ? lmnt : undefined,\n                nativeDef: (escaped ? \"'\" : \"\") + lmnt\n              });\n            });\n          }\n\n          escaped = false;\n        } else {\n          var maskdef = (opts.definitions ? opts.definitions[element] : undefined) || Inputmask.prototype.definitions[element];\n\n          if (maskdef && !escaped) {\n            mtoken.matches.splice(position++, 0, {\n              fn: maskdef.validator ? typeof maskdef.validator == \"string\" ? new RegExp(maskdef.validator, opts.casing ? \"i\" : \"\") : new function () {\n                this.test = maskdef.validator;\n              }() : new RegExp(\".\"),\n              optionality: false,\n              newBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== (maskdef.definitionSymbol || element),\n              casing: maskdef.casing,\n              def: maskdef.definitionSymbol || element,\n              placeholder: maskdef.placeholder,\n              nativeDef: element\n            });\n          } else {\n            mtoken.matches.splice(position++, 0, {\n              fn: null,\n              optionality: false,\n              newBlockMarker: prevMatch === undefined ? \"master\" : prevMatch.def !== element && prevMatch.fn !== null,\n              casing: null,\n              def: opts.staticDefinitionSymbol || element,\n              placeholder: opts.staticDefinitionSymbol !== undefined ? element : undefined,\n              nativeDef: (escaped ? \"'\" : \"\") + element\n            });\n            escaped = false;\n          }\n        }\n      }\n\n      function verifyGroupMarker(maskToken) {\n        if (maskToken && maskToken.matches) {\n          $.each(maskToken.matches, function (ndx, token) {\n            var nextToken = maskToken.matches[ndx + 1];\n\n            if ((nextToken === undefined || nextToken.matches === undefined || nextToken.isQuantifier === false) && token && token.isGroup) {\n              token.isGroup = false;\n\n              if (!regexMask) {\n                insertTestDefinition(token, opts.groupmarker[0], 0);\n\n                if (token.openGroup !== true) {\n                  insertTestDefinition(token, opts.groupmarker[1]);\n                }\n              }\n            }\n\n            verifyGroupMarker(token);\n          });\n        }\n      }\n\n      function defaultCase() {\n        if (openenings.length > 0) {\n          currentOpeningToken = openenings[openenings.length - 1];\n          insertTestDefinition(currentOpeningToken, m);\n\n          if (currentOpeningToken.isAlternator) {\n            alternator = openenings.pop();\n\n            for (var mndx = 0; mndx < alternator.matches.length; mndx++) {\n              if (alternator.matches[mndx].isGroup) alternator.matches[mndx].isGroup = false;\n            }\n\n            if (openenings.length > 0) {\n              currentOpeningToken = openenings[openenings.length - 1];\n              currentOpeningToken.matches.push(alternator);\n            } else {\n              currentToken.matches.push(alternator);\n            }\n          }\n        } else {\n          insertTestDefinition(currentToken, m);\n        }\n      }\n\n      function reverseTokens(maskToken) {\n        function reverseStatic(st) {\n          if (st === opts.optionalmarker[0]) st = opts.optionalmarker[1];else if (st === opts.optionalmarker[1]) st = opts.optionalmarker[0];else if (st === opts.groupmarker[0]) st = opts.groupmarker[1];else if (st === opts.groupmarker[1]) st = opts.groupmarker[0];\n          return st;\n        }\n\n        maskToken.matches = maskToken.matches.reverse();\n\n        for (var match in maskToken.matches) {\n          if (maskToken.matches.hasOwnProperty(match)) {\n            var intMatch = parseInt(match);\n\n            if (maskToken.matches[match].isQuantifier && maskToken.matches[intMatch + 1] && maskToken.matches[intMatch + 1].isGroup) {\n              var qt = maskToken.matches[match];\n              maskToken.matches.splice(match, 1);\n              maskToken.matches.splice(intMatch + 1, 0, qt);\n            }\n\n            if (maskToken.matches[match].matches !== undefined) {\n              maskToken.matches[match] = reverseTokens(maskToken.matches[match]);\n            } else {\n              maskToken.matches[match] = reverseStatic(maskToken.matches[match]);\n            }\n          }\n        }\n\n        return maskToken;\n      }\n\n      function groupify(matches) {\n        var groupToken = new MaskToken(true);\n        groupToken.openGroup = false;\n        groupToken.matches = matches;\n        return groupToken;\n      }\n\n      if (regexMask) {\n        opts.optionalmarker[0] = undefined;\n        opts.optionalmarker[1] = undefined;\n      }\n\n      while (match = regexMask ? regexTokenizer.exec(mask) : tokenizer.exec(mask)) {\n        m = match[0];\n\n        if (regexMask) {\n          switch (m.charAt(0)) {\n            case \"?\":\n              m = \"{0,1}\";\n              break;\n\n            case \"+\":\n            case \"*\":\n              m = \"{\" + m + \"}\";\n              break;\n          }\n        }\n\n        if (escaped) {\n          defaultCase();\n          continue;\n        }\n\n        switch (m.charAt(0)) {\n          case \"(?=\":\n            break;\n\n          case \"(?!\":\n            break;\n\n          case \"(?<=\":\n            break;\n\n          case \"(?<!\":\n            break;\n\n          case opts.escapeChar:\n            escaped = true;\n\n            if (regexMask) {\n              defaultCase();\n            }\n\n            break;\n\n          case opts.optionalmarker[1]:\n          case opts.groupmarker[1]:\n            openingToken = openenings.pop();\n            openingToken.openGroup = false;\n\n            if (openingToken !== undefined) {\n              if (openenings.length > 0) {\n                currentOpeningToken = openenings[openenings.length - 1];\n                currentOpeningToken.matches.push(openingToken);\n\n                if (currentOpeningToken.isAlternator) {\n                  alternator = openenings.pop();\n\n                  for (var mndx = 0; mndx < alternator.matches.length; mndx++) {\n                    alternator.matches[mndx].isGroup = false;\n                    alternator.matches[mndx].alternatorGroup = false;\n                  }\n\n                  if (openenings.length > 0) {\n                    currentOpeningToken = openenings[openenings.length - 1];\n                    currentOpeningToken.matches.push(alternator);\n                  } else {\n                    currentToken.matches.push(alternator);\n                  }\n                }\n              } else {\n                currentToken.matches.push(openingToken);\n              }\n            } else defaultCase();\n\n            break;\n\n          case opts.optionalmarker[0]:\n            openenings.push(new MaskToken(false, true));\n            break;\n\n          case opts.groupmarker[0]:\n            openenings.push(new MaskToken(true));\n            break;\n\n          case opts.quantifiermarker[0]:\n            var quantifier = new MaskToken(false, false, true);\n            m = m.replace(/[{}]/g, \"\");\n            var mqj = m.split(\"|\"),\n                mq = mqj[0].split(\",\"),\n                mq0 = isNaN(mq[0]) ? mq[0] : parseInt(mq[0]),\n                mq1 = mq.length === 1 ? mq0 : isNaN(mq[1]) ? mq[1] : parseInt(mq[1]);\n\n            if (mq0 === \"*\" || mq0 === \"+\") {\n              mq0 = mq1 === \"*\" ? 0 : 1;\n            }\n\n            quantifier.quantifier = {\n              min: mq0,\n              max: mq1,\n              jit: mqj[1]\n            };\n            var matches = openenings.length > 0 ? openenings[openenings.length - 1].matches : currentToken.matches;\n            match = matches.pop();\n\n            if (match.isAlternator) {\n              matches.push(match);\n              matches = match.matches;\n              var groupToken = new MaskToken(true);\n              var tmpMatch = matches.pop();\n              matches.push(groupToken);\n              matches = groupToken.matches;\n              match = tmpMatch;\n            }\n\n            if (!match.isGroup) {\n              match = groupify([match]);\n            }\n\n            matches.push(match);\n            matches.push(quantifier);\n            break;\n\n          case opts.alternatormarker:\n            var groupQuantifier = function (matches) {\n              var lastMatch = matches.pop();\n\n              if (lastMatch.isQuantifier) {\n                lastMatch = groupify([matches.pop(), lastMatch]);\n              }\n\n              return lastMatch;\n            };\n\n            if (openenings.length > 0) {\n              currentOpeningToken = openenings[openenings.length - 1];\n              var subToken = currentOpeningToken.matches[currentOpeningToken.matches.length - 1];\n\n              if (currentOpeningToken.openGroup && (subToken.matches === undefined || subToken.isGroup === false && subToken.isAlternator === false)) {\n                lastMatch = openenings.pop();\n              } else {\n                lastMatch = groupQuantifier(currentOpeningToken.matches);\n              }\n            } else {\n              lastMatch = groupQuantifier(currentToken.matches);\n            }\n\n            if (lastMatch.isAlternator) {\n              openenings.push(lastMatch);\n            } else {\n              if (lastMatch.alternatorGroup) {\n                alternator = openenings.pop();\n                lastMatch.alternatorGroup = false;\n              } else {\n                alternator = new MaskToken(false, false, false, true);\n              }\n\n              alternator.matches.push(lastMatch);\n              openenings.push(alternator);\n\n              if (lastMatch.openGroup) {\n                lastMatch.openGroup = false;\n                var alternatorGroup = new MaskToken(true);\n                alternatorGroup.alternatorGroup = true;\n                openenings.push(alternatorGroup);\n              }\n            }\n\n            break;\n\n          default:\n            defaultCase();\n        }\n      }\n\n      while (openenings.length > 0) {\n        openingToken = openenings.pop();\n        currentToken.matches.push(openingToken);\n      }\n\n      if (currentToken.matches.length > 0) {\n        verifyGroupMarker(currentToken);\n        maskTokens.push(currentToken);\n      }\n\n      if (opts.numericInput || opts.isRTL) {\n        reverseTokens(maskTokens[0]);\n      }\n\n      return maskTokens;\n    },\n    positionColorMask: function (input, template) {\n      input.style.left = template.offsetLeft + \"px\";\n    }\n  };\n\n  Inputmask.extendDefaults = function (options) {\n    $.extend(true, Inputmask.prototype.defaults, options);\n  };\n\n  Inputmask.extendDefinitions = function (definition) {\n    $.extend(true, Inputmask.prototype.definitions, definition);\n  };\n\n  Inputmask.extendAliases = function (alias) {\n    $.extend(true, Inputmask.prototype.aliases, alias);\n  };\n\n  Inputmask.format = function (value, options, metadata) {\n    return Inputmask(options).format(value, metadata);\n  };\n\n  Inputmask.unmask = function (value, options) {\n    return Inputmask(options).unmaskedvalue(value);\n  };\n\n  Inputmask.isValid = function (value, options) {\n    return Inputmask(options).isValid(value);\n  };\n\n  Inputmask.remove = function (elems) {\n    if (typeof elems === \"string\") {\n      elems = document.getElementById(elems) || document.querySelectorAll(elems);\n    }\n\n    elems = elems.nodeName ? [elems] : elems;\n    $.each(elems, function (ndx, el) {\n      if (el.inputmask) el.inputmask.remove();\n    });\n  };\n\n  Inputmask.setValue = function (elems, value) {\n    if (typeof elems === \"string\") {\n      elems = document.getElementById(elems) || document.querySelectorAll(elems);\n    }\n\n    elems = elems.nodeName ? [elems] : elems;\n    $.each(elems, function (ndx, el) {\n      if (el.inputmask) el.inputmask.setValue(value);else $(el).trigger(\"setvalue\", [value]);\n    });\n  };\n\n  Inputmask.escapeRegex = function (str) {\n    var specials = [\"/\", \".\", \"*\", \"+\", \"?\", \"|\", \"(\", \")\", \"[\", \"]\", \"{\", \"}\", \"\\\\\", \"$\", \"^\"];\n    return str.replace(new RegExp(\"(\\\\\" + specials.join(\"|\\\\\") + \")\", \"gim\"), \"\\\\$1\");\n  };\n\n  Inputmask.keyCode = {\n    BACKSPACE: 8,\n    BACKSPACE_SAFARI: 127,\n    DELETE: 46,\n    DOWN: 40,\n    END: 35,\n    ENTER: 13,\n    ESCAPE: 27,\n    HOME: 36,\n    INSERT: 45,\n    LEFT: 37,\n    PAGE_DOWN: 34,\n    PAGE_UP: 33,\n    RIGHT: 39,\n    SPACE: 32,\n    TAB: 9,\n    UP: 38,\n    X: 88,\n    CONTROL: 17\n  };\n  Inputmask.dependencyLib = $;\n\n  function resolveAlias(aliasStr, options, opts) {\n    var aliasDefinition = Inputmask.prototype.aliases[aliasStr];\n\n    if (aliasDefinition) {\n      if (aliasDefinition.alias) resolveAlias(aliasDefinition.alias, undefined, opts);\n      $.extend(true, opts, aliasDefinition);\n      $.extend(true, opts, options);\n      return true;\n    } else if (opts.mask === null) {\n      opts.mask = aliasStr;\n    }\n\n    return false;\n  }\n\n  function generateMaskSet(opts, nocache) {\n    function generateMask(mask, metadata, opts) {\n      var regexMask = false;\n\n      if (mask === null || mask === \"\") {\n        regexMask = opts.regex !== null;\n\n        if (regexMask) {\n          mask = opts.regex;\n          mask = mask.replace(/^(\\^)(.*)(\\$)$/, \"$2\");\n        } else {\n          regexMask = true;\n          mask = \".*\";\n        }\n      }\n\n      if (mask.length === 1 && opts.greedy === false && opts.repeat !== 0) {\n        opts.placeholder = \"\";\n      }\n\n      if (opts.repeat > 0 || opts.repeat === \"*\" || opts.repeat === \"+\") {\n        var repeatStart = opts.repeat === \"*\" ? 0 : opts.repeat === \"+\" ? 1 : opts.repeat;\n        mask = opts.groupmarker[0] + mask + opts.groupmarker[1] + opts.quantifiermarker[0] + repeatStart + \",\" + opts.repeat + opts.quantifiermarker[1];\n      }\n\n      var masksetDefinition,\n          maskdefKey = regexMask ? \"regex_\" + opts.regex : opts.numericInput ? mask.split(\"\").reverse().join(\"\") : mask;\n\n      if (Inputmask.prototype.masksCache[maskdefKey] === undefined || nocache === true) {\n        masksetDefinition = {\n          mask: mask,\n          maskToken: Inputmask.prototype.analyseMask(mask, regexMask, opts),\n          validPositions: {},\n          _buffer: undefined,\n          buffer: undefined,\n          tests: {},\n          excludes: {},\n          metadata: metadata,\n          maskLength: undefined,\n          jitOffset: {}\n        };\n\n        if (nocache !== true) {\n          Inputmask.prototype.masksCache[maskdefKey] = masksetDefinition;\n          masksetDefinition = $.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);\n        }\n      } else masksetDefinition = $.extend(true, {}, Inputmask.prototype.masksCache[maskdefKey]);\n\n      return masksetDefinition;\n    }\n\n    var ms;\n\n    if ($.isFunction(opts.mask)) {\n      opts.mask = opts.mask(opts);\n    }\n\n    if ($.isArray(opts.mask)) {\n      if (opts.mask.length > 1) {\n        if (opts.keepStatic === null) {\n          opts.keepStatic = \"auto\";\n\n          for (var i = 0; i < opts.mask.length; i++) {\n            if (opts.mask[i].charAt(0) !== opts.mask[0].charAt(0)) {\n              opts.keepStatic = true;\n              break;\n            }\n          }\n        }\n\n        var altMask = opts.groupmarker[0];\n        $.each(opts.isRTL ? opts.mask.reverse() : opts.mask, function (ndx, msk) {\n          if (altMask.length > 1) {\n            altMask += opts.groupmarker[1] + opts.alternatormarker + opts.groupmarker[0];\n          }\n\n          if (msk.mask !== undefined && !$.isFunction(msk.mask)) {\n            altMask += msk.mask;\n          } else {\n            altMask += msk;\n          }\n        });\n        altMask += opts.groupmarker[1];\n        return generateMask(altMask, opts.mask, opts);\n      } else opts.mask = opts.mask.pop();\n    }\n\n    if (opts.mask && opts.mask.mask !== undefined && !$.isFunction(opts.mask.mask)) {\n      ms = generateMask(opts.mask.mask, opts.mask, opts);\n    } else {\n      ms = generateMask(opts.mask, opts.mask, opts);\n    }\n\n    return ms;\n  }\n\n  function isInputEventSupported(eventName) {\n    var el = document.createElement(\"input\"),\n        evName = \"on\" + eventName,\n        isSupported = (evName in el);\n\n    if (!isSupported) {\n      el.setAttribute(evName, \"return;\");\n      isSupported = typeof el[evName] === \"function\";\n    }\n\n    el = null;\n    return isSupported;\n  }\n\n  function maskScope(actionObj, maskset, opts) {\n    maskset = maskset || this.maskset;\n    opts = opts || this.opts;\n    var inputmask = this,\n        el = this.el,\n        isRTL = this.isRTL,\n        undoValue,\n        $el,\n        skipKeyPressEvent = false,\n        skipInputEvent = false,\n        ignorable = false,\n        maxLength,\n        mouseEnter = false,\n        colorMask,\n        originalPlaceholder;\n\n    var getMaskTemplate = function (baseOnInput, minimalPos, includeMode, noJit, clearOptionalTail) {\n      var greedy = opts.greedy;\n      if (clearOptionalTail) opts.greedy = false;\n      minimalPos = minimalPos || 0;\n      var maskTemplate = [],\n          ndxIntlzr,\n          pos = 0,\n          test,\n          testPos,\n          lvp = getLastValidPosition();\n\n      do {\n        if (baseOnInput === true && getMaskSet().validPositions[pos]) {\n          testPos = clearOptionalTail && getMaskSet().validPositions[pos].match.optionality === true && getMaskSet().validPositions[pos + 1] === undefined && (getMaskSet().validPositions[pos].generatedInput === true || getMaskSet().validPositions[pos].input == opts.skipOptionalPartCharacter && pos > 0) ? determineTestTemplate(pos, getTests(pos, ndxIntlzr, pos - 1)) : getMaskSet().validPositions[pos];\n          test = testPos.match;\n          ndxIntlzr = testPos.locator.slice();\n          maskTemplate.push(includeMode === true ? testPos.input : includeMode === false ? test.nativeDef : getPlaceholder(pos, test));\n        } else {\n          testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);\n          test = testPos.match;\n          ndxIntlzr = testPos.locator.slice();\n          var jitMasking = noJit === true ? false : opts.jitMasking !== false ? opts.jitMasking : test.jit;\n\n          if (jitMasking === false || jitMasking === undefined || typeof jitMasking === \"number\" && isFinite(jitMasking) && jitMasking > pos) {\n            maskTemplate.push(includeMode === false ? test.nativeDef : getPlaceholder(pos, test));\n          }\n        }\n\n        if (opts.keepStatic === \"auto\") {\n          if (test.newBlockMarker && test.fn !== null) {\n            opts.keepStatic = pos - 1;\n          }\n        }\n\n        pos++;\n      } while ((maxLength === undefined || pos < maxLength) && (test.fn !== null || test.def !== \"\") || minimalPos > pos);\n\n      if (maskTemplate[maskTemplate.length - 1] === \"\") {\n        maskTemplate.pop();\n      }\n\n      if (includeMode !== false || getMaskSet().maskLength === undefined) getMaskSet().maskLength = pos - 1;\n      opts.greedy = greedy;\n      return maskTemplate;\n    };\n\n    function getMaskSet() {\n      return maskset;\n    }\n\n    function resetMaskSet(soft) {\n      var maskset = getMaskSet();\n      maskset.buffer = undefined;\n\n      if (soft !== true) {\n        maskset.validPositions = {};\n        maskset.p = 0;\n      }\n    }\n\n    function getLastValidPosition(closestTo, strict, validPositions) {\n      var before = -1,\n          after = -1,\n          valids = validPositions || getMaskSet().validPositions;\n      if (closestTo === undefined) closestTo = -1;\n\n      for (var posNdx in valids) {\n        var psNdx = parseInt(posNdx);\n\n        if (valids[psNdx] && (strict || valids[psNdx].generatedInput !== true)) {\n          if (psNdx <= closestTo) before = psNdx;\n          if (psNdx >= closestTo) after = psNdx;\n        }\n      }\n\n      return before === -1 || before == closestTo ? after : after == -1 ? before : closestTo - before < after - closestTo ? before : after;\n    }\n\n    function getDecisionTaker(tst) {\n      var decisionTaker = tst.locator[tst.alternation];\n\n      if (typeof decisionTaker == \"string\" && decisionTaker.length > 0) {\n        decisionTaker = decisionTaker.split(\",\")[0];\n      }\n\n      return decisionTaker !== undefined ? decisionTaker.toString() : \"\";\n    }\n\n    function getLocator(tst, align) {\n      var locator = (tst.alternation != undefined ? tst.mloc[getDecisionTaker(tst)] : tst.locator).join(\"\");\n      if (locator !== \"\") while (locator.length < align) locator += \"0\";\n      return locator;\n    }\n\n    function determineTestTemplate(pos, tests) {\n      pos = pos > 0 ? pos - 1 : 0;\n      var altTest = getTest(pos),\n          targetLocator = getLocator(altTest),\n          tstLocator,\n          closest,\n          bestMatch;\n\n      for (var ndx = 0; ndx < tests.length; ndx++) {\n        var tst = tests[ndx];\n        tstLocator = getLocator(tst, targetLocator.length);\n        var distance = Math.abs(tstLocator - targetLocator);\n\n        if (closest === undefined || tstLocator !== \"\" && distance < closest || bestMatch && !opts.greedy && bestMatch.match.optionality && bestMatch.match.newBlockMarker === \"master\" && (!tst.match.optionality || !tst.match.newBlockMarker) || bestMatch && bestMatch.match.optionalQuantifier && !tst.match.optionalQuantifier) {\n          closest = distance;\n          bestMatch = tst;\n        }\n      }\n\n      return bestMatch;\n    }\n\n    function getTestTemplate(pos, ndxIntlzr, tstPs) {\n      return getMaskSet().validPositions[pos] || determineTestTemplate(pos, getTests(pos, ndxIntlzr ? ndxIntlzr.slice() : ndxIntlzr, tstPs));\n    }\n\n    function getTest(pos, tests) {\n      if (getMaskSet().validPositions[pos]) {\n        return getMaskSet().validPositions[pos];\n      }\n\n      return (tests || getTests(pos))[0];\n    }\n\n    function positionCanMatchDefinition(pos, def) {\n      var valid = false,\n          tests = getTests(pos);\n\n      for (var tndx = 0; tndx < tests.length; tndx++) {\n        if (tests[tndx].match && tests[tndx].match.def === def) {\n          valid = true;\n          break;\n        }\n      }\n\n      return valid;\n    }\n\n    function getTests(pos, ndxIntlzr, tstPs) {\n      var maskTokens = getMaskSet().maskToken,\n          testPos = ndxIntlzr ? tstPs : 0,\n          ndxInitializer = ndxIntlzr ? ndxIntlzr.slice() : [0],\n          matches = [],\n          insertStop = false,\n          latestMatch,\n          cacheDependency = ndxIntlzr ? ndxIntlzr.join(\"\") : \"\";\n\n      function resolveTestFromToken(maskToken, ndxInitializer, loopNdx, quantifierRecurse) {\n        function handleMatch(match, loopNdx, quantifierRecurse) {\n          function isFirstMatch(latestMatch, tokenGroup) {\n            var firstMatch = $.inArray(latestMatch, tokenGroup.matches) === 0;\n\n            if (!firstMatch) {\n              $.each(tokenGroup.matches, function (ndx, match) {\n                if (match.isQuantifier === true) firstMatch = isFirstMatch(latestMatch, tokenGroup.matches[ndx - 1]);else if (match.hasOwnProperty(\"matches\")) firstMatch = isFirstMatch(latestMatch, match);\n                if (firstMatch) return false;\n              });\n            }\n\n            return firstMatch;\n          }\n\n          function resolveNdxInitializer(pos, alternateNdx, targetAlternation) {\n            var bestMatch, indexPos;\n\n            if (getMaskSet().tests[pos] || getMaskSet().validPositions[pos]) {\n              $.each(getMaskSet().tests[pos] || [getMaskSet().validPositions[pos]], function (ndx, lmnt) {\n                if (lmnt.mloc[alternateNdx]) {\n                  bestMatch = lmnt;\n                  return false;\n                }\n\n                var alternation = targetAlternation !== undefined ? targetAlternation : lmnt.alternation,\n                    ndxPos = lmnt.locator[alternation] !== undefined ? lmnt.locator[alternation].toString().indexOf(alternateNdx) : -1;\n\n                if ((indexPos === undefined || ndxPos < indexPos) && ndxPos !== -1) {\n                  bestMatch = lmnt;\n                  indexPos = ndxPos;\n                }\n              });\n            }\n\n            if (bestMatch) {\n              var bestMatchAltIndex = bestMatch.locator[bestMatch.alternation];\n              var locator = bestMatch.mloc[alternateNdx] || bestMatch.mloc[bestMatchAltIndex] || bestMatch.locator;\n              return locator.slice((targetAlternation !== undefined ? targetAlternation : bestMatch.alternation) + 1);\n            } else {\n              return targetAlternation !== undefined ? resolveNdxInitializer(pos, alternateNdx) : undefined;\n            }\n          }\n\n          function isSubsetOf(source, target) {\n            function expand(pattern) {\n              var expanded = [],\n                  start,\n                  end;\n\n              for (var i = 0, l = pattern.length; i < l; i++) {\n                if (pattern.charAt(i) === \"-\") {\n                  end = pattern.charCodeAt(i + 1);\n\n                  while (++start < end) expanded.push(String.fromCharCode(start));\n                } else {\n                  start = pattern.charCodeAt(i);\n                  expanded.push(pattern.charAt(i));\n                }\n              }\n\n              return expanded.join(\"\");\n            }\n\n            if (opts.regex && source.match.fn !== null && target.match.fn !== null) {\n              return expand(target.match.def.replace(/[\\[\\]]/g, \"\")).indexOf(expand(source.match.def.replace(/[\\[\\]]/g, \"\"))) !== -1;\n            }\n\n            return source.match.def === target.match.nativeDef;\n          }\n\n          function staticCanMatchDefinition(source, target) {\n            var sloc = source.locator.slice(source.alternation).join(\"\"),\n                tloc = target.locator.slice(target.alternation).join(\"\"),\n                canMatch = sloc == tloc;\n            canMatch = canMatch && source.match.fn === null && target.match.fn !== null ? target.match.fn.test(source.match.def, getMaskSet(), pos, false, opts, false) : false;\n            return canMatch;\n          }\n\n          function setMergeLocators(targetMatch, altMatch) {\n            if (altMatch === undefined || targetMatch.alternation === altMatch.alternation && targetMatch.locator[targetMatch.alternation].toString().indexOf(altMatch.locator[altMatch.alternation]) === -1) {\n              targetMatch.mloc = targetMatch.mloc || {};\n              var locNdx = targetMatch.locator[targetMatch.alternation];\n              if (locNdx === undefined) targetMatch.alternation = undefined;else {\n                if (typeof locNdx === \"string\") locNdx = locNdx.split(\",\")[0];\n                if (targetMatch.mloc[locNdx] === undefined) targetMatch.mloc[locNdx] = targetMatch.locator.slice();\n\n                if (altMatch !== undefined) {\n                  for (var ndx in altMatch.mloc) {\n                    if (typeof ndx === \"string\") ndx = ndx.split(\",\")[0];\n                    if (targetMatch.mloc[ndx] === undefined) targetMatch.mloc[ndx] = altMatch.mloc[ndx];\n                  }\n\n                  targetMatch.locator[targetMatch.alternation] = Object.keys(targetMatch.mloc).join(\",\");\n                }\n\n                return true;\n              }\n            }\n\n            return false;\n          }\n\n          if (testPos > 500 && quantifierRecurse !== undefined) {\n            throw \"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. \" + getMaskSet().mask;\n          }\n\n          if (testPos === pos && match.matches === undefined) {\n            matches.push({\n              match: match,\n              locator: loopNdx.reverse(),\n              cd: cacheDependency,\n              mloc: {}\n            });\n            return true;\n          } else if (match.matches !== undefined) {\n            if (match.isGroup && quantifierRecurse !== match) {\n              match = handleMatch(maskToken.matches[$.inArray(match, maskToken.matches) + 1], loopNdx, quantifierRecurse);\n              if (match) return true;\n            } else if (match.isOptional) {\n              var optionalToken = match;\n              match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);\n\n              if (match) {\n                $.each(matches, function (ndx, mtch) {\n                  mtch.match.optionality = true;\n                });\n                latestMatch = matches[matches.length - 1].match;\n\n                if (quantifierRecurse === undefined && isFirstMatch(latestMatch, optionalToken)) {\n                  insertStop = true;\n                  testPos = pos;\n                } else return true;\n              }\n            } else if (match.isAlternator) {\n              var alternateToken = match,\n                  malternateMatches = [],\n                  maltMatches,\n                  currentMatches = matches.slice(),\n                  loopNdxCnt = loopNdx.length;\n              var altIndex = ndxInitializer.length > 0 ? ndxInitializer.shift() : -1;\n\n              if (altIndex === -1 || typeof altIndex === \"string\") {\n                var currentPos = testPos,\n                    ndxInitializerClone = ndxInitializer.slice(),\n                    altIndexArr = [],\n                    amndx;\n\n                if (typeof altIndex == \"string\") {\n                  altIndexArr = altIndex.split(\",\");\n                } else {\n                  for (amndx = 0; amndx < alternateToken.matches.length; amndx++) {\n                    altIndexArr.push(amndx.toString());\n                  }\n                }\n\n                if (getMaskSet().excludes[pos]) {\n                  var altIndexArrClone = altIndexArr.slice();\n\n                  for (var i = 0, el = getMaskSet().excludes[pos].length; i < el; i++) {\n                    altIndexArr.splice(altIndexArr.indexOf(getMaskSet().excludes[pos][i].toString()), 1);\n                  }\n\n                  if (altIndexArr.length === 0) {\n                    getMaskSet().excludes[pos] = undefined;\n                    altIndexArr = altIndexArrClone;\n                  }\n                }\n\n                if (opts.keepStatic === true || isFinite(parseInt(opts.keepStatic)) && currentPos >= opts.keepStatic) altIndexArr = altIndexArr.slice(0, 1);\n                var unMatchedAlternation = false;\n\n                for (var ndx = 0; ndx < altIndexArr.length; ndx++) {\n                  amndx = parseInt(altIndexArr[ndx]);\n                  matches = [];\n                  ndxInitializer = typeof altIndex === \"string\" ? resolveNdxInitializer(testPos, amndx, loopNdxCnt) || ndxInitializerClone.slice() : ndxInitializerClone.slice();\n                  if (alternateToken.matches[amndx] && handleMatch(alternateToken.matches[amndx], [amndx].concat(loopNdx), quantifierRecurse)) match = true;else if (ndx === 0) {\n                    unMatchedAlternation = true;\n                  }\n                  maltMatches = matches.slice();\n                  testPos = currentPos;\n                  matches = [];\n\n                  for (var ndx1 = 0; ndx1 < maltMatches.length; ndx1++) {\n                    var altMatch = maltMatches[ndx1],\n                        dropMatch = false;\n                    altMatch.match.jit = altMatch.match.jit || unMatchedAlternation;\n                    altMatch.alternation = altMatch.alternation || loopNdxCnt;\n                    setMergeLocators(altMatch);\n\n                    for (var ndx2 = 0; ndx2 < malternateMatches.length; ndx2++) {\n                      var altMatch2 = malternateMatches[ndx2];\n\n                      if (typeof altIndex !== \"string\" || altMatch.alternation !== undefined && $.inArray(altMatch.locator[altMatch.alternation].toString(), altIndexArr) !== -1) {\n                        if (altMatch.match.nativeDef === altMatch2.match.nativeDef) {\n                          dropMatch = true;\n                          setMergeLocators(altMatch2, altMatch);\n                          break;\n                        } else if (isSubsetOf(altMatch, altMatch2)) {\n                          if (setMergeLocators(altMatch, altMatch2)) {\n                            dropMatch = true;\n                            malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);\n                          }\n\n                          break;\n                        } else if (isSubsetOf(altMatch2, altMatch)) {\n                          setMergeLocators(altMatch2, altMatch);\n                          break;\n                        } else if (staticCanMatchDefinition(altMatch, altMatch2)) {\n                          if (setMergeLocators(altMatch, altMatch2)) {\n                            dropMatch = true;\n                            malternateMatches.splice(malternateMatches.indexOf(altMatch2), 0, altMatch);\n                          }\n\n                          break;\n                        }\n                      }\n                    }\n\n                    if (!dropMatch) {\n                      malternateMatches.push(altMatch);\n                    }\n                  }\n                }\n\n                matches = currentMatches.concat(malternateMatches);\n                testPos = pos;\n                insertStop = matches.length > 0;\n                match = malternateMatches.length > 0;\n                ndxInitializer = ndxInitializerClone.slice();\n              } else match = handleMatch(alternateToken.matches[altIndex] || maskToken.matches[altIndex], [altIndex].concat(loopNdx), quantifierRecurse);\n\n              if (match) return true;\n            } else if (match.isQuantifier && quantifierRecurse !== maskToken.matches[$.inArray(match, maskToken.matches) - 1]) {\n              var qt = match;\n\n              for (var qndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; qndx < (isNaN(qt.quantifier.max) ? qndx + 1 : qt.quantifier.max) && testPos <= pos; qndx++) {\n                var tokenGroup = maskToken.matches[$.inArray(qt, maskToken.matches) - 1];\n                match = handleMatch(tokenGroup, [qndx].concat(loopNdx), tokenGroup);\n\n                if (match) {\n                  latestMatch = matches[matches.length - 1].match;\n                  latestMatch.optionalQuantifier = qndx >= qt.quantifier.min;\n                  latestMatch.jit = (qndx || 1) * tokenGroup.matches.indexOf(latestMatch) >= qt.quantifier.jit;\n\n                  if (latestMatch.optionalQuantifier && isFirstMatch(latestMatch, tokenGroup)) {\n                    insertStop = true;\n                    testPos = pos;\n                    break;\n                  }\n\n                  if (latestMatch.jit) {\n                    getMaskSet().jitOffset[pos] = tokenGroup.matches.indexOf(latestMatch);\n                  }\n\n                  return true;\n                }\n              }\n            } else {\n              match = resolveTestFromToken(match, ndxInitializer, loopNdx, quantifierRecurse);\n              if (match) return true;\n            }\n          } else {\n            testPos++;\n          }\n        }\n\n        for (var tndx = ndxInitializer.length > 0 ? ndxInitializer.shift() : 0; tndx < maskToken.matches.length; tndx++) {\n          if (maskToken.matches[tndx].isQuantifier !== true) {\n            var match = handleMatch(maskToken.matches[tndx], [tndx].concat(loopNdx), quantifierRecurse);\n\n            if (match && testPos === pos) {\n              return match;\n            } else if (testPos > pos) {\n              break;\n            }\n          }\n        }\n      }\n\n      function mergeLocators(pos, tests) {\n        var locator = [];\n        if (!$.isArray(tests)) tests = [tests];\n\n        if (tests.length > 0) {\n          if (tests[0].alternation === undefined) {\n            locator = determineTestTemplate(pos, tests.slice()).locator.slice();\n            if (locator.length === 0) locator = tests[0].locator.slice();\n          } else {\n            $.each(tests, function (ndx, tst) {\n              if (tst.def !== \"\") {\n                if (locator.length === 0) locator = tst.locator.slice();else {\n                  for (var i = 0; i < locator.length; i++) {\n                    if (tst.locator[i] && locator[i].toString().indexOf(tst.locator[i]) === -1) {\n                      locator[i] += \",\" + tst.locator[i];\n                    }\n                  }\n                }\n              }\n            });\n          }\n        }\n\n        return locator;\n      }\n\n      if (pos > -1) {\n        if (ndxIntlzr === undefined) {\n          var previousPos = pos - 1,\n              test;\n\n          while ((test = getMaskSet().validPositions[previousPos] || getMaskSet().tests[previousPos]) === undefined && previousPos > -1) {\n            previousPos--;\n          }\n\n          if (test !== undefined && previousPos > -1) {\n            ndxInitializer = mergeLocators(previousPos, test);\n            cacheDependency = ndxInitializer.join(\"\");\n            testPos = previousPos;\n          }\n        }\n\n        if (getMaskSet().tests[pos] && getMaskSet().tests[pos][0].cd === cacheDependency) {\n          return getMaskSet().tests[pos];\n        }\n\n        for (var mtndx = ndxInitializer.shift(); mtndx < maskTokens.length; mtndx++) {\n          var match = resolveTestFromToken(maskTokens[mtndx], ndxInitializer, [mtndx]);\n\n          if (match && testPos === pos || testPos > pos) {\n            break;\n          }\n        }\n      }\n\n      if (matches.length === 0 || insertStop) {\n        matches.push({\n          match: {\n            fn: null,\n            optionality: false,\n            casing: null,\n            def: \"\",\n            placeholder: \"\"\n          },\n          locator: [],\n          mloc: {},\n          cd: cacheDependency\n        });\n      }\n\n      if (ndxIntlzr !== undefined && getMaskSet().tests[pos]) {\n        return $.extend(true, [], matches);\n      }\n\n      getMaskSet().tests[pos] = $.extend(true, [], matches);\n      return getMaskSet().tests[pos];\n    }\n\n    function getBufferTemplate() {\n      if (getMaskSet()._buffer === undefined) {\n        getMaskSet()._buffer = getMaskTemplate(false, 1);\n        if (getMaskSet().buffer === undefined) getMaskSet().buffer = getMaskSet()._buffer.slice();\n      }\n\n      return getMaskSet()._buffer;\n    }\n\n    function getBuffer(noCache) {\n      if (getMaskSet().buffer === undefined || noCache === true) {\n        getMaskSet().buffer = getMaskTemplate(true, getLastValidPosition(), true);\n        if (getMaskSet()._buffer === undefined) getMaskSet()._buffer = getMaskSet().buffer.slice();\n      }\n\n      return getMaskSet().buffer;\n    }\n\n    function refreshFromBuffer(start, end, buffer) {\n      var i, p;\n\n      if (start === true) {\n        resetMaskSet();\n        start = 0;\n        end = buffer.length;\n      } else {\n        for (i = start; i < end; i++) {\n          delete getMaskSet().validPositions[i];\n        }\n      }\n\n      p = start;\n\n      for (i = start; i < end; i++) {\n        resetMaskSet(true);\n\n        if (buffer[i] !== opts.skipOptionalPartCharacter) {\n          var valResult = isValid(p, buffer[i], true, true);\n\n          if (valResult !== false) {\n            resetMaskSet(true);\n            p = valResult.caret !== undefined ? valResult.caret : valResult.pos + 1;\n          }\n        }\n      }\n    }\n\n    function casing(elem, test, pos) {\n      switch (opts.casing || test.casing) {\n        case \"upper\":\n          elem = elem.toUpperCase();\n          break;\n\n        case \"lower\":\n          elem = elem.toLowerCase();\n          break;\n\n        case \"title\":\n          var posBefore = getMaskSet().validPositions[pos - 1];\n\n          if (pos === 0 || posBefore && posBefore.input === String.fromCharCode(Inputmask.keyCode.SPACE)) {\n            elem = elem.toUpperCase();\n          } else {\n            elem = elem.toLowerCase();\n          }\n\n          break;\n\n        default:\n          if ($.isFunction(opts.casing)) {\n            var args = Array.prototype.slice.call(arguments);\n            args.push(getMaskSet().validPositions);\n            elem = opts.casing.apply(this, args);\n          }\n\n      }\n\n      return elem;\n    }\n\n    function checkAlternationMatch(altArr1, altArr2, na) {\n      var altArrC = opts.greedy ? altArr2 : altArr2.slice(0, 1),\n          isMatch = false,\n          naArr = na !== undefined ? na.split(\",\") : [],\n          naNdx;\n\n      for (var i = 0; i < naArr.length; i++) {\n        if ((naNdx = altArr1.indexOf(naArr[i])) !== -1) {\n          altArr1.splice(naNdx, 1);\n        }\n      }\n\n      for (var alndx = 0; alndx < altArr1.length; alndx++) {\n        if ($.inArray(altArr1[alndx], altArrC) !== -1) {\n          isMatch = true;\n          break;\n        }\n      }\n\n      return isMatch;\n    }\n\n    function alternate(pos, c, strict, fromSetValid, rAltPos) {\n      var validPsClone = $.extend(true, {}, getMaskSet().validPositions),\n          lastAlt,\n          alternation,\n          isValidRslt = false,\n          altPos,\n          prevAltPos,\n          i,\n          validPos,\n          decisionPos,\n          lAltPos = rAltPos !== undefined ? rAltPos : getLastValidPosition();\n\n      if (lAltPos === -1 && rAltPos === undefined) {\n        lastAlt = 0;\n        prevAltPos = getTest(lastAlt);\n        alternation = prevAltPos.alternation;\n      } else {\n        for (; lAltPos >= 0; lAltPos--) {\n          altPos = getMaskSet().validPositions[lAltPos];\n\n          if (altPos && altPos.alternation !== undefined) {\n            if (prevAltPos && prevAltPos.locator[altPos.alternation] !== altPos.locator[altPos.alternation]) {\n              break;\n            }\n\n            lastAlt = lAltPos;\n            alternation = getMaskSet().validPositions[lastAlt].alternation;\n            prevAltPos = altPos;\n          }\n        }\n      }\n\n      if (alternation !== undefined) {\n        decisionPos = parseInt(lastAlt);\n        getMaskSet().excludes[decisionPos] = getMaskSet().excludes[decisionPos] || [];\n\n        if (pos !== true) {\n          getMaskSet().excludes[decisionPos].push(getDecisionTaker(prevAltPos));\n        }\n\n        var validInputsClone = [],\n            staticInputsBeforePos = 0;\n\n        for (i = decisionPos; i < getLastValidPosition(undefined, true) + 1; i++) {\n          validPos = getMaskSet().validPositions[i];\n\n          if (validPos && validPos.generatedInput !== true) {\n            validInputsClone.push(validPos.input);\n          } else if (i < pos) staticInputsBeforePos++;\n\n          delete getMaskSet().validPositions[i];\n        }\n\n        while (getMaskSet().excludes[decisionPos] && getMaskSet().excludes[decisionPos].length < 10) {\n          var posOffset = staticInputsBeforePos * -1,\n              validInputs = validInputsClone.slice();\n          getMaskSet().tests[decisionPos] = undefined;\n          resetMaskSet(true);\n          isValidRslt = true;\n\n          while (validInputs.length > 0) {\n            var input = validInputs.shift();\n\n            if (!(isValidRslt = isValid(getLastValidPosition(undefined, true) + 1, input, false, fromSetValid, true))) {\n              break;\n            }\n          }\n\n          if (isValidRslt && c !== undefined) {\n            var targetLvp = getLastValidPosition(pos) + 1;\n\n            for (i = decisionPos; i < getLastValidPosition() + 1; i++) {\n              validPos = getMaskSet().validPositions[i];\n\n              if ((validPos === undefined || validPos.match.fn == null) && i < pos + posOffset) {\n                posOffset++;\n              }\n            }\n\n            pos = pos + posOffset;\n            isValidRslt = isValid(pos > targetLvp ? targetLvp : pos, c, strict, fromSetValid, true);\n          }\n\n          if (!isValidRslt) {\n            resetMaskSet();\n            prevAltPos = getTest(decisionPos);\n            getMaskSet().validPositions = $.extend(true, {}, validPsClone);\n\n            if (getMaskSet().excludes[decisionPos]) {\n              var decisionTaker = getDecisionTaker(prevAltPos);\n\n              if (getMaskSet().excludes[decisionPos].indexOf(decisionTaker) !== -1) {\n                isValidRslt = alternate(pos, c, strict, fromSetValid, decisionPos - 1);\n                break;\n              }\n\n              getMaskSet().excludes[decisionPos].push(decisionTaker);\n\n              for (i = decisionPos; i < getLastValidPosition(undefined, true) + 1; i++) delete getMaskSet().validPositions[i];\n            } else {\n              isValidRslt = alternate(pos, c, strict, fromSetValid, decisionPos - 1);\n              break;\n            }\n          } else break;\n        }\n      }\n\n      getMaskSet().excludes[decisionPos] = undefined;\n      return isValidRslt;\n    }\n\n    function isValid(pos, c, strict, fromSetValid, fromAlternate, validateOnly) {\n      function isSelection(posObj) {\n        return isRTL ? posObj.begin - posObj.end > 1 || posObj.begin - posObj.end === 1 : posObj.end - posObj.begin > 1 || posObj.end - posObj.begin === 1;\n      }\n\n      strict = strict === true;\n      var maskPos = pos;\n\n      if (pos.begin !== undefined) {\n        maskPos = isRTL ? pos.end : pos.begin;\n      }\n\n      function _isValid(position, c, strict) {\n        var rslt = false;\n        $.each(getTests(position), function (ndx, tst) {\n          var test = tst.match;\n          getBuffer(true);\n          rslt = test.fn != null ? test.fn.test(c, getMaskSet(), position, strict, opts, isSelection(pos)) : (c === test.def || c === opts.skipOptionalPartCharacter) && test.def !== \"\" ? {\n            c: getPlaceholder(position, test, true) || test.def,\n            pos: position\n          } : false;\n\n          if (rslt !== false) {\n            var elem = rslt.c !== undefined ? rslt.c : c,\n                validatedPos = position;\n            elem = elem === opts.skipOptionalPartCharacter && test.fn === null ? getPlaceholder(position, test, true) || test.def : elem;\n\n            if (rslt.remove !== undefined) {\n              if (!$.isArray(rslt.remove)) rslt.remove = [rslt.remove];\n              $.each(rslt.remove.sort(function (a, b) {\n                return b - a;\n              }), function (ndx, lmnt) {\n                revalidateMask({\n                  begin: lmnt,\n                  end: lmnt + 1\n                });\n              });\n            }\n\n            if (rslt.insert !== undefined) {\n              if (!$.isArray(rslt.insert)) rslt.insert = [rslt.insert];\n              $.each(rslt.insert.sort(function (a, b) {\n                return a - b;\n              }), function (ndx, lmnt) {\n                isValid(lmnt.pos, lmnt.c, true, fromSetValid);\n              });\n            }\n\n            if (rslt !== true && rslt.pos !== undefined && rslt.pos !== position) {\n              validatedPos = rslt.pos;\n            }\n\n            if (rslt !== true && rslt.pos === undefined && rslt.c === undefined) {\n              return false;\n            }\n\n            if (!revalidateMask(pos, $.extend({}, tst, {\n              input: casing(elem, test, validatedPos)\n            }), fromSetValid, validatedPos)) {\n              rslt = false;\n            }\n\n            return false;\n          }\n        });\n        return rslt;\n      }\n\n      var result = true,\n          positionsClone = $.extend(true, {}, getMaskSet().validPositions);\n\n      if ($.isFunction(opts.preValidation) && !strict && fromSetValid !== true && validateOnly !== true) {\n        result = opts.preValidation(getBuffer(), maskPos, c, isSelection(pos), opts, getMaskSet());\n      }\n\n      if (result === true) {\n        trackbackPositions(undefined, maskPos, true);\n\n        if (maxLength === undefined || maskPos < maxLength) {\n          result = _isValid(maskPos, c, strict);\n\n          if ((!strict || fromSetValid === true) && result === false && validateOnly !== true) {\n            var currentPosValid = getMaskSet().validPositions[maskPos];\n\n            if (currentPosValid && currentPosValid.match.fn === null && (currentPosValid.match.def === c || c === opts.skipOptionalPartCharacter)) {\n              result = {\n                caret: seekNext(maskPos)\n              };\n            } else {\n              if ((opts.insertMode || getMaskSet().validPositions[seekNext(maskPos)] === undefined) && (!isMask(maskPos, true) || getMaskSet().jitOffset[maskPos])) {\n                if (getMaskSet().jitOffset[maskPos] && getMaskSet().validPositions[seekNext(maskPos)] === undefined) {\n                  result = isValid(maskPos + getMaskSet().jitOffset[maskPos], c, strict);\n                  if (result !== false) result.caret = maskPos;\n                } else for (var nPos = maskPos + 1, snPos = seekNext(maskPos); nPos <= snPos; nPos++) {\n                  result = _isValid(nPos, c, strict);\n\n                  if (result !== false) {\n                    result = trackbackPositions(maskPos, result.pos !== undefined ? result.pos : nPos) || result;\n                    maskPos = nPos;\n                    break;\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        if (result === false && opts.keepStatic !== false && (opts.regex == null || isComplete(getBuffer())) && !strict && fromAlternate !== true) {\n          result = alternate(maskPos, c, strict, fromSetValid);\n        }\n\n        if (result === true) {\n          result = {\n            pos: maskPos\n          };\n        }\n      }\n\n      if ($.isFunction(opts.postValidation) && result !== false && !strict && fromSetValid !== true && validateOnly !== true) {\n        var postResult = opts.postValidation(getBuffer(true), pos.begin !== undefined ? isRTL ? pos.end : pos.begin : pos, result, opts);\n\n        if (postResult !== undefined) {\n          if (postResult.refreshFromBuffer && postResult.buffer) {\n            var refresh = postResult.refreshFromBuffer;\n            refreshFromBuffer(refresh === true ? refresh : refresh.start, refresh.end, postResult.buffer);\n          }\n\n          result = postResult === true ? result : postResult;\n        }\n      }\n\n      if (result && result.pos === undefined) {\n        result.pos = maskPos;\n      }\n\n      if (result === false || validateOnly === true) {\n        resetMaskSet(true);\n        getMaskSet().validPositions = $.extend(true, {}, positionsClone);\n      }\n\n      return result;\n    }\n\n    function trackbackPositions(originalPos, newPos, fillOnly) {\n      var result;\n\n      if (originalPos === undefined) {\n        for (originalPos = newPos - 1; originalPos > 0; originalPos--) {\n          if (getMaskSet().validPositions[originalPos]) break;\n        }\n      }\n\n      for (var ps = originalPos; ps < newPos; ps++) {\n        if (getMaskSet().validPositions[ps] === undefined && !isMask(ps, true)) {\n          var vp = ps == 0 ? getTest(ps) : getMaskSet().validPositions[ps - 1];\n\n          if (vp) {\n            var tests = getTests(ps).slice();\n            if (tests[tests.length - 1].match.def === \"\") tests.pop();\n            var bestMatch = determineTestTemplate(ps, tests);\n            bestMatch = $.extend({}, bestMatch, {\n              input: getPlaceholder(ps, bestMatch.match, true) || bestMatch.match.def\n            });\n            bestMatch.generatedInput = true;\n            revalidateMask(ps, bestMatch, true);\n\n            if (fillOnly !== true) {\n              var cvpInput = getMaskSet().validPositions[newPos].input;\n              getMaskSet().validPositions[newPos] = undefined;\n              result = isValid(newPos, cvpInput, true, true);\n            }\n          }\n        }\n      }\n\n      return result;\n    }\n\n    function revalidateMask(pos, validTest, fromSetValid, validatedPos) {\n      function IsEnclosedStatic(pos, valids, selection) {\n        var posMatch = valids[pos];\n\n        if (posMatch !== undefined && (posMatch.match.fn === null && posMatch.match.optionality !== true || posMatch.input === opts.radixPoint)) {\n          var prevMatch = selection.begin <= pos - 1 ? valids[pos - 1] && valids[pos - 1].match.fn === null && valids[pos - 1] : valids[pos - 1],\n              nextMatch = selection.end > pos + 1 ? valids[pos + 1] && valids[pos + 1].match.fn === null && valids[pos + 1] : valids[pos + 1];\n          return prevMatch && nextMatch;\n        }\n\n        return false;\n      }\n\n      var begin = pos.begin !== undefined ? pos.begin : pos,\n          end = pos.end !== undefined ? pos.end : pos;\n\n      if (pos.begin > pos.end) {\n        begin = pos.end;\n        end = pos.begin;\n      }\n\n      validatedPos = validatedPos !== undefined ? validatedPos : begin;\n\n      if (begin !== end || opts.insertMode && getMaskSet().validPositions[validatedPos] !== undefined && fromSetValid === undefined) {\n        var positionsClone = $.extend(true, {}, getMaskSet().validPositions),\n            lvp = getLastValidPosition(undefined, true),\n            i;\n        getMaskSet().p = begin;\n\n        for (i = lvp; i >= begin; i--) {\n          if (getMaskSet().validPositions[i] && getMaskSet().validPositions[i].match.nativeDef === \"+\") {\n            opts.isNegative = false;\n          }\n\n          delete getMaskSet().validPositions[i];\n        }\n\n        var valid = true,\n            j = validatedPos,\n            vps = getMaskSet().validPositions,\n            needsValidation = false,\n            posMatch = j,\n            i = j;\n\n        if (validTest) {\n          getMaskSet().validPositions[validatedPos] = $.extend(true, {}, validTest);\n          posMatch++;\n          j++;\n          if (begin < end) i++;\n        }\n\n        for (; i <= lvp; i++) {\n          var t = positionsClone[i];\n\n          if (t !== undefined && (i >= end || i >= begin && t.generatedInput !== true && IsEnclosedStatic(i, positionsClone, {\n            begin: begin,\n            end: end\n          }))) {\n            while (getTest(posMatch).match.def !== \"\") {\n              if (needsValidation === false && positionsClone[posMatch] && positionsClone[posMatch].match.nativeDef === t.match.nativeDef) {\n                getMaskSet().validPositions[posMatch] = $.extend(true, {}, positionsClone[posMatch]);\n                getMaskSet().validPositions[posMatch].input = t.input;\n                trackbackPositions(undefined, posMatch, true);\n                j = posMatch + 1;\n                valid = true;\n              } else if (opts.shiftPositions && positionCanMatchDefinition(posMatch, t.match.def)) {\n                var result = isValid(posMatch, t.input, true, true);\n                valid = result !== false;\n                j = result.caret || result.insert ? getLastValidPosition() : posMatch + 1;\n                needsValidation = true;\n              } else {\n                valid = t.generatedInput === true || t.input === opts.radixPoint && opts.numericInput === true;\n              }\n\n              if (valid) break;\n\n              if (!valid && posMatch > end && isMask(posMatch, true) && (t.match.fn !== null || posMatch > getMaskSet().maskLength)) {\n                break;\n              }\n\n              posMatch++;\n            }\n\n            if (getTest(posMatch).match.def == \"\") valid = false;\n            posMatch = j;\n          }\n\n          if (!valid) break;\n        }\n\n        if (!valid) {\n          getMaskSet().validPositions = $.extend(true, {}, positionsClone);\n          resetMaskSet(true);\n          return false;\n        }\n      } else if (validTest) {\n        getMaskSet().validPositions[validatedPos] = $.extend(true, {}, validTest);\n      }\n\n      resetMaskSet(true);\n      return true;\n    }\n\n    function isMask(pos, strict) {\n      var test = getTestTemplate(pos).match;\n      if (test.def === \"\") test = getTest(pos).match;\n\n      if (test.fn != null) {\n        return test.fn;\n      }\n\n      if (strict !== true && pos > -1) {\n        var tests = getTests(pos);\n        return tests.length > 1 + (tests[tests.length - 1].match.def === \"\" ? 1 : 0);\n      }\n\n      return false;\n    }\n\n    function seekNext(pos, newBlock) {\n      var position = pos + 1;\n\n      while (getTest(position).match.def !== \"\" && (newBlock === true && (getTest(position).match.newBlockMarker !== true || !isMask(position)) || newBlock !== true && !isMask(position))) {\n        position++;\n      }\n\n      return position;\n    }\n\n    function seekPrevious(pos, newBlock) {\n      var position = pos,\n          tests;\n      if (position <= 0) return 0;\n\n      while (--position > 0 && (newBlock === true && getTest(position).match.newBlockMarker !== true || newBlock !== true && !isMask(position) && (tests = getTests(position), tests.length < 2 || tests.length === 2 && tests[1].match.def === \"\"))) {}\n\n      return position;\n    }\n\n    function writeBuffer(input, buffer, caretPos, event, triggerEvents) {\n      if (event && $.isFunction(opts.onBeforeWrite)) {\n        var result = opts.onBeforeWrite.call(inputmask, event, buffer, caretPos, opts);\n\n        if (result) {\n          if (result.refreshFromBuffer) {\n            var refresh = result.refreshFromBuffer;\n            refreshFromBuffer(refresh === true ? refresh : refresh.start, refresh.end, result.buffer || buffer);\n            buffer = getBuffer(true);\n          }\n\n          if (caretPos !== undefined) caretPos = result.caret !== undefined ? result.caret : caretPos;\n        }\n      }\n\n      if (input !== undefined) {\n        input.inputmask._valueSet(buffer.join(\"\"));\n\n        if (caretPos !== undefined && (event === undefined || event.type !== \"blur\")) {\n          caret(input, caretPos);\n        } else renderColorMask(input, caretPos, buffer.length === 0);\n\n        if (triggerEvents === true) {\n          var $input = $(input),\n              nptVal = input.inputmask._valueGet();\n\n          skipInputEvent = true;\n          $input.trigger(\"input\");\n          setTimeout(function () {\n            if (nptVal === getBufferTemplate().join(\"\")) {\n              $input.trigger(\"cleared\");\n            } else if (isComplete(buffer) === true) {\n              $input.trigger(\"complete\");\n            }\n          }, 0);\n        }\n      }\n    }\n\n    function getPlaceholder(pos, test, returnPL) {\n      test = test || getTest(pos).match;\n\n      if (test.placeholder !== undefined || returnPL === true) {\n        return $.isFunction(test.placeholder) ? test.placeholder(opts) : test.placeholder;\n      } else if (test.fn === null) {\n        if (pos > -1 && getMaskSet().validPositions[pos] === undefined) {\n          var tests = getTests(pos),\n              staticAlternations = [],\n              prevTest;\n\n          if (tests.length > 1 + (tests[tests.length - 1].match.def === \"\" ? 1 : 0)) {\n            for (var i = 0; i < tests.length; i++) {\n              if (tests[i].match.optionality !== true && tests[i].match.optionalQuantifier !== true && (tests[i].match.fn === null || prevTest === undefined || tests[i].match.fn.test(prevTest.match.def, getMaskSet(), pos, true, opts) !== false)) {\n                staticAlternations.push(tests[i]);\n                if (tests[i].match.fn === null) prevTest = tests[i];\n\n                if (staticAlternations.length > 1) {\n                  if (/[0-9a-bA-Z]/.test(staticAlternations[0].match.def)) {\n                    return opts.placeholder.charAt(pos % opts.placeholder.length);\n                  }\n                }\n              }\n            }\n          }\n        }\n\n        return test.def;\n      }\n\n      return opts.placeholder.charAt(pos % opts.placeholder.length);\n    }\n\n    function HandleNativePlaceholder(npt, value) {\n      if (ie) {\n        if (npt.inputmask._valueGet() !== value && (npt.placeholder !== value || npt.placeholder === \"\")) {\n          var buffer = getBuffer().slice(),\n              nptValue = npt.inputmask._valueGet();\n\n          if (nptValue !== value) {\n            var lvp = getLastValidPosition();\n\n            if (lvp === -1 && nptValue === getBufferTemplate().join(\"\")) {\n              buffer = [];\n            } else if (lvp !== -1) {\n              clearOptionalTail(buffer);\n            }\n\n            writeBuffer(npt, buffer);\n          }\n        }\n      } else if (npt.placeholder !== value) {\n        npt.placeholder = value;\n        if (npt.placeholder === \"\") npt.removeAttribute(\"placeholder\");\n      }\n    }\n\n    var EventRuler = {\n      on: function (input, eventName, eventHandler) {\n        var ev = function (e) {\n          var that = this;\n\n          if (that.inputmask === undefined && this.nodeName !== \"FORM\") {\n            var imOpts = $.data(that, \"_inputmask_opts\");\n            if (imOpts) new Inputmask(imOpts).mask(that);else EventRuler.off(that);\n          } else if (e.type !== \"setvalue\" && this.nodeName !== \"FORM\" && (that.disabled || that.readOnly && !(e.type === \"keydown\" && e.ctrlKey && e.keyCode === 67 || opts.tabThrough === false && e.keyCode === Inputmask.keyCode.TAB))) {\n            e.preventDefault();\n          } else {\n            switch (e.type) {\n              case \"input\":\n                if (skipInputEvent === true) {\n                  skipInputEvent = false;\n                  return e.preventDefault();\n                }\n\n                if (mobile) {\n                  var args = arguments;\n                  setTimeout(function () {\n                    eventHandler.apply(that, args);\n                    caret(that, that.inputmask.caretPos, undefined, true);\n                  }, 0);\n                  return false;\n                }\n\n                break;\n\n              case \"keydown\":\n                skipKeyPressEvent = false;\n                skipInputEvent = false;\n                break;\n\n              case \"keypress\":\n                if (skipKeyPressEvent === true) {\n                  return e.preventDefault();\n                }\n\n                skipKeyPressEvent = true;\n                break;\n\n              case \"click\":\n                if (iemobile || iphone) {\n                  var args = arguments;\n                  setTimeout(function () {\n                    eventHandler.apply(that, args);\n                  }, 0);\n                  return false;\n                }\n\n                break;\n            }\n\n            var returnVal = eventHandler.apply(that, arguments);\n\n            if (returnVal === false) {\n              e.preventDefault();\n              e.stopPropagation();\n            }\n\n            return returnVal;\n          }\n        };\n\n        input.inputmask.events[eventName] = input.inputmask.events[eventName] || [];\n        input.inputmask.events[eventName].push(ev);\n\n        if ($.inArray(eventName, [\"submit\", \"reset\"]) !== -1) {\n          if (input.form !== null) $(input.form).on(eventName, ev);\n        } else {\n          $(input).on(eventName, ev);\n        }\n      },\n      off: function (input, event) {\n        if (input.inputmask && input.inputmask.events) {\n          var events;\n\n          if (event) {\n            events = [];\n            events[event] = input.inputmask.events[event];\n          } else {\n            events = input.inputmask.events;\n          }\n\n          $.each(events, function (eventName, evArr) {\n            while (evArr.length > 0) {\n              var ev = evArr.pop();\n\n              if ($.inArray(eventName, [\"submit\", \"reset\"]) !== -1) {\n                if (input.form !== null) $(input.form).off(eventName, ev);\n              } else {\n                $(input).off(eventName, ev);\n              }\n            }\n\n            delete input.inputmask.events[eventName];\n          });\n        }\n      }\n    };\n    var EventHandlers = {\n      keydownEvent: function (e) {\n        var input = this,\n            $input = $(input),\n            k = e.keyCode,\n            pos = caret(input);\n\n        if (k === Inputmask.keyCode.BACKSPACE || k === Inputmask.keyCode.DELETE || iphone && k === Inputmask.keyCode.BACKSPACE_SAFARI || e.ctrlKey && k === Inputmask.keyCode.X && !isInputEventSupported(\"cut\")) {\n          e.preventDefault();\n          handleRemove(input, k, pos);\n          writeBuffer(input, getBuffer(true), getMaskSet().p, e, input.inputmask._valueGet() !== getBuffer().join(\"\"));\n        } else if (k === Inputmask.keyCode.END || k === Inputmask.keyCode.PAGE_DOWN) {\n          e.preventDefault();\n          var caretPos = seekNext(getLastValidPosition());\n          caret(input, e.shiftKey ? pos.begin : caretPos, caretPos, true);\n        } else if (k === Inputmask.keyCode.HOME && !e.shiftKey || k === Inputmask.keyCode.PAGE_UP) {\n          e.preventDefault();\n          caret(input, 0, e.shiftKey ? pos.begin : 0, true);\n        } else if ((opts.undoOnEscape && k === Inputmask.keyCode.ESCAPE || k === 90 && e.ctrlKey) && e.altKey !== true) {\n          checkVal(input, true, false, undoValue.split(\"\"));\n          $input.trigger(\"click\");\n        } else if (k === Inputmask.keyCode.INSERT && !(e.shiftKey || e.ctrlKey)) {\n          opts.insertMode = !opts.insertMode;\n          input.setAttribute(\"im-insert\", opts.insertMode);\n        } else if (opts.tabThrough === true && k === Inputmask.keyCode.TAB) {\n          if (e.shiftKey === true) {\n            if (getTest(pos.begin).match.fn === null) {\n              pos.begin = seekNext(pos.begin);\n            }\n\n            pos.end = seekPrevious(pos.begin, true);\n            pos.begin = seekPrevious(pos.end, true);\n          } else {\n            pos.begin = seekNext(pos.begin, true);\n            pos.end = seekNext(pos.begin, true);\n            if (pos.end < getMaskSet().maskLength) pos.end--;\n          }\n\n          if (pos.begin < getMaskSet().maskLength) {\n            e.preventDefault();\n            caret(input, pos.begin, pos.end);\n          }\n        }\n\n        opts.onKeyDown.call(this, e, getBuffer(), caret(input).begin, opts);\n        ignorable = $.inArray(k, opts.ignorables) !== -1;\n      },\n      keypressEvent: function (e, checkval, writeOut, strict, ndx) {\n        var input = this,\n            $input = $(input),\n            k = e.which || e.charCode || e.keyCode;\n\n        if (checkval !== true && !(e.ctrlKey && e.altKey) && (e.ctrlKey || e.metaKey || ignorable)) {\n          if (k === Inputmask.keyCode.ENTER && undoValue !== getBuffer().join(\"\")) {\n            undoValue = getBuffer().join(\"\");\n            setTimeout(function () {\n              $input.trigger(\"change\");\n            }, 0);\n          }\n\n          return true;\n        } else {\n          if (k) {\n            if (k === 46 && e.shiftKey === false && opts.radixPoint !== \"\") k = opts.radixPoint.charCodeAt(0);\n            var pos = checkval ? {\n              begin: ndx,\n              end: ndx\n            } : caret(input),\n                forwardPosition,\n                c = String.fromCharCode(k),\n                offset = 0;\n\n            if (opts._radixDance && opts.numericInput) {\n              var caretPos = getBuffer().indexOf(opts.radixPoint.charAt(0)) + 1;\n\n              if (pos.begin <= caretPos) {\n                if (k === opts.radixPoint.charCodeAt(0)) offset = 1;\n                pos.begin -= 1;\n                pos.end -= 1;\n              }\n            }\n\n            getMaskSet().writeOutBuffer = true;\n            var valResult = isValid(pos, c, strict);\n\n            if (valResult !== false) {\n              resetMaskSet(true);\n              forwardPosition = valResult.caret !== undefined ? valResult.caret : seekNext(valResult.pos.begin ? valResult.pos.begin : valResult.pos);\n              getMaskSet().p = forwardPosition;\n            }\n\n            forwardPosition = (opts.numericInput && valResult.caret === undefined ? seekPrevious(forwardPosition) : forwardPosition) + offset;\n\n            if (writeOut !== false) {\n              setTimeout(function () {\n                opts.onKeyValidation.call(input, k, valResult, opts);\n              }, 0);\n\n              if (getMaskSet().writeOutBuffer && valResult !== false) {\n                var buffer = getBuffer();\n                writeBuffer(input, buffer, forwardPosition, e, checkval !== true);\n              }\n            }\n\n            e.preventDefault();\n\n            if (checkval) {\n              if (valResult !== false) valResult.forwardPosition = forwardPosition;\n              return valResult;\n            }\n          }\n        }\n      },\n      pasteEvent: function (e) {\n        var input = this,\n            ev = e.originalEvent || e,\n            $input = $(input),\n            inputValue = input.inputmask._valueGet(true),\n            caretPos = caret(input),\n            tempValue;\n\n        if (isRTL) {\n          tempValue = caretPos.end;\n          caretPos.end = caretPos.begin;\n          caretPos.begin = tempValue;\n        }\n\n        var valueBeforeCaret = inputValue.substr(0, caretPos.begin),\n            valueAfterCaret = inputValue.substr(caretPos.end, inputValue.length);\n        if (valueBeforeCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(0, caretPos.begin).join(\"\")) valueBeforeCaret = \"\";\n        if (valueAfterCaret === (isRTL ? getBufferTemplate().reverse() : getBufferTemplate()).slice(caretPos.end).join(\"\")) valueAfterCaret = \"\";\n\n        if (window.clipboardData && window.clipboardData.getData) {\n          inputValue = valueBeforeCaret + window.clipboardData.getData(\"Text\") + valueAfterCaret;\n        } else if (ev.clipboardData && ev.clipboardData.getData) {\n          inputValue = valueBeforeCaret + ev.clipboardData.getData(\"text/plain\") + valueAfterCaret;\n        } else return true;\n\n        var pasteValue = inputValue;\n\n        if ($.isFunction(opts.onBeforePaste)) {\n          pasteValue = opts.onBeforePaste.call(inputmask, inputValue, opts);\n\n          if (pasteValue === false) {\n            return e.preventDefault();\n          }\n\n          if (!pasteValue) {\n            pasteValue = inputValue;\n          }\n        }\n\n        checkVal(input, false, false, pasteValue.toString().split(\"\"));\n        writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()), e, undoValue !== getBuffer().join(\"\"));\n        return e.preventDefault();\n      },\n      inputFallBackEvent: function (e) {\n        function radixPointHandler(input, inputValue, caretPos) {\n          if (inputValue.charAt(caretPos.begin - 1) === \".\" && opts.radixPoint !== \"\") {\n            inputValue = inputValue.split(\"\");\n            inputValue[caretPos.begin - 1] = opts.radixPoint.charAt(0);\n            inputValue = inputValue.join(\"\");\n          }\n\n          return inputValue;\n        }\n\n        function ieMobileHandler(input, inputValue, caretPos) {\n          if (iemobile) {\n            var inputChar = inputValue.replace(getBuffer().join(\"\"), \"\");\n\n            if (inputChar.length === 1) {\n              var iv = inputValue.split(\"\");\n              iv.splice(caretPos.begin, 0, inputChar);\n              inputValue = iv.join(\"\");\n            }\n          }\n\n          return inputValue;\n        }\n\n        var input = this,\n            inputValue = input.inputmask._valueGet();\n\n        if (getBuffer().join(\"\") !== inputValue) {\n          var caretPos = caret(input);\n          inputValue = radixPointHandler(input, inputValue, caretPos);\n          inputValue = ieMobileHandler(input, inputValue, caretPos);\n\n          if (getBuffer().join(\"\") !== inputValue) {\n            var buffer = getBuffer().join(\"\"),\n                offset = !opts.numericInput && inputValue.length > buffer.length ? -1 : 0,\n                frontPart = inputValue.substr(0, caretPos.begin),\n                backPart = inputValue.substr(caretPos.begin),\n                frontBufferPart = buffer.substr(0, caretPos.begin + offset),\n                backBufferPart = buffer.substr(caretPos.begin + offset);\n            var selection = caretPos,\n                entries = \"\",\n                isEntry = false;\n\n            if (frontPart !== frontBufferPart) {\n              var fpl = (isEntry = frontPart.length >= frontBufferPart.length) ? frontPart.length : frontBufferPart.length,\n                  i;\n\n              for (i = 0; frontPart.charAt(i) === frontBufferPart.charAt(i) && i < fpl; i++);\n\n              if (isEntry) {\n                selection.begin = i - offset;\n                entries += frontPart.slice(i, selection.end);\n              }\n            }\n\n            if (backPart !== backBufferPart) {\n              if (backPart.length > backBufferPart.length) {\n                entries += backPart.slice(0, 1);\n              } else {\n                if (backPart.length < backBufferPart.length) {\n                  selection.end += backBufferPart.length - backPart.length;\n\n                  if (!isEntry && opts.radixPoint !== \"\" && backPart === \"\" && frontPart.charAt(selection.begin + offset - 1) === opts.radixPoint) {\n                    selection.begin--;\n                    entries = opts.radixPoint;\n                  }\n                }\n              }\n            }\n\n            writeBuffer(input, getBuffer(), {\n              begin: selection.begin + offset,\n              end: selection.end + offset\n            });\n\n            if (entries.length > 0) {\n              $.each(entries.split(\"\"), function (ndx, entry) {\n                var keypress = new $.Event(\"keypress\");\n                keypress.which = entry.charCodeAt(0);\n                ignorable = false;\n                EventHandlers.keypressEvent.call(input, keypress);\n              });\n            } else {\n              if (selection.begin === selection.end - 1) {\n                selection.begin = seekPrevious(selection.begin + 1);\n\n                if (selection.begin === selection.end - 1) {\n                  caret(input, selection.begin);\n                } else {\n                  caret(input, selection.begin, selection.end);\n                }\n              }\n\n              var keydown = new $.Event(\"keydown\");\n              keydown.keyCode = opts.numericInput ? Inputmask.keyCode.BACKSPACE : Inputmask.keyCode.DELETE;\n              EventHandlers.keydownEvent.call(input, keydown);\n            }\n\n            e.preventDefault();\n          }\n        }\n      },\n      beforeInputEvent: function (e) {\n        if (e.cancelable) {\n          var input = this;\n\n          switch (e.inputType) {\n            case \"insertText\":\n              $.each(e.data.split(\"\"), function (ndx, entry) {\n                var keypress = new $.Event(\"keypress\");\n                keypress.which = entry.charCodeAt(0);\n                ignorable = false;\n                EventHandlers.keypressEvent.call(input, keypress);\n              });\n              return e.preventDefault();\n\n            case \"deleteContentBackward\":\n              var keydown = new $.Event(\"keydown\");\n              keydown.keyCode = Inputmask.keyCode.BACKSPACE;\n              EventHandlers.keydownEvent.call(input, keydown);\n              return e.preventDefault();\n\n            case \"deleteContentForward\":\n              var keydown = new $.Event(\"keydown\");\n              keydown.keyCode = Inputmask.keyCode.DELETE;\n              EventHandlers.keydownEvent.call(input, keydown);\n              return e.preventDefault();\n          }\n        }\n      },\n      setValueEvent: function (e) {\n        this.inputmask.refreshValue = false;\n\n        var input = this,\n            value = e && e.detail ? e.detail[0] : arguments[1],\n            value = value || input.inputmask._valueGet(true);\n\n        if ($.isFunction(opts.onBeforeMask)) value = opts.onBeforeMask.call(inputmask, value, opts) || value;\n        value = value.toString().split(\"\");\n        checkVal(input, true, false, value);\n        undoValue = getBuffer().join(\"\");\n\n        if ((opts.clearMaskOnLostFocus || opts.clearIncomplete) && input.inputmask._valueGet() === getBufferTemplate().join(\"\")) {\n          input.inputmask._valueSet(\"\");\n        }\n      },\n      focusEvent: function (e) {\n        var input = this,\n            nptValue = input.inputmask._valueGet();\n\n        if (opts.showMaskOnFocus) {\n          if (nptValue !== getBuffer().join(\"\")) {\n            writeBuffer(input, getBuffer(), seekNext(getLastValidPosition()));\n          } else if (mouseEnter === false) {\n            caret(input, seekNext(getLastValidPosition()));\n          }\n        }\n\n        if (opts.positionCaretOnTab === true && mouseEnter === false) {\n          EventHandlers.clickEvent.apply(input, [e, true]);\n        }\n\n        undoValue = getBuffer().join(\"\");\n      },\n      mouseleaveEvent: function (e) {\n        var input = this;\n        mouseEnter = false;\n\n        if (opts.clearMaskOnLostFocus && document.activeElement !== input) {\n          HandleNativePlaceholder(input, originalPlaceholder);\n        }\n      },\n      clickEvent: function (e, tabbed) {\n        function doRadixFocus(clickPos) {\n          if (opts.radixPoint !== \"\") {\n            var vps = getMaskSet().validPositions;\n\n            if (vps[clickPos] === undefined || vps[clickPos].input === getPlaceholder(clickPos)) {\n              if (clickPos < seekNext(-1)) return true;\n              var radixPos = $.inArray(opts.radixPoint, getBuffer());\n\n              if (radixPos !== -1) {\n                for (var vp in vps) {\n                  if (radixPos < vp && vps[vp].input !== getPlaceholder(vp)) {\n                    return false;\n                  }\n                }\n\n                return true;\n              }\n            }\n          }\n\n          return false;\n        }\n\n        var input = this;\n        setTimeout(function () {\n          if (document.activeElement === input) {\n            var selectedCaret = caret(input);\n\n            if (tabbed) {\n              if (isRTL) {\n                selectedCaret.end = selectedCaret.begin;\n              } else {\n                selectedCaret.begin = selectedCaret.end;\n              }\n            }\n\n            if (selectedCaret.begin === selectedCaret.end) {\n              switch (opts.positionCaretOnClick) {\n                case \"none\":\n                  break;\n\n                case \"select\":\n                  caret(input, 0, getBuffer().length);\n                  break;\n\n                case \"ignore\":\n                  caret(input, seekNext(getLastValidPosition()));\n                  break;\n\n                case \"radixFocus\":\n                  if (doRadixFocus(selectedCaret.begin)) {\n                    var radixPos = getBuffer().join(\"\").indexOf(opts.radixPoint);\n                    caret(input, opts.numericInput ? seekNext(radixPos) : radixPos);\n                    break;\n                  }\n\n                default:\n                  var clickPosition = selectedCaret.begin,\n                      lvclickPosition = getLastValidPosition(clickPosition, true),\n                      lastPosition = seekNext(lvclickPosition);\n\n                  if (clickPosition < lastPosition) {\n                    caret(input, !isMask(clickPosition, true) && !isMask(clickPosition - 1, true) ? seekNext(clickPosition) : clickPosition);\n                  } else {\n                    var lvp = getMaskSet().validPositions[lvclickPosition],\n                        tt = getTestTemplate(lastPosition, lvp ? lvp.match.locator : undefined, lvp),\n                        placeholder = getPlaceholder(lastPosition, tt.match);\n\n                    if (placeholder !== \"\" && getBuffer()[lastPosition] !== placeholder && tt.match.optionalQuantifier !== true && tt.match.newBlockMarker !== true || !isMask(lastPosition, opts.keepStatic) && tt.match.def === placeholder) {\n                      var newPos = seekNext(lastPosition);\n\n                      if (clickPosition >= newPos || clickPosition === lastPosition) {\n                        lastPosition = newPos;\n                      }\n                    }\n\n                    caret(input, lastPosition);\n                  }\n\n                  break;\n              }\n            }\n          }\n        }, 0);\n      },\n      cutEvent: function (e) {\n        var input = this,\n            $input = $(input),\n            pos = caret(input),\n            ev = e.originalEvent || e;\n        var clipboardData = window.clipboardData || ev.clipboardData,\n            clipData = isRTL ? getBuffer().slice(pos.end, pos.begin) : getBuffer().slice(pos.begin, pos.end);\n        clipboardData.setData(\"text\", isRTL ? clipData.reverse().join(\"\") : clipData.join(\"\"));\n        if (document.execCommand) document.execCommand(\"copy\");\n        handleRemove(input, Inputmask.keyCode.DELETE, pos);\n        writeBuffer(input, getBuffer(), getMaskSet().p, e, undoValue !== getBuffer().join(\"\"));\n      },\n      blurEvent: function (e) {\n        var $input = $(this),\n            input = this;\n\n        if (input.inputmask) {\n          HandleNativePlaceholder(input, originalPlaceholder);\n\n          var nptValue = input.inputmask._valueGet(),\n              buffer = getBuffer().slice();\n\n          if (nptValue !== \"\" || colorMask !== undefined) {\n            if (opts.clearMaskOnLostFocus) {\n              if (getLastValidPosition() === -1 && nptValue === getBufferTemplate().join(\"\")) {\n                buffer = [];\n              } else {\n                clearOptionalTail(buffer);\n              }\n            }\n\n            if (isComplete(buffer) === false) {\n              setTimeout(function () {\n                $input.trigger(\"incomplete\");\n              }, 0);\n\n              if (opts.clearIncomplete) {\n                resetMaskSet();\n\n                if (opts.clearMaskOnLostFocus) {\n                  buffer = [];\n                } else {\n                  buffer = getBufferTemplate().slice();\n                }\n              }\n            }\n\n            writeBuffer(input, buffer, undefined, e);\n          }\n\n          if (undoValue !== getBuffer().join(\"\")) {\n            undoValue = buffer.join(\"\");\n            $input.trigger(\"change\");\n          }\n        }\n      },\n      mouseenterEvent: function (e) {\n        var input = this;\n        mouseEnter = true;\n\n        if (document.activeElement !== input && opts.showMaskOnHover) {\n          HandleNativePlaceholder(input, (isRTL ? getBuffer().slice().reverse() : getBuffer()).join(\"\"));\n        }\n      },\n      submitEvent: function (e) {\n        if (undoValue !== getBuffer().join(\"\")) {\n          $el.trigger(\"change\");\n        }\n\n        if (opts.clearMaskOnLostFocus && getLastValidPosition() === -1 && el.inputmask._valueGet && el.inputmask._valueGet() === getBufferTemplate().join(\"\")) {\n          el.inputmask._valueSet(\"\");\n        }\n\n        if (opts.clearIncomplete && isComplete(getBuffer()) === false) {\n          el.inputmask._valueSet(\"\");\n        }\n\n        if (opts.removeMaskOnSubmit) {\n          el.inputmask._valueSet(el.inputmask.unmaskedvalue(), true);\n\n          setTimeout(function () {\n            writeBuffer(el, getBuffer());\n          }, 0);\n        }\n      },\n      resetEvent: function (e) {\n        el.inputmask.refreshValue = true;\n        setTimeout(function () {\n          $el.trigger(\"setvalue\");\n        }, 0);\n      }\n    };\n\n    function checkVal(input, writeOut, strict, nptvl, initiatingEvent) {\n      var inputmask = this || input.inputmask,\n          inputValue = nptvl.slice(),\n          charCodes = \"\",\n          initialNdx = -1,\n          result = undefined;\n\n      function isTemplateMatch(ndx, charCodes) {\n        var charCodeNdx = getMaskTemplate(true, 0, false).slice(ndx, seekNext(ndx)).join(\"\").replace(/'/g, \"\").indexOf(charCodes);\n        return charCodeNdx !== -1 && !isMask(ndx) && (getTest(ndx).match.nativeDef === charCodes.charAt(0) || getTest(ndx).match.fn === null && getTest(ndx).match.nativeDef === \"'\" + charCodes.charAt(0) || getTest(ndx).match.nativeDef === \" \" && (getTest(ndx + 1).match.nativeDef === charCodes.charAt(0) || getTest(ndx + 1).match.fn === null && getTest(ndx + 1).match.nativeDef === \"'\" + charCodes.charAt(0)));\n      }\n\n      resetMaskSet();\n\n      if (!strict && opts.autoUnmask !== true) {\n        var staticInput = getBufferTemplate().slice(0, seekNext(-1)).join(\"\"),\n            matches = inputValue.join(\"\").match(new RegExp(\"^\" + Inputmask.escapeRegex(staticInput), \"g\"));\n\n        if (matches && matches.length > 0) {\n          inputValue.splice(0, matches.length * staticInput.length);\n          initialNdx = seekNext(initialNdx);\n        }\n      } else {\n        initialNdx = seekNext(initialNdx);\n      }\n\n      if (initialNdx === -1) {\n        getMaskSet().p = seekNext(initialNdx);\n        initialNdx = 0;\n      } else getMaskSet().p = initialNdx;\n\n      inputmask.caretPos = {\n        begin: initialNdx\n      };\n      $.each(inputValue, function (ndx, charCode) {\n        if (charCode !== undefined) {\n          if (getMaskSet().validPositions[ndx] === undefined && inputValue[ndx] === getPlaceholder(ndx) && isMask(ndx, true) && isValid(ndx, inputValue[ndx], true, undefined, undefined, true) === false) {\n            getMaskSet().p++;\n          } else {\n            var keypress = new $.Event(\"_checkval\");\n            keypress.which = charCode.charCodeAt(0);\n            charCodes += charCode;\n            var lvp = getLastValidPosition(undefined, true);\n\n            if (!isTemplateMatch(initialNdx, charCodes)) {\n              result = EventHandlers.keypressEvent.call(input, keypress, true, false, strict, inputmask.caretPos.begin);\n\n              if (result) {\n                initialNdx = inputmask.caretPos.begin + 1;\n                charCodes = \"\";\n              }\n            } else {\n              result = EventHandlers.keypressEvent.call(input, keypress, true, false, strict, lvp + 1);\n            }\n\n            if (result) {\n              writeBuffer(undefined, getBuffer(), result.forwardPosition, keypress, false);\n              inputmask.caretPos = {\n                begin: result.forwardPosition,\n                end: result.forwardPosition\n              };\n            }\n          }\n        }\n      });\n      if (writeOut) writeBuffer(input, getBuffer(), result ? result.forwardPosition : undefined, initiatingEvent || new $.Event(\"checkval\"), initiatingEvent && initiatingEvent.type === \"input\");\n    }\n\n    function unmaskedvalue(input) {\n      if (input) {\n        if (input.inputmask === undefined) {\n          return input.value;\n        }\n\n        if (input.inputmask && input.inputmask.refreshValue) {\n          EventHandlers.setValueEvent.call(input);\n        }\n      }\n\n      var umValue = [],\n          vps = getMaskSet().validPositions;\n\n      for (var pndx in vps) {\n        if (vps[pndx].match && vps[pndx].match.fn != null) {\n          umValue.push(vps[pndx].input);\n        }\n      }\n\n      var unmaskedValue = umValue.length === 0 ? \"\" : (isRTL ? umValue.reverse() : umValue).join(\"\");\n\n      if ($.isFunction(opts.onUnMask)) {\n        var bufferValue = (isRTL ? getBuffer().slice().reverse() : getBuffer()).join(\"\");\n        unmaskedValue = opts.onUnMask.call(inputmask, bufferValue, unmaskedValue, opts);\n      }\n\n      return unmaskedValue;\n    }\n\n    function caret(input, begin, end, notranslate) {\n      function translatePosition(pos) {\n        if (isRTL && typeof pos === \"number\" && (!opts.greedy || opts.placeholder !== \"\") && el) {\n          pos = el.inputmask._valueGet().length - pos;\n        }\n\n        return pos;\n      }\n\n      var range;\n\n      if (begin !== undefined) {\n        if ($.isArray(begin)) {\n          end = isRTL ? begin[0] : begin[1];\n          begin = isRTL ? begin[1] : begin[0];\n        }\n\n        if (begin.begin !== undefined) {\n          end = isRTL ? begin.begin : begin.end;\n          begin = isRTL ? begin.end : begin.begin;\n        }\n\n        if (typeof begin === \"number\") {\n          begin = notranslate ? begin : translatePosition(begin);\n          end = notranslate ? end : translatePosition(end);\n          end = typeof end == \"number\" ? end : begin;\n          var scrollCalc = parseInt(((input.ownerDocument.defaultView || window).getComputedStyle ? (input.ownerDocument.defaultView || window).getComputedStyle(input, null) : input.currentStyle).fontSize) * end;\n          input.scrollLeft = scrollCalc > input.scrollWidth ? scrollCalc : 0;\n          input.inputmask.caretPos = {\n            begin: begin,\n            end: end\n          };\n\n          if (input === document.activeElement) {\n            if (\"selectionStart\" in input) {\n              input.selectionStart = begin;\n              input.selectionEnd = end;\n            } else if (window.getSelection) {\n              range = document.createRange();\n\n              if (input.firstChild === undefined || input.firstChild === null) {\n                var textNode = document.createTextNode(\"\");\n                input.appendChild(textNode);\n              }\n\n              range.setStart(input.firstChild, begin < input.inputmask._valueGet().length ? begin : input.inputmask._valueGet().length);\n              range.setEnd(input.firstChild, end < input.inputmask._valueGet().length ? end : input.inputmask._valueGet().length);\n              range.collapse(true);\n              var sel = window.getSelection();\n              sel.removeAllRanges();\n              sel.addRange(range);\n            } else if (input.createTextRange) {\n              range = input.createTextRange();\n              range.collapse(true);\n              range.moveEnd(\"character\", end);\n              range.moveStart(\"character\", begin);\n              range.select();\n            }\n\n            renderColorMask(input, {\n              begin: begin,\n              end: end\n            });\n          }\n        }\n      } else {\n        if (\"selectionStart\" in input) {\n          begin = input.selectionStart;\n          end = input.selectionEnd;\n        } else if (window.getSelection) {\n          range = window.getSelection().getRangeAt(0);\n\n          if (range.commonAncestorContainer.parentNode === input || range.commonAncestorContainer === input) {\n            begin = range.startOffset;\n            end = range.endOffset;\n          }\n        } else if (document.selection && document.selection.createRange) {\n          range = document.selection.createRange();\n          begin = 0 - range.duplicate().moveStart(\"character\", -input.inputmask._valueGet().length);\n          end = begin + range.text.length;\n        }\n\n        return {\n          begin: notranslate ? begin : translatePosition(begin),\n          end: notranslate ? end : translatePosition(end)\n        };\n      }\n    }\n\n    function determineLastRequiredPosition(returnDefinition) {\n      var buffer = getMaskTemplate(true, getLastValidPosition(), true, true),\n          bl = buffer.length,\n          pos,\n          lvp = getLastValidPosition(),\n          positions = {},\n          lvTest = getMaskSet().validPositions[lvp],\n          ndxIntlzr = lvTest !== undefined ? lvTest.locator.slice() : undefined,\n          testPos;\n\n      for (pos = lvp + 1; pos < buffer.length; pos++) {\n        testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);\n        ndxIntlzr = testPos.locator.slice();\n        positions[pos] = $.extend(true, {}, testPos);\n      }\n\n      var lvTestAlt = lvTest && lvTest.alternation !== undefined ? lvTest.locator[lvTest.alternation] : undefined;\n\n      for (pos = bl - 1; pos > lvp; pos--) {\n        testPos = positions[pos];\n\n        if ((testPos.match.optionality || testPos.match.optionalQuantifier && testPos.match.newBlockMarker || lvTestAlt && (lvTestAlt !== positions[pos].locator[lvTest.alternation] && testPos.match.fn != null || testPos.match.fn === null && testPos.locator[lvTest.alternation] && checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(\",\"), lvTestAlt.toString().split(\",\")) && getTests(pos)[0].def !== \"\")) && buffer[pos] === getPlaceholder(pos, testPos.match)) {\n          bl--;\n        } else break;\n      }\n\n      return returnDefinition ? {\n        l: bl,\n        def: positions[bl] ? positions[bl].match : undefined\n      } : bl;\n    }\n\n    function clearOptionalTail(buffer) {\n      buffer.length = 0;\n      var template = getMaskTemplate(true, 0, true, undefined, true),\n          lmnt,\n          validPos;\n\n      while (lmnt = template.shift(), lmnt !== undefined) buffer.push(lmnt);\n\n      return buffer;\n    }\n\n    function isComplete(buffer) {\n      if ($.isFunction(opts.isComplete)) return opts.isComplete(buffer, opts);\n      if (opts.repeat === \"*\") return undefined;\n      var complete = false,\n          lrp = determineLastRequiredPosition(true),\n          aml = seekPrevious(lrp.l);\n\n      if (lrp.def === undefined || lrp.def.newBlockMarker || lrp.def.optionality || lrp.def.optionalQuantifier) {\n        complete = true;\n\n        for (var i = 0; i <= aml; i++) {\n          var test = getTestTemplate(i).match;\n\n          if (test.fn !== null && getMaskSet().validPositions[i] === undefined && test.optionality !== true && test.optionalQuantifier !== true || test.fn === null && buffer[i] !== getPlaceholder(i, test)) {\n            complete = false;\n            break;\n          }\n        }\n      }\n\n      return complete;\n    }\n\n    function handleRemove(input, k, pos, strict, fromIsValid) {\n      if (opts.numericInput || isRTL) {\n        if (k === Inputmask.keyCode.BACKSPACE) {\n          k = Inputmask.keyCode.DELETE;\n        } else if (k === Inputmask.keyCode.DELETE) {\n          k = Inputmask.keyCode.BACKSPACE;\n        }\n\n        if (isRTL) {\n          var pend = pos.end;\n          pos.end = pos.begin;\n          pos.begin = pend;\n        }\n      }\n\n      if (k === Inputmask.keyCode.BACKSPACE && pos.end - pos.begin < 1) {\n        pos.begin = seekPrevious(pos.begin);\n\n        if (getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator) {\n          pos.begin--;\n        }\n      } else if (k === Inputmask.keyCode.DELETE && pos.begin === pos.end) {\n        pos.end = isMask(pos.end, true) && getMaskSet().validPositions[pos.end] && getMaskSet().validPositions[pos.end].input !== opts.radixPoint ? pos.end + 1 : seekNext(pos.end) + 1;\n\n        if (getMaskSet().validPositions[pos.begin] !== undefined && getMaskSet().validPositions[pos.begin].input === opts.groupSeparator) {\n          pos.end++;\n        }\n      }\n\n      revalidateMask(pos);\n\n      if (strict !== true && opts.keepStatic !== false || opts.regex !== null) {\n        var result = alternate(true);\n\n        if (result) {\n          var newPos = result.caret !== undefined ? result.caret : result.pos ? seekNext(result.pos.begin ? result.pos.begin : result.pos) : getLastValidPosition(-1, true);\n\n          if (k !== Inputmask.keyCode.DELETE || pos.begin > newPos) {\n            pos.begin == newPos;\n          }\n        }\n      }\n\n      var lvp = getLastValidPosition(pos.begin, true);\n\n      if (lvp < pos.begin || pos.begin === -1) {\n        getMaskSet().p = seekNext(lvp);\n      } else if (strict !== true) {\n        getMaskSet().p = pos.begin;\n\n        if (fromIsValid !== true) {\n          while (getMaskSet().p < lvp && getMaskSet().validPositions[getMaskSet().p] === undefined) {\n            getMaskSet().p++;\n          }\n        }\n      }\n    }\n\n    function initializeColorMask(input) {\n      var computedStyle = (input.ownerDocument.defaultView || window).getComputedStyle(input, null);\n\n      function findCaretPos(clientx) {\n        var e = document.createElement(\"span\"),\n            caretPos;\n\n        for (var style in computedStyle) {\n          if (isNaN(style) && style.indexOf(\"font\") !== -1) {\n            e.style[style] = computedStyle[style];\n          }\n        }\n\n        e.style.textTransform = computedStyle.textTransform;\n        e.style.letterSpacing = computedStyle.letterSpacing;\n        e.style.position = \"absolute\";\n        e.style.height = \"auto\";\n        e.style.width = \"auto\";\n        e.style.visibility = \"hidden\";\n        e.style.whiteSpace = \"nowrap\";\n        document.body.appendChild(e);\n\n        var inputText = input.inputmask._valueGet(),\n            previousWidth = 0,\n            itl;\n\n        for (caretPos = 0, itl = inputText.length; caretPos <= itl; caretPos++) {\n          e.innerHTML += inputText.charAt(caretPos) || \"_\";\n\n          if (e.offsetWidth >= clientx) {\n            var offset1 = clientx - previousWidth;\n            var offset2 = e.offsetWidth - clientx;\n            e.innerHTML = inputText.charAt(caretPos);\n            offset1 -= e.offsetWidth / 3;\n            caretPos = offset1 < offset2 ? caretPos - 1 : caretPos;\n            break;\n          }\n\n          previousWidth = e.offsetWidth;\n        }\n\n        document.body.removeChild(e);\n        return caretPos;\n      }\n\n      var template = document.createElement(\"div\");\n      template.style.width = computedStyle.width;\n      template.style.textAlign = computedStyle.textAlign;\n      colorMask = document.createElement(\"div\");\n      input.inputmask.colorMask = colorMask;\n      colorMask.className = \"im-colormask\";\n      input.parentNode.insertBefore(colorMask, input);\n      input.parentNode.removeChild(input);\n      colorMask.appendChild(input);\n      colorMask.appendChild(template);\n      input.style.left = template.offsetLeft + \"px\";\n      $(colorMask).on(\"mouseleave\", function (e) {\n        return EventHandlers.mouseleaveEvent.call(input, [e]);\n      });\n      $(colorMask).on(\"mouseenter\", function (e) {\n        return EventHandlers.mouseenterEvent.call(input, [e]);\n      });\n      $(colorMask).on(\"click\", function (e) {\n        caret(input, findCaretPos(e.clientX));\n        return EventHandlers.clickEvent.call(input, [e]);\n      });\n    }\n\n    function renderColorMask(input, caretPos, clear) {\n      var maskTemplate = [],\n          isStatic = false,\n          test,\n          testPos,\n          ndxIntlzr,\n          pos = 0;\n\n      function setEntry(entry) {\n        if (entry === undefined) entry = \"\";\n\n        if (!isStatic && (test.fn === null || testPos.input === undefined)) {\n          isStatic = true;\n          maskTemplate.push(\"<span class='im-static'>\" + entry);\n        } else if (isStatic && (test.fn !== null && testPos.input !== undefined || test.def === \"\")) {\n          isStatic = false;\n          var mtl = maskTemplate.length;\n          maskTemplate[mtl - 1] = maskTemplate[mtl - 1] + \"</span>\";\n          maskTemplate.push(entry);\n        } else maskTemplate.push(entry);\n      }\n\n      function setCaret() {\n        if (document.activeElement === input) {\n          maskTemplate.splice(caretPos.begin, 0, caretPos.begin === caretPos.end || caretPos.end > getMaskSet().maskLength ? '<mark class=\"im-caret\" style=\"border-right-width: 1px;border-right-style: solid;\">' : '<mark class=\"im-caret-select\">');\n          maskTemplate.splice(caretPos.end + 1, 0, \"</mark>\");\n        }\n      }\n\n      if (colorMask !== undefined) {\n        var buffer = getBuffer();\n\n        if (caretPos === undefined) {\n          caretPos = caret(input);\n        } else if (caretPos.begin === undefined) {\n          caretPos = {\n            begin: caretPos,\n            end: caretPos\n          };\n        }\n\n        if (clear !== true) {\n          var lvp = getLastValidPosition();\n\n          do {\n            if (getMaskSet().validPositions[pos]) {\n              testPos = getMaskSet().validPositions[pos];\n              test = testPos.match;\n              ndxIntlzr = testPos.locator.slice();\n              setEntry(buffer[pos]);\n            } else {\n              testPos = getTestTemplate(pos, ndxIntlzr, pos - 1);\n              test = testPos.match;\n              ndxIntlzr = testPos.locator.slice();\n\n              if (opts.jitMasking === false || pos < lvp || typeof opts.jitMasking === \"number\" && isFinite(opts.jitMasking) && opts.jitMasking > pos) {\n                setEntry(getPlaceholder(pos, test));\n              } else isStatic = false;\n            }\n\n            pos++;\n          } while ((maxLength === undefined || pos < maxLength) && (test.fn !== null || test.def !== \"\") || lvp > pos || isStatic);\n\n          if (isStatic) setEntry();\n          setCaret();\n        }\n\n        var template = colorMask.getElementsByTagName(\"div\")[0];\n        template.innerHTML = maskTemplate.join(\"\");\n        input.inputmask.positionColorMask(input, template);\n      }\n    }\n\n    function mask(elem) {\n      function isElementTypeSupported(input, opts) {\n        function patchValueProperty(npt) {\n          var valueGet;\n          var valueSet;\n\n          function patchValhook(type) {\n            if ($.valHooks && ($.valHooks[type] === undefined || $.valHooks[type].inputmaskpatch !== true)) {\n              var valhookGet = $.valHooks[type] && $.valHooks[type].get ? $.valHooks[type].get : function (elem) {\n                return elem.value;\n              };\n              var valhookSet = $.valHooks[type] && $.valHooks[type].set ? $.valHooks[type].set : function (elem, value) {\n                elem.value = value;\n                return elem;\n              };\n              $.valHooks[type] = {\n                get: function (elem) {\n                  if (elem.inputmask) {\n                    if (elem.inputmask.opts.autoUnmask) {\n                      return elem.inputmask.unmaskedvalue();\n                    } else {\n                      var result = valhookGet(elem);\n                      return getLastValidPosition(undefined, undefined, elem.inputmask.maskset.validPositions) !== -1 || opts.nullable !== true ? result : \"\";\n                    }\n                  } else return valhookGet(elem);\n                },\n                set: function (elem, value) {\n                  var $elem = $(elem),\n                      result;\n                  result = valhookSet(elem, value);\n\n                  if (elem.inputmask) {\n                    $elem.trigger(\"setvalue\", [value]);\n                  }\n\n                  return result;\n                },\n                inputmaskpatch: true\n              };\n            }\n          }\n\n          function getter() {\n            if (this.inputmask) {\n              return this.inputmask.opts.autoUnmask ? this.inputmask.unmaskedvalue() : getLastValidPosition() !== -1 || opts.nullable !== true ? document.activeElement === this && opts.clearMaskOnLostFocus ? (isRTL ? clearOptionalTail(getBuffer().slice()).reverse() : clearOptionalTail(getBuffer().slice())).join(\"\") : valueGet.call(this) : \"\";\n            } else return valueGet.call(this);\n          }\n\n          function setter(value) {\n            valueSet.call(this, value);\n\n            if (this.inputmask) {\n              $(this).trigger(\"setvalue\", [value]);\n            }\n          }\n\n          function installNativeValueSetFallback(npt) {\n            EventRuler.on(npt, \"mouseenter\", function (event) {\n              var $input = $(this),\n                  input = this,\n                  value = input.inputmask._valueGet();\n\n              if (value !== getBuffer().join(\"\")) {\n                $input.trigger(\"setvalue\");\n              }\n            });\n          }\n\n          if (!npt.inputmask.__valueGet) {\n            if (opts.noValuePatching !== true) {\n              if (Object.getOwnPropertyDescriptor) {\n                if (typeof Object.getPrototypeOf !== \"function\") {\n                  Object.getPrototypeOf = typeof \"test\".__proto__ === \"object\" ? function (object) {\n                    return object.__proto__;\n                  } : function (object) {\n                    return object.constructor.prototype;\n                  };\n                }\n\n                var valueProperty = Object.getPrototypeOf ? Object.getOwnPropertyDescriptor(Object.getPrototypeOf(npt), \"value\") : undefined;\n\n                if (valueProperty && valueProperty.get && valueProperty.set) {\n                  valueGet = valueProperty.get;\n                  valueSet = valueProperty.set;\n                  Object.defineProperty(npt, \"value\", {\n                    get: getter,\n                    set: setter,\n                    configurable: true\n                  });\n                } else if (npt.tagName !== \"INPUT\") {\n                  valueGet = function () {\n                    return this.textContent;\n                  };\n\n                  valueSet = function (value) {\n                    this.textContent = value;\n                  };\n\n                  Object.defineProperty(npt, \"value\", {\n                    get: getter,\n                    set: setter,\n                    configurable: true\n                  });\n                }\n              } else if (document.__lookupGetter__ && npt.__lookupGetter__(\"value\")) {\n                valueGet = npt.__lookupGetter__(\"value\");\n                valueSet = npt.__lookupSetter__(\"value\");\n\n                npt.__defineGetter__(\"value\", getter);\n\n                npt.__defineSetter__(\"value\", setter);\n              }\n\n              npt.inputmask.__valueGet = valueGet;\n              npt.inputmask.__valueSet = valueSet;\n            }\n\n            npt.inputmask._valueGet = function (overruleRTL) {\n              return isRTL && overruleRTL !== true ? valueGet.call(this.el).split(\"\").reverse().join(\"\") : valueGet.call(this.el);\n            };\n\n            npt.inputmask._valueSet = function (value, overruleRTL) {\n              valueSet.call(this.el, value === null || value === undefined ? \"\" : overruleRTL !== true && isRTL ? value.split(\"\").reverse().join(\"\") : value);\n            };\n\n            if (valueGet === undefined) {\n              valueGet = function () {\n                return this.value;\n              };\n\n              valueSet = function (value) {\n                this.value = value;\n              };\n\n              patchValhook(npt.type);\n              installNativeValueSetFallback(npt);\n            }\n          }\n        }\n\n        var elementType = input.getAttribute(\"type\");\n        var isSupported = input.tagName === \"INPUT\" && $.inArray(elementType, opts.supportsInputType) !== -1 || input.isContentEditable || input.tagName === \"TEXTAREA\";\n\n        if (!isSupported) {\n          if (input.tagName === \"INPUT\") {\n            var el = document.createElement(\"input\");\n            el.setAttribute(\"type\", elementType);\n            isSupported = el.type === \"text\";\n            el = null;\n          } else isSupported = \"partial\";\n        }\n\n        if (isSupported !== false) {\n          patchValueProperty(input);\n        } else input.inputmask = undefined;\n\n        return isSupported;\n      }\n\n      EventRuler.off(elem);\n      var isSupported = isElementTypeSupported(elem, opts);\n\n      if (isSupported !== false) {\n        el = elem;\n        $el = $(el);\n        originalPlaceholder = el.placeholder;\n        maxLength = el !== undefined ? el.maxLength : undefined;\n        if (maxLength === -1) maxLength = undefined;\n\n        if (opts.colorMask === true) {\n          initializeColorMask(el);\n        }\n\n        if (mobile) {\n          if (\"inputMode\" in el) {\n            el.inputmode = opts.inputmode;\n            el.setAttribute(\"inputmode\", opts.inputmode);\n          }\n\n          if (opts.disablePredictiveText === true) {\n            if (\"autocorrect\" in el) {\n              el.autocorrect = false;\n            } else {\n              if (opts.colorMask !== true) {\n                initializeColorMask(el);\n              }\n\n              el.type = \"password\";\n            }\n          }\n        }\n\n        if (isSupported === true) {\n          el.setAttribute(\"im-insert\", opts.insertMode);\n          EventRuler.on(el, \"submit\", EventHandlers.submitEvent);\n          EventRuler.on(el, \"reset\", EventHandlers.resetEvent);\n          EventRuler.on(el, \"blur\", EventHandlers.blurEvent);\n          EventRuler.on(el, \"focus\", EventHandlers.focusEvent);\n\n          if (opts.colorMask !== true) {\n            EventRuler.on(el, \"click\", EventHandlers.clickEvent);\n            EventRuler.on(el, \"mouseleave\", EventHandlers.mouseleaveEvent);\n            EventRuler.on(el, \"mouseenter\", EventHandlers.mouseenterEvent);\n          }\n\n          EventRuler.on(el, \"paste\", EventHandlers.pasteEvent);\n          EventRuler.on(el, \"cut\", EventHandlers.cutEvent);\n          EventRuler.on(el, \"complete\", opts.oncomplete);\n          EventRuler.on(el, \"incomplete\", opts.onincomplete);\n          EventRuler.on(el, \"cleared\", opts.oncleared);\n\n          if (!mobile && opts.inputEventOnly !== true) {\n            EventRuler.on(el, \"keydown\", EventHandlers.keydownEvent);\n            EventRuler.on(el, \"keypress\", EventHandlers.keypressEvent);\n          } else {\n            el.removeAttribute(\"maxLength\");\n          }\n\n          EventRuler.on(el, \"input\", EventHandlers.inputFallBackEvent);\n          EventRuler.on(el, \"beforeinput\", EventHandlers.beforeInputEvent);\n        }\n\n        EventRuler.on(el, \"setvalue\", EventHandlers.setValueEvent);\n        undoValue = getBufferTemplate().join(\"\");\n\n        if (el.inputmask._valueGet(true) !== \"\" || opts.clearMaskOnLostFocus === false || document.activeElement === el) {\n          var initialValue = $.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, el.inputmask._valueGet(true), opts) || el.inputmask._valueGet(true) : el.inputmask._valueGet(true);\n          if (initialValue !== \"\") checkVal(el, true, false, initialValue.split(\"\"));\n          var buffer = getBuffer().slice();\n          undoValue = buffer.join(\"\");\n\n          if (isComplete(buffer) === false) {\n            if (opts.clearIncomplete) {\n              resetMaskSet();\n            }\n          }\n\n          if (opts.clearMaskOnLostFocus && document.activeElement !== el) {\n            if (getLastValidPosition() === -1) {\n              buffer = [];\n            } else {\n              clearOptionalTail(buffer);\n            }\n          }\n\n          if (opts.clearMaskOnLostFocus === false || opts.showMaskOnFocus && document.activeElement === el || el.inputmask._valueGet(true) !== \"\") writeBuffer(el, buffer);\n\n          if (document.activeElement === el) {\n            caret(el, seekNext(getLastValidPosition()));\n          }\n        }\n      }\n    }\n\n    var valueBuffer;\n\n    if (actionObj !== undefined) {\n      switch (actionObj.action) {\n        case \"isComplete\":\n          el = actionObj.el;\n          return isComplete(getBuffer());\n\n        case \"unmaskedvalue\":\n          if (el === undefined || actionObj.value !== undefined) {\n            valueBuffer = actionObj.value;\n            valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, valueBuffer, opts) || valueBuffer : valueBuffer).split(\"\");\n            checkVal.call(this, undefined, false, false, valueBuffer);\n            if ($.isFunction(opts.onBeforeWrite)) opts.onBeforeWrite.call(inputmask, undefined, getBuffer(), 0, opts);\n          }\n\n          return unmaskedvalue(el);\n\n        case \"mask\":\n          mask(el);\n          break;\n\n        case \"format\":\n          valueBuffer = ($.isFunction(opts.onBeforeMask) ? opts.onBeforeMask.call(inputmask, actionObj.value, opts) || actionObj.value : actionObj.value).split(\"\");\n          checkVal.call(this, undefined, true, false, valueBuffer);\n\n          if (actionObj.metadata) {\n            return {\n              value: isRTL ? getBuffer().slice().reverse().join(\"\") : getBuffer().join(\"\"),\n              metadata: maskScope.call(this, {\n                action: \"getmetadata\"\n              }, maskset, opts)\n            };\n          }\n\n          return isRTL ? getBuffer().slice().reverse().join(\"\") : getBuffer().join(\"\");\n\n        case \"isValid\":\n          if (actionObj.value) {\n            valueBuffer = actionObj.value.split(\"\");\n            checkVal.call(this, undefined, true, true, valueBuffer);\n          } else {\n            actionObj.value = getBuffer().join(\"\");\n          }\n\n          var buffer = getBuffer();\n          var rl = determineLastRequiredPosition(),\n              lmib = buffer.length - 1;\n\n          for (; lmib > rl; lmib--) {\n            if (isMask(lmib)) break;\n          }\n\n          buffer.splice(rl, lmib + 1 - rl);\n          return isComplete(buffer) && actionObj.value === getBuffer().join(\"\");\n\n        case \"getemptymask\":\n          return getBufferTemplate().join(\"\");\n\n        case \"remove\":\n          if (el && el.inputmask) {\n            $.data(el, \"_inputmask_opts\", null);\n            $el = $(el);\n\n            el.inputmask._valueSet(opts.autoUnmask ? unmaskedvalue(el) : el.inputmask._valueGet(true));\n\n            EventRuler.off(el);\n\n            if (el.inputmask.colorMask) {\n              colorMask = el.inputmask.colorMask;\n              colorMask.removeChild(el);\n              colorMask.parentNode.insertBefore(el, colorMask);\n              colorMask.parentNode.removeChild(colorMask);\n            }\n\n            var valueProperty;\n\n            if (Object.getOwnPropertyDescriptor && Object.getPrototypeOf) {\n              valueProperty = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(el), \"value\");\n\n              if (valueProperty) {\n                if (el.inputmask.__valueGet) {\n                  Object.defineProperty(el, \"value\", {\n                    get: el.inputmask.__valueGet,\n                    set: el.inputmask.__valueSet,\n                    configurable: true\n                  });\n                }\n              }\n            } else if (document.__lookupGetter__ && el.__lookupGetter__(\"value\")) {\n              if (el.inputmask.__valueGet) {\n                el.__defineGetter__(\"value\", el.inputmask.__valueGet);\n\n                el.__defineSetter__(\"value\", el.inputmask.__valueSet);\n              }\n            }\n\n            el.inputmask = undefined;\n          }\n\n          return el;\n          break;\n\n        case \"getmetadata\":\n          if ($.isArray(maskset.metadata)) {\n            var maskTarget = getMaskTemplate(true, 0, false).join(\"\");\n            $.each(maskset.metadata, function (ndx, mtdt) {\n              if (mtdt.mask === maskTarget) {\n                maskTarget = mtdt;\n                return false;\n              }\n            });\n            return maskTarget;\n          }\n\n          return maskset.metadata;\n      }\n    }\n  }\n\n  return Inputmask;\n});","map":null,"metadata":{},"sourceType":"script"}