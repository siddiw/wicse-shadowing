{"ast":null,"code":"/*!\n* dependencyLibs/inputmask.dependencyLib.js\n* https://github.com/RobinHerbots/Inputmask\n* Copyright (c) 2010 - 2019 Robin Herbots\n* Licensed under the MIT license (http://www.opensource.org/licenses/mit-license.php)\n* Version: 4.0.9\n*/\n(function (factory) {\n  if (typeof define === \"function\" && define.amd) {\n    define([\"../global/window\"], factory);\n  } else if (typeof exports === \"object\") {\n    module.exports = factory(require(\"../global/window\"));\n  } else {\n    window.dependencyLib = factory(window);\n  }\n})(function (window) {\n  var document = window.document;\n\n  function indexOf(list, elem) {\n    var i = 0,\n        len = list.length;\n\n    for (; i < len; i++) {\n      if (list[i] === elem) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  function isWindow(obj) {\n    return obj != null && obj === obj.window;\n  }\n\n  function isArraylike(obj) {\n    var length = \"length\" in obj && obj.length,\n        ltype = typeof obj;\n\n    if (ltype === \"function\" || isWindow(obj)) {\n      return false;\n    }\n\n    if (obj.nodeType === 1 && length) {\n      return true;\n    }\n\n    return ltype === \"array\" || length === 0 || typeof length === \"number\" && length > 0 && length - 1 in obj;\n  }\n\n  function isValidElement(elem) {\n    return elem instanceof Element;\n  }\n\n  function DependencyLib(elem) {\n    if (elem instanceof DependencyLib) {\n      return elem;\n    }\n\n    if (!(this instanceof DependencyLib)) {\n      return new DependencyLib(elem);\n    }\n\n    if (elem !== undefined && elem !== null && elem !== window) {\n      this[0] = elem.nodeName ? elem : elem[0] !== undefined && elem[0].nodeName ? elem[0] : document.querySelector(elem);\n\n      if (this[0] !== undefined && this[0] !== null) {\n        this[0].eventRegistry = this[0].eventRegistry || {};\n      }\n    }\n  }\n\n  function getWindow(elem) {\n    return isWindow(elem) ? elem : elem.nodeType === 9 ? elem.defaultView || elem.parentWindow : false;\n  }\n\n  DependencyLib.prototype = {\n    on: function (events, handler) {\n      if (isValidElement(this[0])) {\n        var eventRegistry = this[0].eventRegistry,\n            elem = this[0];\n\n        var addEvent = function (ev, namespace) {\n          if (elem.addEventListener) {\n            elem.addEventListener(ev, handler, false);\n          } else if (elem.attachEvent) {\n            elem.attachEvent(\"on\" + ev, handler);\n          }\n\n          eventRegistry[ev] = eventRegistry[ev] || {};\n          eventRegistry[ev][namespace] = eventRegistry[ev][namespace] || [];\n          eventRegistry[ev][namespace].push(handler);\n        };\n\n        var _events = events.split(\" \");\n\n        for (var endx = 0; endx < _events.length; endx++) {\n          var nsEvent = _events[endx].split(\".\"),\n              ev = nsEvent[0],\n              namespace = nsEvent[1] || \"global\";\n\n          addEvent(ev, namespace);\n        }\n      }\n\n      return this;\n    },\n    off: function (events, handler) {\n      if (isValidElement(this[0])) {\n        var eventRegistry = this[0].eventRegistry,\n            elem = this[0];\n\n        var removeEvent = function (ev, namespace, handler) {\n          if (ev in eventRegistry === true) {\n            if (elem.removeEventListener) {\n              elem.removeEventListener(ev, handler, false);\n            } else if (elem.detachEvent) {\n              elem.detachEvent(\"on\" + ev, handler);\n            }\n\n            if (namespace === \"global\") {\n              for (var nmsp in eventRegistry[ev]) {\n                eventRegistry[ev][nmsp].splice(eventRegistry[ev][nmsp].indexOf(handler), 1);\n              }\n            } else {\n              eventRegistry[ev][namespace].splice(eventRegistry[ev][namespace].indexOf(handler), 1);\n            }\n          }\n        };\n\n        var resolveNamespace = function (ev, namespace) {\n          var evts = [],\n              hndx,\n              hndL;\n\n          if (ev.length > 0) {\n            if (handler === undefined) {\n              for (hndx = 0, hndL = eventRegistry[ev][namespace].length; hndx < hndL; hndx++) {\n                evts.push({\n                  ev: ev,\n                  namespace: namespace && namespace.length > 0 ? namespace : \"global\",\n                  handler: eventRegistry[ev][namespace][hndx]\n                });\n              }\n            } else {\n              evts.push({\n                ev: ev,\n                namespace: namespace && namespace.length > 0 ? namespace : \"global\",\n                handler: handler\n              });\n            }\n          } else if (namespace.length > 0) {\n            for (var evNdx in eventRegistry) {\n              for (var nmsp in eventRegistry[evNdx]) {\n                if (nmsp === namespace) {\n                  if (handler === undefined) {\n                    for (hndx = 0, hndL = eventRegistry[evNdx][nmsp].length; hndx < hndL; hndx++) {\n                      evts.push({\n                        ev: evNdx,\n                        namespace: nmsp,\n                        handler: eventRegistry[evNdx][nmsp][hndx]\n                      });\n                    }\n                  } else {\n                    evts.push({\n                      ev: evNdx,\n                      namespace: nmsp,\n                      handler: handler\n                    });\n                  }\n                }\n              }\n            }\n          }\n\n          return evts;\n        };\n\n        var _events = events.split(\" \");\n\n        for (var endx = 0; endx < _events.length; endx++) {\n          var nsEvent = _events[endx].split(\".\"),\n              offEvents = resolveNamespace(nsEvent[0], nsEvent[1]);\n\n          for (var i = 0, offEventsL = offEvents.length; i < offEventsL; i++) {\n            removeEvent(offEvents[i].ev, offEvents[i].namespace, offEvents[i].handler);\n          }\n        }\n      }\n\n      return this;\n    },\n    trigger: function (events) {\n      if (isValidElement(this[0])) {\n        var eventRegistry = this[0].eventRegistry,\n            elem = this[0];\n\n        var _events = typeof events === \"string\" ? events.split(\" \") : [events.type];\n\n        for (var endx = 0; endx < _events.length; endx++) {\n          var nsEvent = _events[endx].split(\".\"),\n              ev = nsEvent[0],\n              namespace = nsEvent[1] || \"global\";\n\n          if (document !== undefined && namespace === \"global\") {\n            var evnt,\n                i,\n                params = {\n              bubbles: true,\n              cancelable: true,\n              detail: arguments[1]\n            };\n\n            if (document.createEvent) {\n              try {\n                evnt = new CustomEvent(ev, params);\n              } catch (e) {\n                evnt = document.createEvent(\"CustomEvent\");\n                evnt.initCustomEvent(ev, params.bubbles, params.cancelable, params.detail);\n              }\n\n              if (events.type) DependencyLib.extend(evnt, events);\n              elem.dispatchEvent(evnt);\n            } else {\n              evnt = document.createEventObject();\n              evnt.eventType = ev;\n              evnt.detail = arguments[1];\n              if (events.type) DependencyLib.extend(evnt, events);\n              elem.fireEvent(\"on\" + evnt.eventType, evnt);\n            }\n          } else if (eventRegistry[ev] !== undefined) {\n            arguments[0] = arguments[0].type ? arguments[0] : DependencyLib.Event(arguments[0]);\n\n            if (namespace === \"global\") {\n              for (var nmsp in eventRegistry[ev]) {\n                for (i = 0; i < eventRegistry[ev][nmsp].length; i++) {\n                  eventRegistry[ev][nmsp][i].apply(elem, arguments);\n                }\n              }\n            } else {\n              for (i = 0; i < eventRegistry[ev][namespace].length; i++) {\n                eventRegistry[ev][namespace][i].apply(elem, arguments);\n              }\n            }\n          }\n        }\n      }\n\n      return this;\n    }\n  };\n\n  DependencyLib.isFunction = function (obj) {\n    return typeof obj === \"function\";\n  };\n\n  DependencyLib.noop = function () {};\n\n  DependencyLib.isArray = Array.isArray;\n\n  DependencyLib.inArray = function (elem, arr, i) {\n    return arr == null ? -1 : indexOf(arr, elem, i);\n  };\n\n  DependencyLib.valHooks = undefined;\n\n  DependencyLib.isPlainObject = function (obj) {\n    if (typeof obj !== \"object\" || obj.nodeType || isWindow(obj)) {\n      return false;\n    }\n\n    if (obj.constructor && !Object.hasOwnProperty.call(obj.constructor.prototype, \"isPrototypeOf\")) {\n      return false;\n    }\n\n    return true;\n  };\n\n  DependencyLib.extend = function () {\n    var options,\n        name,\n        src,\n        copy,\n        copyIsArray,\n        clone,\n        target = arguments[0] || {},\n        i = 1,\n        length = arguments.length,\n        deep = false;\n\n    if (typeof target === \"boolean\") {\n      deep = target;\n      target = arguments[i] || {};\n      i++;\n    }\n\n    if (typeof target !== \"object\" && !DependencyLib.isFunction(target)) {\n      target = {};\n    }\n\n    if (i === length) {\n      target = this;\n      i--;\n    }\n\n    for (; i < length; i++) {\n      if ((options = arguments[i]) != null) {\n        for (name in options) {\n          src = target[name];\n          copy = options[name];\n\n          if (target === copy) {\n            continue;\n          }\n\n          if (deep && copy && (DependencyLib.isPlainObject(copy) || (copyIsArray = DependencyLib.isArray(copy)))) {\n            if (copyIsArray) {\n              copyIsArray = false;\n              clone = src && DependencyLib.isArray(src) ? src : [];\n            } else {\n              clone = src && DependencyLib.isPlainObject(src) ? src : {};\n            }\n\n            target[name] = DependencyLib.extend(deep, clone, copy);\n          } else if (copy !== undefined) {\n            target[name] = copy;\n          }\n        }\n      }\n    }\n\n    return target;\n  };\n\n  DependencyLib.each = function (obj, callback) {\n    var value,\n        i = 0;\n\n    if (isArraylike(obj)) {\n      for (var length = obj.length; i < length; i++) {\n        value = callback.call(obj[i], i, obj[i]);\n\n        if (value === false) {\n          break;\n        }\n      }\n    } else {\n      for (i in obj) {\n        value = callback.call(obj[i], i, obj[i]);\n\n        if (value === false) {\n          break;\n        }\n      }\n    }\n\n    return obj;\n  };\n\n  DependencyLib.data = function (owner, key, value) {\n    if (value === undefined) {\n      return owner.__data ? owner.__data[key] : null;\n    } else {\n      owner.__data = owner.__data || {};\n      owner.__data[key] = value;\n    }\n  };\n\n  if (typeof window.CustomEvent === \"function\") {\n    DependencyLib.Event = window.CustomEvent;\n  } else {\n    DependencyLib.Event = function (event, params) {\n      params = params || {\n        bubbles: false,\n        cancelable: false,\n        detail: undefined\n      };\n      var evt = document.createEvent(\"CustomEvent\");\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    };\n\n    DependencyLib.Event.prototype = window.Event.prototype;\n  }\n\n  return DependencyLib;\n});","map":null,"metadata":{},"sourceType":"script"}