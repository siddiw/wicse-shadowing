{"ast":null,"code":"/*!\n * Timepicker Component for Twitter Bootstrap\n *\n * Copyright 2013 Joris de Wit and bootstrap-timepicker contributors\n *\n * Contributors https://github.com/jdewit/bootstrap-timepicker/graphs/contributors\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n(function ($, window, document) {\n  'use strict'; // TIMEPICKER PUBLIC CLASS DEFINITION\n\n  var Timepicker = function (element, options) {\n    this.widget = '';\n    this.$element = $(element);\n    this.defaultTime = options.defaultTime;\n    this.disableFocus = options.disableFocus;\n    this.disableMousewheel = options.disableMousewheel;\n    this.isOpen = options.isOpen;\n    this.minuteStep = options.minuteStep;\n    this.modalBackdrop = options.modalBackdrop;\n    this.orientation = options.orientation;\n    this.secondStep = options.secondStep;\n    this.snapToStep = options.snapToStep;\n    this.showInputs = options.showInputs;\n    this.showMeridian = options.showMeridian;\n    this.showSeconds = options.showSeconds;\n    this.template = options.template;\n    this.appendWidgetTo = options.appendWidgetTo;\n    this.showWidgetOnAddonClick = options.showWidgetOnAddonClick;\n    this.icons = options.icons;\n    this.maxHours = options.maxHours;\n    this.explicitMode = options.explicitMode; // If true 123 = 1:23, 12345 = 1:23:45, else invalid.\n\n    this.handleDocumentClick = function (e) {\n      var self = e.data.scope; // This condition was inspired by bootstrap-datepicker.\n      // The element the timepicker is invoked on is the input but it has a sibling for addon/button.\n\n      if (!(self.$element.parent().find(e.target).length || self.$widget.is(e.target) || self.$widget.find(e.target).length)) {\n        self.hideWidget();\n      }\n    };\n\n    this._init();\n  };\n\n  Timepicker.prototype = {\n    constructor: Timepicker,\n    _init: function () {\n      var self = this;\n\n      if (this.showWidgetOnAddonClick && this.$element.parent().hasClass('input-group') && this.$element.parent().hasClass('bootstrap-timepicker')) {\n        this.$element.parent('.input-group.bootstrap-timepicker').find('.input-group-addon').on({\n          'click.timepicker': $.proxy(this.showWidget, this)\n        });\n        this.$element.on({\n          'focus.timepicker': $.proxy(this.highlightUnit, this),\n          'click.timepicker': $.proxy(this.highlightUnit, this),\n          'keydown.timepicker': $.proxy(this.elementKeydown, this),\n          'blur.timepicker': $.proxy(this.blurElement, this),\n          'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this)\n        });\n      } else {\n        if (this.template) {\n          this.$element.on({\n            'focus.timepicker': $.proxy(this.showWidget, this),\n            'click.timepicker': $.proxy(this.showWidget, this),\n            'blur.timepicker': $.proxy(this.blurElement, this),\n            'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this)\n          });\n        } else {\n          this.$element.on({\n            'focus.timepicker': $.proxy(this.highlightUnit, this),\n            'click.timepicker': $.proxy(this.highlightUnit, this),\n            'keydown.timepicker': $.proxy(this.elementKeydown, this),\n            'blur.timepicker': $.proxy(this.blurElement, this),\n            'mousewheel.timepicker DOMMouseScroll.timepicker': $.proxy(this.mousewheel, this)\n          });\n        }\n      }\n\n      if (this.template !== false) {\n        this.$widget = $(this.getTemplate()).on('click', $.proxy(this.widgetClick, this));\n      } else {\n        this.$widget = false;\n      }\n\n      if (this.showInputs && this.$widget !== false) {\n        this.$widget.find('input').each(function () {\n          $(this).on({\n            'click.timepicker': function () {\n              $(this).select();\n            },\n            'keydown.timepicker': $.proxy(self.widgetKeydown, self),\n            'keyup.timepicker': $.proxy(self.widgetKeyup, self)\n          });\n        });\n      }\n\n      this.setDefaultTime(this.defaultTime);\n    },\n    blurElement: function () {\n      this.highlightedUnit = null;\n      this.updateFromElementVal();\n    },\n    clear: function () {\n      this.hour = '';\n      this.minute = '';\n      this.second = '';\n      this.meridian = '';\n      this.$element.val('');\n    },\n    decrementHour: function () {\n      if (this.showMeridian) {\n        if (this.hour === 1) {\n          this.hour = 12;\n        } else if (this.hour === 12) {\n          this.hour--;\n          return this.toggleMeridian();\n        } else if (this.hour === 0) {\n          this.hour = 11;\n          return this.toggleMeridian();\n        } else {\n          this.hour--;\n        }\n      } else {\n        if (this.hour <= 0) {\n          this.hour = this.maxHours - 1;\n        } else {\n          this.hour--;\n        }\n      }\n    },\n    decrementMinute: function (step) {\n      var newVal;\n\n      if (step) {\n        newVal = this.minute - step;\n      } else {\n        newVal = this.minute - this.minuteStep;\n      }\n\n      if (newVal < 0) {\n        this.decrementHour();\n        this.minute = newVal + 60;\n      } else {\n        this.minute = newVal;\n      }\n    },\n    decrementSecond: function () {\n      var newVal = this.second - this.secondStep;\n\n      if (newVal < 0) {\n        this.decrementMinute(true);\n        this.second = newVal + 60;\n      } else {\n        this.second = newVal;\n      }\n    },\n    elementKeydown: function (e) {\n      switch (e.which) {\n        case 9:\n          //tab\n          if (e.shiftKey) {\n            if (this.highlightedUnit === 'hour') {\n              this.hideWidget();\n              break;\n            }\n\n            this.highlightPrevUnit();\n          } else if (this.showMeridian && this.highlightedUnit === 'meridian' || this.showSeconds && this.highlightedUnit === 'second' || !this.showMeridian && !this.showSeconds && this.highlightedUnit === 'minute') {\n            this.hideWidget();\n            break;\n          } else {\n            this.highlightNextUnit();\n          }\n\n          e.preventDefault();\n          this.updateFromElementVal();\n          break;\n\n        case 27:\n          // escape\n          this.updateFromElementVal();\n          break;\n\n        case 37:\n          // left arrow\n          e.preventDefault();\n          this.highlightPrevUnit();\n          this.updateFromElementVal();\n          break;\n\n        case 38:\n          // up arrow\n          e.preventDefault();\n\n          switch (this.highlightedUnit) {\n            case 'hour':\n              this.incrementHour();\n              this.highlightHour();\n              break;\n\n            case 'minute':\n              this.incrementMinute();\n              this.highlightMinute();\n              break;\n\n            case 'second':\n              this.incrementSecond();\n              this.highlightSecond();\n              break;\n\n            case 'meridian':\n              this.toggleMeridian();\n              this.highlightMeridian();\n              break;\n          }\n\n          this.update();\n          break;\n\n        case 39:\n          // right arrow\n          e.preventDefault();\n          this.highlightNextUnit();\n          this.updateFromElementVal();\n          break;\n\n        case 40:\n          // down arrow\n          e.preventDefault();\n\n          switch (this.highlightedUnit) {\n            case 'hour':\n              this.decrementHour();\n              this.highlightHour();\n              break;\n\n            case 'minute':\n              this.decrementMinute();\n              this.highlightMinute();\n              break;\n\n            case 'second':\n              this.decrementSecond();\n              this.highlightSecond();\n              break;\n\n            case 'meridian':\n              this.toggleMeridian();\n              this.highlightMeridian();\n              break;\n          }\n\n          this.update();\n          break;\n      }\n    },\n    getCursorPosition: function () {\n      var input = this.$element.get(0);\n\n      if ('selectionStart' in input) {\n        // Standard-compliant browsers\n        return input.selectionStart;\n      } else if (document.selection) {\n        // IE fix\n        input.focus();\n        var sel = document.selection.createRange(),\n            selLen = document.selection.createRange().text.length;\n        sel.moveStart('character', -input.value.length);\n        return sel.text.length - selLen;\n      }\n    },\n    getTemplate: function () {\n      var template, hourTemplate, minuteTemplate, secondTemplate, meridianTemplate, templateContent;\n\n      if (this.showInputs) {\n        hourTemplate = '<input type=\"text\" class=\"bootstrap-timepicker-hour\" maxlength=\"2\"/>';\n        minuteTemplate = '<input type=\"text\" class=\"bootstrap-timepicker-minute\" maxlength=\"2\"/>';\n        secondTemplate = '<input type=\"text\" class=\"bootstrap-timepicker-second\" maxlength=\"2\"/>';\n        meridianTemplate = '<input type=\"text\" class=\"bootstrap-timepicker-meridian\" maxlength=\"2\"/>';\n      } else {\n        hourTemplate = '<span class=\"bootstrap-timepicker-hour\"></span>';\n        minuteTemplate = '<span class=\"bootstrap-timepicker-minute\"></span>';\n        secondTemplate = '<span class=\"bootstrap-timepicker-second\"></span>';\n        meridianTemplate = '<span class=\"bootstrap-timepicker-meridian\"></span>';\n      }\n\n      templateContent = '<table>' + '<tr>' + '<td><a href=\"#\" data-action=\"incrementHour\"><span class=\"' + this.icons.up + '\"></span></a></td>' + '<td class=\"separator\">&nbsp;</td>' + '<td><a href=\"#\" data-action=\"incrementMinute\"><span class=\"' + this.icons.up + '\"></span></a></td>' + (this.showSeconds ? '<td class=\"separator\">&nbsp;</td>' + '<td><a href=\"#\" data-action=\"incrementSecond\"><span class=\"' + this.icons.up + '\"></span></a></td>' : '') + (this.showMeridian ? '<td class=\"separator\">&nbsp;</td>' + '<td class=\"meridian-column\"><a href=\"#\" data-action=\"toggleMeridian\"><span class=\"' + this.icons.up + '\"></span></a></td>' : '') + '</tr>' + '<tr>' + '<td>' + hourTemplate + '</td> ' + '<td class=\"separator\">:</td>' + '<td>' + minuteTemplate + '</td> ' + (this.showSeconds ? '<td class=\"separator\">:</td>' + '<td>' + secondTemplate + '</td>' : '') + (this.showMeridian ? '<td class=\"separator\">&nbsp;</td>' + '<td>' + meridianTemplate + '</td>' : '') + '</tr>' + '<tr>' + '<td><a href=\"#\" data-action=\"decrementHour\"><span class=\"' + this.icons.down + '\"></span></a></td>' + '<td class=\"separator\"></td>' + '<td><a href=\"#\" data-action=\"decrementMinute\"><span class=\"' + this.icons.down + '\"></span></a></td>' + (this.showSeconds ? '<td class=\"separator\">&nbsp;</td>' + '<td><a href=\"#\" data-action=\"decrementSecond\"><span class=\"' + this.icons.down + '\"></span></a></td>' : '') + (this.showMeridian ? '<td class=\"separator\">&nbsp;</td>' + '<td><a href=\"#\" data-action=\"toggleMeridian\"><span class=\"' + this.icons.down + '\"></span></a></td>' : '') + '</tr>' + '</table>';\n\n      switch (this.template) {\n        case 'modal':\n          template = '<div class=\"bootstrap-timepicker-widget modal hide fade in\" data-backdrop=\"' + (this.modalBackdrop ? 'true' : 'false') + '\">' + '<div class=\"modal-header\">' + '<a href=\"#\" class=\"close\" data-dismiss=\"modal\">&times;</a>' + '<h3>Pick a Time</h3>' + '</div>' + '<div class=\"modal-content\">' + templateContent + '</div>' + '<div class=\"modal-footer\">' + '<a href=\"#\" class=\"btn btn-primary\" data-dismiss=\"modal\">OK</a>' + '</div>' + '</div>';\n          break;\n\n        case 'dropdown':\n          template = '<div class=\"bootstrap-timepicker-widget dropdown-menu\">' + templateContent + '</div>';\n          break;\n      }\n\n      return template;\n    },\n    getTime: function () {\n      if (this.hour === '') {\n        return '';\n      }\n\n      return this.hour + ':' + (this.minute.toString().length === 1 ? '0' + this.minute : this.minute) + (this.showSeconds ? ':' + (this.second.toString().length === 1 ? '0' + this.second : this.second) : '') + (this.showMeridian ? ' ' + this.meridian : '');\n    },\n    hideWidget: function () {\n      if (this.isOpen === false) {\n        return;\n      }\n\n      this.$element.trigger({\n        'type': 'hide.timepicker',\n        'time': {\n          'value': this.getTime(),\n          'hours': this.hour,\n          'minutes': this.minute,\n          'seconds': this.second,\n          'meridian': this.meridian\n        }\n      });\n\n      if (this.template === 'modal' && this.$widget.modal) {\n        this.$widget.modal('hide');\n      } else {\n        this.$widget.removeClass('open');\n      }\n\n      $(document).off('mousedown.timepicker, touchend.timepicker', this.handleDocumentClick);\n      this.isOpen = false; // show/hide approach taken by datepicker\n\n      this.$widget.detach();\n    },\n    highlightUnit: function () {\n      this.position = this.getCursorPosition();\n\n      if (this.position >= 0 && this.position <= 2) {\n        this.highlightHour();\n      } else if (this.position >= 3 && this.position <= 5) {\n        this.highlightMinute();\n      } else if (this.position >= 6 && this.position <= 8) {\n        if (this.showSeconds) {\n          this.highlightSecond();\n        } else {\n          this.highlightMeridian();\n        }\n      } else if (this.position >= 9 && this.position <= 11) {\n        this.highlightMeridian();\n      }\n    },\n    highlightNextUnit: function () {\n      switch (this.highlightedUnit) {\n        case 'hour':\n          this.highlightMinute();\n          break;\n\n        case 'minute':\n          if (this.showSeconds) {\n            this.highlightSecond();\n          } else if (this.showMeridian) {\n            this.highlightMeridian();\n          } else {\n            this.highlightHour();\n          }\n\n          break;\n\n        case 'second':\n          if (this.showMeridian) {\n            this.highlightMeridian();\n          } else {\n            this.highlightHour();\n          }\n\n          break;\n\n        case 'meridian':\n          this.highlightHour();\n          break;\n      }\n    },\n    highlightPrevUnit: function () {\n      switch (this.highlightedUnit) {\n        case 'hour':\n          if (this.showMeridian) {\n            this.highlightMeridian();\n          } else if (this.showSeconds) {\n            this.highlightSecond();\n          } else {\n            this.highlightMinute();\n          }\n\n          break;\n\n        case 'minute':\n          this.highlightHour();\n          break;\n\n        case 'second':\n          this.highlightMinute();\n          break;\n\n        case 'meridian':\n          if (this.showSeconds) {\n            this.highlightSecond();\n          } else {\n            this.highlightMinute();\n          }\n\n          break;\n      }\n    },\n    highlightHour: function () {\n      var $element = this.$element.get(0),\n          self = this;\n      this.highlightedUnit = 'hour';\n\n      if ($element.setSelectionRange) {\n        setTimeout(function () {\n          if (self.hour < 10) {\n            $element.setSelectionRange(0, 1);\n          } else {\n            $element.setSelectionRange(0, 2);\n          }\n        }, 0);\n      }\n    },\n    highlightMinute: function () {\n      var $element = this.$element.get(0),\n          self = this;\n      this.highlightedUnit = 'minute';\n\n      if ($element.setSelectionRange) {\n        setTimeout(function () {\n          if (self.hour < 10) {\n            $element.setSelectionRange(2, 4);\n          } else {\n            $element.setSelectionRange(3, 5);\n          }\n        }, 0);\n      }\n    },\n    highlightSecond: function () {\n      var $element = this.$element.get(0),\n          self = this;\n      this.highlightedUnit = 'second';\n\n      if ($element.setSelectionRange) {\n        setTimeout(function () {\n          if (self.hour < 10) {\n            $element.setSelectionRange(5, 7);\n          } else {\n            $element.setSelectionRange(6, 8);\n          }\n        }, 0);\n      }\n    },\n    highlightMeridian: function () {\n      var $element = this.$element.get(0),\n          self = this;\n      this.highlightedUnit = 'meridian';\n\n      if ($element.setSelectionRange) {\n        if (this.showSeconds) {\n          setTimeout(function () {\n            if (self.hour < 10) {\n              $element.setSelectionRange(8, 10);\n            } else {\n              $element.setSelectionRange(9, 11);\n            }\n          }, 0);\n        } else {\n          setTimeout(function () {\n            if (self.hour < 10) {\n              $element.setSelectionRange(5, 7);\n            } else {\n              $element.setSelectionRange(6, 8);\n            }\n          }, 0);\n        }\n      }\n    },\n    incrementHour: function () {\n      if (this.showMeridian) {\n        if (this.hour === 11) {\n          this.hour++;\n          return this.toggleMeridian();\n        } else if (this.hour === 12) {\n          this.hour = 0;\n        }\n      }\n\n      if (this.hour === this.maxHours - 1) {\n        this.hour = 0;\n        return;\n      }\n\n      this.hour++;\n    },\n    incrementMinute: function (step) {\n      var newVal;\n\n      if (step) {\n        newVal = this.minute + step;\n      } else {\n        newVal = this.minute + this.minuteStep - this.minute % this.minuteStep;\n      }\n\n      if (newVal > 59) {\n        this.incrementHour();\n        this.minute = newVal - 60;\n      } else {\n        this.minute = newVal;\n      }\n    },\n    incrementSecond: function () {\n      var newVal = this.second + this.secondStep - this.second % this.secondStep;\n\n      if (newVal > 59) {\n        this.incrementMinute(true);\n        this.second = newVal - 60;\n      } else {\n        this.second = newVal;\n      }\n    },\n    mousewheel: function (e) {\n      if (this.disableMousewheel) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n      var delta = e.originalEvent.wheelDelta || -e.originalEvent.detail,\n          scrollTo = null;\n\n      if (e.type === 'mousewheel') {\n        scrollTo = e.originalEvent.wheelDelta * -1;\n      } else if (e.type === 'DOMMouseScroll') {\n        scrollTo = 40 * e.originalEvent.detail;\n      }\n\n      if (scrollTo) {\n        e.preventDefault();\n        $(this).scrollTop(scrollTo + $(this).scrollTop());\n      }\n\n      switch (this.highlightedUnit) {\n        case 'minute':\n          if (delta > 0) {\n            this.incrementMinute();\n          } else {\n            this.decrementMinute();\n          }\n\n          this.highlightMinute();\n          break;\n\n        case 'second':\n          if (delta > 0) {\n            this.incrementSecond();\n          } else {\n            this.decrementSecond();\n          }\n\n          this.highlightSecond();\n          break;\n\n        case 'meridian':\n          this.toggleMeridian();\n          this.highlightMeridian();\n          break;\n\n        default:\n          if (delta > 0) {\n            this.incrementHour();\n          } else {\n            this.decrementHour();\n          }\n\n          this.highlightHour();\n          break;\n      }\n\n      return false;\n    },\n\n    /**\n     * Given a segment value like 43, will round and snap the segment\n     * to the nearest \"step\", like 45 if step is 15. Segment will\n     * \"overflow\" to 0 if it's larger than 59 or would otherwise\n     * round up to 60.\n     */\n    changeToNearestStep: function (segment, step) {\n      if (segment % step === 0) {\n        return segment;\n      }\n\n      if (Math.round(segment % step / step)) {\n        return (segment + (step - segment % step)) % 60;\n      } else {\n        return segment - segment % step;\n      }\n    },\n    // This method was adapted from bootstrap-datepicker.\n    place: function () {\n      if (this.isInline) {\n        return;\n      }\n\n      var widgetWidth = this.$widget.outerWidth(),\n          widgetHeight = this.$widget.outerHeight(),\n          visualPadding = 10,\n          windowWidth = $(window).width(),\n          windowHeight = $(window).height(),\n          scrollTop = $(window).scrollTop();\n      var zIndex = parseInt(this.$element.parents().filter(function () {\n        return $(this).css('z-index') !== 'auto';\n      }).first().css('z-index'), 10) + 10;\n      var offset = this.component ? this.component.parent().offset() : this.$element.offset();\n      var height = this.component ? this.component.outerHeight(true) : this.$element.outerHeight(false);\n      var width = this.component ? this.component.outerWidth(true) : this.$element.outerWidth(false);\n      var left = offset.left,\n          top = offset.top;\n      this.$widget.removeClass('timepicker-orient-top timepicker-orient-bottom timepicker-orient-right timepicker-orient-left');\n\n      if (this.orientation.x !== 'auto') {\n        this.$widget.addClass('timepicker-orient-' + this.orientation.x);\n\n        if (this.orientation.x === 'right') {\n          left -= widgetWidth - width;\n        }\n      } else {\n        // auto x orientation is best-placement: if it crosses a window edge, fudge it sideways\n        // Default to left\n        this.$widget.addClass('timepicker-orient-left');\n\n        if (offset.left < 0) {\n          left -= offset.left - visualPadding;\n        } else if (offset.left + widgetWidth > windowWidth) {\n          left = windowWidth - widgetWidth - visualPadding;\n        }\n      } // auto y orientation is best-situation: top or bottom, no fudging, decision based on which shows more of the widget\n\n\n      var yorient = this.orientation.y,\n          topOverflow,\n          bottomOverflow;\n\n      if (yorient === 'auto') {\n        topOverflow = -scrollTop + offset.top - widgetHeight;\n        bottomOverflow = scrollTop + windowHeight - (offset.top + height + widgetHeight);\n\n        if (Math.max(topOverflow, bottomOverflow) === bottomOverflow) {\n          yorient = 'top';\n        } else {\n          yorient = 'bottom';\n        }\n      }\n\n      this.$widget.addClass('timepicker-orient-' + yorient);\n\n      if (yorient === 'top') {\n        top += height;\n      } else {\n        top -= widgetHeight + parseInt(this.$widget.css('padding-top'), 10);\n      }\n\n      this.$widget.css({\n        top: top,\n        left: left,\n        zIndex: zIndex\n      });\n    },\n    remove: function () {\n      $('document').off('.timepicker');\n\n      if (this.$widget) {\n        this.$widget.remove();\n      }\n\n      delete this.$element.data().timepicker;\n    },\n    setDefaultTime: function (defaultTime) {\n      if (!this.$element.val()) {\n        if (defaultTime === 'current') {\n          var dTime = new Date(),\n              hours = dTime.getHours(),\n              minutes = dTime.getMinutes(),\n              seconds = dTime.getSeconds(),\n              meridian = 'AM';\n\n          if (seconds !== 0) {\n            seconds = Math.ceil(dTime.getSeconds() / this.secondStep) * this.secondStep;\n\n            if (seconds === 60) {\n              minutes += 1;\n              seconds = 0;\n            }\n          }\n\n          if (minutes !== 0) {\n            minutes = Math.ceil(dTime.getMinutes() / this.minuteStep) * this.minuteStep;\n\n            if (minutes === 60) {\n              hours += 1;\n              minutes = 0;\n            }\n          }\n\n          if (this.showMeridian) {\n            if (hours === 0) {\n              hours = 12;\n            } else if (hours >= 12) {\n              if (hours > 12) {\n                hours = hours - 12;\n              }\n\n              meridian = 'PM';\n            } else {\n              meridian = 'AM';\n            }\n          }\n\n          this.hour = hours;\n          this.minute = minutes;\n          this.second = seconds;\n          this.meridian = meridian;\n          this.update();\n        } else if (defaultTime === false) {\n          this.hour = 0;\n          this.minute = 0;\n          this.second = 0;\n          this.meridian = 'AM';\n        } else {\n          this.setTime(defaultTime);\n        }\n      } else {\n        this.updateFromElementVal();\n      }\n    },\n    setTime: function (time, ignoreWidget) {\n      if (!time) {\n        this.clear();\n        return;\n      }\n\n      var timeMode, timeArray, hour, minute, second, meridian;\n\n      if (typeof time === 'object' && time.getMonth) {\n        // this is a date object\n        hour = time.getHours();\n        minute = time.getMinutes();\n        second = time.getSeconds();\n\n        if (this.showMeridian) {\n          meridian = 'AM';\n\n          if (hour > 12) {\n            meridian = 'PM';\n            hour = hour % 12;\n          }\n\n          if (hour === 12) {\n            meridian = 'PM';\n          }\n        }\n      } else {\n        timeMode = (/a/i.test(time) ? 1 : 0) + (/p/i.test(time) ? 2 : 0); // 0 = none, 1 = AM, 2 = PM, 3 = BOTH.\n\n        if (timeMode > 2) {\n          // If both are present, fail.\n          this.clear();\n          return;\n        }\n\n        timeArray = time.replace(/[^0-9\\:]/g, '').split(':');\n        hour = timeArray[0] ? timeArray[0].toString() : timeArray.toString();\n\n        if (this.explicitMode && hour.length > 2 && hour.length % 2 !== 0) {\n          this.clear();\n          return;\n        }\n\n        minute = timeArray[1] ? timeArray[1].toString() : '';\n        second = timeArray[2] ? timeArray[2].toString() : ''; // adaptive time parsing\n\n        if (hour.length > 4) {\n          second = hour.slice(-2);\n          hour = hour.slice(0, -2);\n        }\n\n        if (hour.length > 2) {\n          minute = hour.slice(-2);\n          hour = hour.slice(0, -2);\n        }\n\n        if (minute.length > 2) {\n          second = minute.slice(-2);\n          minute = minute.slice(0, -2);\n        }\n\n        hour = parseInt(hour, 10);\n        minute = parseInt(minute, 10);\n        second = parseInt(second, 10);\n\n        if (isNaN(hour)) {\n          hour = 0;\n        }\n\n        if (isNaN(minute)) {\n          minute = 0;\n        }\n\n        if (isNaN(second)) {\n          second = 0;\n        } // Adjust the time based upon unit boundary.\n        // NOTE: Negatives will never occur due to time.replace() above.\n\n\n        if (second > 59) {\n          second = 59;\n        }\n\n        if (minute > 59) {\n          minute = 59;\n        }\n\n        if (hour >= this.maxHours) {\n          // No day/date handling.\n          hour = this.maxHours - 1;\n        }\n\n        if (this.showMeridian) {\n          if (hour > 12) {\n            // Force PM.\n            timeMode = 2;\n            hour -= 12;\n          }\n\n          if (!timeMode) {\n            timeMode = 1;\n          }\n\n          if (hour === 0) {\n            hour = 12; // AM or PM, reset to 12.  0 AM = 12 AM.  0 PM = 12 PM, etc.\n          }\n\n          meridian = timeMode === 1 ? 'AM' : 'PM';\n        } else if (hour < 12 && timeMode === 2) {\n          hour += 12;\n        } else {\n          if (hour >= this.maxHours) {\n            hour = this.maxHours - 1;\n          } else if (hour < 0 || hour === 12 && timeMode === 1) {\n            hour = 0;\n          }\n        }\n      }\n\n      this.hour = hour;\n\n      if (this.snapToStep) {\n        this.minute = this.changeToNearestStep(minute, this.minuteStep);\n        this.second = this.changeToNearestStep(second, this.secondStep);\n      } else {\n        this.minute = minute;\n        this.second = second;\n      }\n\n      this.meridian = meridian;\n      this.update(ignoreWidget);\n    },\n    showWidget: function () {\n      if (this.isOpen) {\n        return;\n      }\n\n      if (this.$element.is(':disabled')) {\n        return;\n      } // show/hide approach taken by datepicker\n\n\n      this.$widget.appendTo(this.appendWidgetTo);\n      $(document).on('mousedown.timepicker, touchend.timepicker', {\n        scope: this\n      }, this.handleDocumentClick);\n      this.$element.trigger({\n        'type': 'show.timepicker',\n        'time': {\n          'value': this.getTime(),\n          'hours': this.hour,\n          'minutes': this.minute,\n          'seconds': this.second,\n          'meridian': this.meridian\n        }\n      });\n      this.place();\n\n      if (this.disableFocus) {\n        this.$element.blur();\n      } // widget shouldn't be empty on open\n\n\n      if (this.hour === '') {\n        if (this.defaultTime) {\n          this.setDefaultTime(this.defaultTime);\n        } else {\n          this.setTime('0:0:0');\n        }\n      }\n\n      if (this.template === 'modal' && this.$widget.modal) {\n        this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this));\n      } else {\n        if (this.isOpen === false) {\n          this.$widget.addClass('open');\n        }\n      }\n\n      this.isOpen = true;\n    },\n    toggleMeridian: function () {\n      this.meridian = this.meridian === 'AM' ? 'PM' : 'AM';\n    },\n    update: function (ignoreWidget) {\n      this.updateElement();\n\n      if (!ignoreWidget) {\n        this.updateWidget();\n      }\n\n      this.$element.trigger({\n        'type': 'changeTime.timepicker',\n        'time': {\n          'value': this.getTime(),\n          'hours': this.hour,\n          'minutes': this.minute,\n          'seconds': this.second,\n          'meridian': this.meridian\n        }\n      });\n    },\n    updateElement: function () {\n      this.$element.val(this.getTime()).change();\n    },\n    updateFromElementVal: function () {\n      this.setTime(this.$element.val());\n    },\n    updateWidget: function () {\n      if (this.$widget === false) {\n        return;\n      }\n\n      var hour = this.hour,\n          minute = this.minute.toString().length === 1 ? '0' + this.minute : this.minute,\n          second = this.second.toString().length === 1 ? '0' + this.second : this.second;\n\n      if (this.showInputs) {\n        this.$widget.find('input.bootstrap-timepicker-hour').val(hour);\n        this.$widget.find('input.bootstrap-timepicker-minute').val(minute);\n\n        if (this.showSeconds) {\n          this.$widget.find('input.bootstrap-timepicker-second').val(second);\n        }\n\n        if (this.showMeridian) {\n          this.$widget.find('input.bootstrap-timepicker-meridian').val(this.meridian);\n        }\n      } else {\n        this.$widget.find('span.bootstrap-timepicker-hour').text(hour);\n        this.$widget.find('span.bootstrap-timepicker-minute').text(minute);\n\n        if (this.showSeconds) {\n          this.$widget.find('span.bootstrap-timepicker-second').text(second);\n        }\n\n        if (this.showMeridian) {\n          this.$widget.find('span.bootstrap-timepicker-meridian').text(this.meridian);\n        }\n      }\n    },\n    updateFromWidgetInputs: function () {\n      if (this.$widget === false) {\n        return;\n      }\n\n      var t = this.$widget.find('input.bootstrap-timepicker-hour').val() + ':' + this.$widget.find('input.bootstrap-timepicker-minute').val() + (this.showSeconds ? ':' + this.$widget.find('input.bootstrap-timepicker-second').val() : '') + (this.showMeridian ? this.$widget.find('input.bootstrap-timepicker-meridian').val() : '');\n      this.setTime(t, true);\n    },\n    widgetClick: function (e) {\n      e.stopPropagation();\n      e.preventDefault();\n      var $input = $(e.target),\n          action = $input.closest('a').data('action');\n\n      if (action) {\n        this[action]();\n      }\n\n      this.update();\n\n      if ($input.is('input')) {\n        $input.get(0).setSelectionRange(0, 2);\n      }\n    },\n    widgetKeydown: function (e) {\n      var $input = $(e.target),\n          name = $input.attr('class').replace('bootstrap-timepicker-', '');\n\n      switch (e.which) {\n        case 9:\n          //tab\n          if (e.shiftKey) {\n            if (name === 'hour') {\n              return this.hideWidget();\n            }\n          } else if (this.showMeridian && name === 'meridian' || this.showSeconds && name === 'second' || !this.showMeridian && !this.showSeconds && name === 'minute') {\n            return this.hideWidget();\n          }\n\n          break;\n\n        case 27:\n          // escape\n          this.hideWidget();\n          break;\n\n        case 38:\n          // up arrow\n          e.preventDefault();\n\n          switch (name) {\n            case 'hour':\n              this.incrementHour();\n              break;\n\n            case 'minute':\n              this.incrementMinute();\n              break;\n\n            case 'second':\n              this.incrementSecond();\n              break;\n\n            case 'meridian':\n              this.toggleMeridian();\n              break;\n          }\n\n          this.setTime(this.getTime());\n          $input.get(0).setSelectionRange(0, 2);\n          break;\n\n        case 40:\n          // down arrow\n          e.preventDefault();\n\n          switch (name) {\n            case 'hour':\n              this.decrementHour();\n              break;\n\n            case 'minute':\n              this.decrementMinute();\n              break;\n\n            case 'second':\n              this.decrementSecond();\n              break;\n\n            case 'meridian':\n              this.toggleMeridian();\n              break;\n          }\n\n          this.setTime(this.getTime());\n          $input.get(0).setSelectionRange(0, 2);\n          break;\n      }\n    },\n    widgetKeyup: function (e) {\n      if (e.which === 65 || e.which === 77 || e.which === 80 || e.which === 46 || e.which === 8 || e.which >= 48 && e.which <= 57 || e.which >= 96 && e.which <= 105) {\n        this.updateFromWidgetInputs();\n      }\n    }\n  }; //TIMEPICKER PLUGIN DEFINITION\n\n  $.fn.timepicker = function (option) {\n    var args = Array.apply(null, arguments);\n    args.shift();\n    return this.each(function () {\n      var $this = $(this),\n          data = $this.data('timepicker'),\n          options = typeof option === 'object' && option;\n\n      if (!data) {\n        $this.data('timepicker', data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $(this).data())));\n      }\n\n      if (typeof option === 'string') {\n        data[option].apply(data, args);\n      }\n    });\n  };\n\n  $.fn.timepicker.defaults = {\n    defaultTime: 'current',\n    disableFocus: false,\n    disableMousewheel: false,\n    isOpen: false,\n    minuteStep: 15,\n    modalBackdrop: false,\n    orientation: {\n      x: 'auto',\n      y: 'auto'\n    },\n    secondStep: 15,\n    snapToStep: false,\n    showSeconds: false,\n    showInputs: true,\n    showMeridian: true,\n    template: 'dropdown',\n    appendWidgetTo: 'body',\n    showWidgetOnAddonClick: true,\n    icons: {\n      up: 'glyphicon glyphicon-chevron-up',\n      down: 'glyphicon glyphicon-chevron-down'\n    },\n    maxHours: 24,\n    explicitMode: false\n  };\n  $.fn.timepicker.Constructor = Timepicker;\n  $(document).on('focus.timepicker.data-api click.timepicker.data-api', '[data-provide=\"timepicker\"]', function (e) {\n    var $this = $(this);\n\n    if ($this.data('timepicker')) {\n      return;\n    }\n\n    e.preventDefault(); // component click requires us to explicitly show it\n\n    $this.timepicker();\n  });\n})(jQuery, window, document);","map":null,"metadata":{},"sourceType":"script"}