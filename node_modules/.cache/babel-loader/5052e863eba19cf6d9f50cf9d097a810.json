{"ast":null,"code":"/*!\n * JQVMap: jQuery Vector Map Library\n * @author JQVMap <me@peterschmalfeldt.com>\n * @version 1.5.0\n * @link http://jqvmap.com\n * @license https://github.com/manifestinteractive/jqvmap/blob/master/LICENSE\n * @builddate 2016/03/15\n */\nvar VectorCanvas = function (a, b, c) {\n  if (this.mode = window.SVGAngle ? \"svg\" : \"vml\", this.params = c, \"svg\" === this.mode) this.createSvgNode = function (a) {\n    return document.createElementNS(this.svgns, a);\n  };else {\n    try {\n      document.namespaces.rvml || document.namespaces.add(\"rvml\", \"urn:schemas-microsoft-com:vml\"), this.createVmlNode = function (a) {\n        return document.createElement(\"<rvml:\" + a + ' class=\"rvml\">');\n      };\n    } catch (d) {\n      this.createVmlNode = function (a) {\n        return document.createElement(\"<\" + a + ' xmlns=\"urn:schemas-microsoft.com:vml\" class=\"rvml\">');\n      };\n    }\n\n    document.createStyleSheet().addRule(\".rvml\", \"behavior:url(#default#VML)\");\n  }\n  \"svg\" === this.mode ? this.canvas = this.createSvgNode(\"svg\") : (this.canvas = this.createVmlNode(\"group\"), this.canvas.style.position = \"absolute\"), this.setSize(a, b);\n};\n\nVectorCanvas.prototype = {\n  svgns: \"http://www.w3.org/2000/svg\",\n  mode: \"svg\",\n  width: 0,\n  height: 0,\n  canvas: null\n};\n\nvar ColorScale = function (a, b, c, d) {\n  a && this.setColors(a), b && this.setNormalizeFunction(b), c && this.setMin(c), c && this.setMax(d);\n};\n\nColorScale.prototype = {\n  colors: []\n};\n\nvar JQVMap = function (a) {\n  a = a || {};\n  var b,\n      c = this,\n      d = JQVMap.maps[a.map];\n  if (!d) throw new Error('Invalid \"' + a.map + '\" map parameter. Please make sure you have loaded this map file in your HTML.');\n  this.selectedRegions = [], this.multiSelectRegion = a.multiSelectRegion, this.container = a.container, this.defaultWidth = d.width, this.defaultHeight = d.height, this.color = a.color, this.selectedColor = a.selectedColor, this.hoverColor = a.hoverColor, this.hoverColors = a.hoverColors, this.hoverOpacity = a.hoverOpacity, this.setBackgroundColor(a.backgroundColor), this.width = a.container.width(), this.height = a.container.height(), this.resize(), jQuery(window).resize(function () {\n    var d = a.container.width(),\n        e = a.container.height();\n\n    if (d && e) {\n      c.width = d, c.height = e, c.resize(), c.canvas.setSize(c.width, c.height), c.applyTransform();\n      var f = jQuery.Event(\"resize.jqvmap\");\n      jQuery(a.container).trigger(f, [d, e]), b && (jQuery(\".jqvmap-pin\").remove(), c.pinHandlers = !1, c.placePins(b.pins, b.mode));\n    }\n  }), this.canvas = new VectorCanvas(this.width, this.height, a), a.container.append(this.canvas.canvas), this.makeDraggable(), this.rootGroup = this.canvas.createGroup(!0), this.index = JQVMap.mapIndex, this.label = jQuery(\"<div/>\").addClass(\"jqvmap-label\").appendTo(jQuery(\"body\")).hide(), a.enableZoom && (jQuery(\"<div/>\").addClass(\"jqvmap-zoomin\").text(\"+\").appendTo(a.container), jQuery(\"<div/>\").addClass(\"jqvmap-zoomout\").html(\"&#x2212;\").appendTo(a.container)), c.countries = [];\n\n  for (var e in d.paths) {\n    var f = this.canvas.createPath({\n      path: d.paths[e].path\n    });\n    f.setFill(this.color), f.id = c.getCountryId(e), c.countries[e] = f, \"svg\" === this.canvas.mode ? f.setAttribute(\"class\", \"jqvmap-region\") : jQuery(f).addClass(\"jqvmap-region\"), jQuery(this.rootGroup).append(f);\n  }\n\n  if (jQuery(a.container).delegate(\"svg\" === this.canvas.mode ? \"path\" : \"shape\", \"mouseover mouseout\", function (b) {\n    var e = b.target,\n        f = b.target.id.split(\"_\").pop(),\n        g = jQuery.Event(\"labelShow.jqvmap\"),\n        h = jQuery.Event(\"regionMouseOver.jqvmap\");\n    f = f.toLowerCase(), \"mouseover\" === b.type ? (jQuery(a.container).trigger(h, [f, d.paths[f].name]), h.isDefaultPrevented() || c.highlight(f, e), a.showTooltip && (c.label.text(d.paths[f].name), jQuery(a.container).trigger(g, [c.label, f]), g.isDefaultPrevented() || (c.label.show(), c.labelWidth = c.label.width(), c.labelHeight = c.label.height()))) : (c.unhighlight(f, e), c.label.hide(), jQuery(a.container).trigger(\"regionMouseOut.jqvmap\", [f, d.paths[f].name]));\n  }), jQuery(a.container).delegate(\"svg\" === this.canvas.mode ? \"path\" : \"shape\", \"click\", function (b) {\n    var e = b.target,\n        f = b.target.id.split(\"_\").pop(),\n        g = jQuery.Event(\"regionClick.jqvmap\");\n    if (f = f.toLowerCase(), jQuery(a.container).trigger(g, [f, d.paths[f].name]), !a.multiSelectRegion && !g.isDefaultPrevented()) for (var h in d.paths) c.countries[h].currentFillColor = c.countries[h].getOriginalFill(), c.countries[h].setFill(c.countries[h].getOriginalFill());\n    g.isDefaultPrevented() || (c.isSelected(f) ? c.deselect(f, e) : c.select(f, e));\n  }), a.showTooltip && a.container.mousemove(function (a) {\n    if (c.label.is(\":visible\")) {\n      var b = a.pageX - 15 - c.labelWidth,\n          d = a.pageY - 15 - c.labelHeight;\n      0 > b && (b = a.pageX + 15), 0 > d && (d = a.pageY + 15), c.label.css({\n        left: b,\n        top: d\n      });\n    }\n  }), this.setColors(a.colors), this.canvas.canvas.appendChild(this.rootGroup), this.applyTransform(), this.colorScale = new ColorScale(a.scaleColors, a.normalizeFunction, a.valueMin, a.valueMax), a.values && (this.values = a.values, this.setValues(a.values)), a.selectedRegions) if (a.selectedRegions instanceof Array) for (var g in a.selectedRegions) this.select(a.selectedRegions[g].toLowerCase());else this.select(a.selectedRegions.toLowerCase());\n\n  if (this.bindZoomButtons(), a.pins && (b = {\n    pins: a.pins,\n    mode: a.pinMode\n  }, this.pinHandlers = !1, this.placePins(a.pins, a.pinMode)), a.showLabels) {\n    this.pinHandlers = !1;\n    var h = {};\n\n    for (e in c.countries) \"function\" != typeof c.countries[e] && (a.pins && a.pins[e] || (h[e] = e.toUpperCase()));\n\n    b = {\n      pins: h,\n      mode: \"content\"\n    }, this.placePins(h, \"content\");\n  }\n\n  JQVMap.mapIndex++;\n};\n\nJQVMap.prototype = {\n  transX: 0,\n  transY: 0,\n  scale: 1,\n  baseTransX: 0,\n  baseTransY: 0,\n  baseScale: 1,\n  width: 0,\n  height: 0,\n  countries: {},\n  countriesColors: {},\n  countriesData: {},\n  zoomStep: 1.4,\n  zoomMaxStep: 4,\n  zoomCurStep: 1\n}, JQVMap.xlink = \"http://www.w3.org/1999/xlink\", JQVMap.mapIndex = 1, JQVMap.maps = {}, function () {\n  var a = {\n    colors: 1,\n    values: 1,\n    backgroundColor: 1,\n    scaleColors: 1,\n    normalizeFunction: 1,\n    enableZoom: 1,\n    showTooltip: 1,\n    borderColor: 1,\n    borderWidth: 1,\n    borderOpacity: 1,\n    selectedRegions: 1,\n    multiSelectRegion: 1\n  },\n      b = {\n    onLabelShow: \"labelShow\",\n    onLoad: \"load\",\n    onRegionOver: \"regionMouseOver\",\n    onRegionOut: \"regionMouseOut\",\n    onRegionClick: \"regionClick\",\n    onRegionSelect: \"regionSelect\",\n    onRegionDeselect: \"regionDeselect\",\n    onResize: \"resize\"\n  };\n\n  jQuery.fn.vectorMap = function (c) {\n    var d = {\n      map: \"world_en\",\n      backgroundColor: \"#a5bfdd\",\n      color: \"#f4f3f0\",\n      hoverColor: \"#c9dfaf\",\n      hoverColors: {},\n      selectedColor: \"#c9dfaf\",\n      scaleColors: [\"#b6d6ff\", \"#005ace\"],\n      normalizeFunction: \"linear\",\n      enableZoom: !0,\n      showTooltip: !0,\n      borderColor: \"#818181\",\n      borderWidth: 1,\n      borderOpacity: .25,\n      selectedRegions: null,\n      multiSelectRegion: !1\n    },\n        e = this.data(\"mapObject\");\n    if (\"addMap\" === c) JQVMap.maps[arguments[1]] = arguments[2];else {\n      if (\"set\" !== c || !a[arguments[1]]) {\n        if (\"string\" == typeof c && \"function\" == typeof e[c]) return e[c].apply(e, Array.prototype.slice.call(arguments, 1));\n        jQuery.extend(d, c), d.container = this, this.css({\n          position: \"relative\",\n          overflow: \"hidden\"\n        }), e = new JQVMap(d), this.data(\"mapObject\", e), this.unbind(\".jqvmap\");\n\n        for (var f in b) d[f] && this.bind(b[f] + \".jqvmap\", d[f]);\n\n        var g = jQuery.Event(\"load.jqvmap\");\n        return jQuery(d.container).trigger(g, e), e;\n      }\n\n      e[\"set\" + arguments[1].charAt(0).toUpperCase() + arguments[1].substr(1)].apply(e, Array.prototype.slice.call(arguments, 2));\n    }\n  };\n}(jQuery), ColorScale.arrayToRgb = function (a) {\n  for (var b, c = \"#\", d = 0; d < a.length; d++) b = a[d].toString(16), c += 1 === b.length ? \"0\" + b : b;\n\n  return c;\n}, ColorScale.prototype.getColor = function (a) {\n  \"function\" == typeof this.normalize && (a = this.normalize(a));\n\n  for (var b, c = [], d = 0, e = 0; e < this.colors.length - 1; e++) b = this.vectorLength(this.vectorSubtract(this.colors[e + 1], this.colors[e])), c.push(b), d += b;\n\n  var f = (this.maxValue - this.minValue) / d;\n\n  for (e = 0; e < c.length; e++) c[e] *= f;\n\n  for (e = 0, a -= this.minValue; a - c[e] >= 0;) a -= c[e], e++;\n\n  var g;\n\n  for (g = e === this.colors.length - 1 ? this.vectorToNum(this.colors[e]).toString(16) : this.vectorToNum(this.vectorAdd(this.colors[e], this.vectorMult(this.vectorSubtract(this.colors[e + 1], this.colors[e]), a / c[e]))).toString(16); g.length < 6;) g = \"0\" + g;\n\n  return \"#\" + g;\n}, ColorScale.rgbToArray = function (a) {\n  return a = a.substr(1), [parseInt(a.substr(0, 2), 16), parseInt(a.substr(2, 2), 16), parseInt(a.substr(4, 2), 16)];\n}, ColorScale.prototype.setColors = function (a) {\n  for (var b = 0; b < a.length; b++) a[b] = ColorScale.rgbToArray(a[b]);\n\n  this.colors = a;\n}, ColorScale.prototype.setMax = function (a) {\n  this.clearMaxValue = a, \"function\" == typeof this.normalize ? this.maxValue = this.normalize(a) : this.maxValue = a;\n}, ColorScale.prototype.setMin = function (a) {\n  this.clearMinValue = a, \"function\" == typeof this.normalize ? this.minValue = this.normalize(a) : this.minValue = a;\n}, ColorScale.prototype.setNormalizeFunction = function (a) {\n  \"polynomial\" === a ? this.normalize = function (a) {\n    return Math.pow(a, .2);\n  } : \"linear\" === a ? delete this.normalize : this.normalize = a, this.setMin(this.clearMinValue), this.setMax(this.clearMaxValue);\n}, ColorScale.prototype.vectorAdd = function (a, b) {\n  for (var c = [], d = 0; d < a.length; d++) c[d] = a[d] + b[d];\n\n  return c;\n}, ColorScale.prototype.vectorLength = function (a) {\n  for (var b = 0, c = 0; c < a.length; c++) b += a[c] * a[c];\n\n  return Math.sqrt(b);\n}, ColorScale.prototype.vectorMult = function (a, b) {\n  for (var c = [], d = 0; d < a.length; d++) c[d] = a[d] * b;\n\n  return c;\n}, ColorScale.prototype.vectorSubtract = function (a, b) {\n  for (var c = [], d = 0; d < a.length; d++) c[d] = a[d] - b[d];\n\n  return c;\n}, ColorScale.prototype.vectorToNum = function (a) {\n  for (var b = 0, c = 0; c < a.length; c++) b += Math.round(a[c]) * Math.pow(256, a.length - c - 1);\n\n  return b;\n}, JQVMap.prototype.applyTransform = function () {\n  var a, b, c, d;\n  this.defaultWidth * this.scale <= this.width ? (a = (this.width - this.defaultWidth * this.scale) / (2 * this.scale), c = (this.width - this.defaultWidth * this.scale) / (2 * this.scale)) : (a = 0, c = (this.width - this.defaultWidth * this.scale) / this.scale), this.defaultHeight * this.scale <= this.height ? (b = (this.height - this.defaultHeight * this.scale) / (2 * this.scale), d = (this.height - this.defaultHeight * this.scale) / (2 * this.scale)) : (b = 0, d = (this.height - this.defaultHeight * this.scale) / this.scale), this.transY > b ? this.transY = b : this.transY < d && (this.transY = d), this.transX > a ? this.transX = a : this.transX < c && (this.transX = c), this.canvas.applyTransformParams(this.scale, this.transX, this.transY);\n}, JQVMap.prototype.bindZoomButtons = function () {\n  var a = this;\n  this.container.find(\".jqvmap-zoomin\").click(function () {\n    a.zoomIn();\n  }), this.container.find(\".jqvmap-zoomout\").click(function () {\n    a.zoomOut();\n  });\n}, JQVMap.prototype.deselect = function (a, b) {\n  if (a = a.toLowerCase(), b = b || jQuery(\"#\" + this.getCountryId(a))[0], this.isSelected(a)) this.selectedRegions.splice(this.selectIndex(a), 1), jQuery(this.container).trigger(\"regionDeselect.jqvmap\", [a]), b.currentFillColor = b.getOriginalFill(), b.setFill(b.getOriginalFill());else for (var c in this.countries) this.selectedRegions.splice(this.selectedRegions.indexOf(c), 1), this.countries[c].currentFillColor = this.color, this.countries[c].setFill(this.color);\n}, JQVMap.prototype.getCountryId = function (a) {\n  return \"jqvmap\" + this.index + \"_\" + a;\n}, JQVMap.prototype.getPin = function (a) {\n  var b = jQuery(\"#\" + this.getPinId(a));\n  return b.html();\n}, JQVMap.prototype.getPinId = function (a) {\n  return this.getCountryId(a) + \"_pin\";\n}, JQVMap.prototype.getPins = function () {\n  var a = this.container.find(\".jqvmap-pin\"),\n      b = {};\n  return jQuery.each(a, function (a, c) {\n    c = jQuery(c);\n    var d = c.attr(\"for\").toLowerCase(),\n        e = c.html();\n    b[d] = e;\n  }), JSON.stringify(b);\n}, JQVMap.prototype.highlight = function (a, b) {\n  b = b || jQuery(\"#\" + this.getCountryId(a))[0], this.hoverOpacity ? b.setOpacity(this.hoverOpacity) : this.hoverColors && a in this.hoverColors ? (b.currentFillColor = b.getFill() + \"\", b.setFill(this.hoverColors[a])) : this.hoverColor && (b.currentFillColor = b.getFill() + \"\", b.setFill(this.hoverColor));\n}, JQVMap.prototype.isSelected = function (a) {\n  return this.selectIndex(a) >= 0;\n}, JQVMap.prototype.makeDraggable = function () {\n  var a,\n      b,\n      c = !1,\n      d = this;\n  d.isMoving = !1, d.isMovingTimeout = !1;\n  var e, f, g, h, i, j, k;\n  this.container.mousemove(function (e) {\n    return c && (d.transX -= (a - e.pageX) / d.scale, d.transY -= (b - e.pageY) / d.scale, d.applyTransform(), a = e.pageX, b = e.pageY, d.isMoving = !0, d.isMovingTimeout && clearTimeout(d.isMovingTimeout), d.container.trigger(\"drag\")), !1;\n  }).mousedown(function (d) {\n    return c = !0, a = d.pageX, b = d.pageY, !1;\n  }).mouseup(function () {\n    return c = !1, clearTimeout(d.isMovingTimeout), d.isMovingTimeout = setTimeout(function () {\n      d.isMoving = !1;\n    }, 100), !1;\n  }).mouseout(function () {\n    return c && d.isMoving ? (clearTimeout(d.isMovingTimeout), d.isMovingTimeout = setTimeout(function () {\n      c = !1, d.isMoving = !1;\n    }, 100), !1) : void 0;\n  }), jQuery(this.container).bind(\"touchmove\", function (a) {\n    var b,\n        c,\n        l,\n        m,\n        n = a.originalEvent.touches;\n\n    if (1 === n.length) {\n      if (1 === e) {\n        if (j === n[0].pageX && k === n[0].pageY) return;\n        l = d.transX, m = d.transY, d.transX -= (j - n[0].pageX) / d.scale, d.transY -= (k - n[0].pageY) / d.scale, d.applyTransform(), (l !== d.transX || m !== d.transY) && a.preventDefault(), d.isMoving = !0, d.isMovingTimeout && clearTimeout(d.isMovingTimeout);\n      }\n\n      j = n[0].pageX, k = n[0].pageY;\n    } else 2 === n.length && (2 === e ? (c = Math.sqrt(Math.pow(n[0].pageX - n[1].pageX, 2) + Math.pow(n[0].pageY - n[1].pageY, 2)) / h, d.setScale(i * c, f, g), a.preventDefault()) : (b = jQuery(d.container).offset(), f = n[0].pageX > n[1].pageX ? n[1].pageX + (n[0].pageX - n[1].pageX) / 2 : n[0].pageX + (n[1].pageX - n[0].pageX) / 2, g = n[0].pageY > n[1].pageY ? n[1].pageY + (n[0].pageY - n[1].pageY) / 2 : n[0].pageY + (n[1].pageY - n[0].pageY) / 2, f -= b.left, g -= b.top, i = d.scale, h = Math.sqrt(Math.pow(n[0].pageX - n[1].pageX, 2) + Math.pow(n[0].pageY - n[1].pageY, 2))));\n\n    e = n.length;\n  }), jQuery(this.container).bind(\"touchstart\", function () {\n    e = 0;\n  }), jQuery(this.container).bind(\"touchend\", function () {\n    e = 0;\n  });\n}, JQVMap.prototype.placePins = function (a, b) {\n  var c = this;\n\n  if ((!b || \"content\" !== b && \"id\" !== b) && (b = \"content\"), \"content\" === b ? jQuery.each(a, function (a, b) {\n    if (0 !== jQuery(\"#\" + c.getCountryId(a)).length) {\n      var d = c.getPinId(a),\n          e = jQuery(\"#\" + d);\n      e.length > 0 && e.remove(), c.container.append('<div id=\"' + d + '\" for=\"' + a + '\" class=\"jqvmap-pin\" style=\"position:absolute\">' + b + \"</div>\");\n    }\n  }) : jQuery.each(a, function (a, b) {\n    if (0 !== jQuery(\"#\" + c.getCountryId(a)).length) {\n      var d = c.getPinId(a),\n          e = jQuery(\"#\" + d);\n      e.length > 0 && e.remove(), c.container.append('<div id=\"' + d + '\" for=\"' + a + '\" class=\"jqvmap-pin\" style=\"position:absolute\"></div>'), e.append(jQuery(\"#\" + b));\n    }\n  }), this.positionPins(), !this.pinHandlers) {\n    this.pinHandlers = !0;\n\n    var d = function () {\n      c.positionPins();\n    };\n\n    this.container.bind(\"zoomIn\", d).bind(\"zoomOut\", d).bind(\"drag\", d);\n  }\n}, JQVMap.prototype.positionPins = function () {\n  var a = this,\n      b = this.container.find(\".jqvmap-pin\");\n  jQuery.each(b, function (b, c) {\n    c = jQuery(c);\n    var d = a.getCountryId(c.attr(\"for\").toLowerCase()),\n        e = jQuery(\"#\" + d),\n        f = document.getElementById(d).getBBox(),\n        g = e.position(),\n        h = a.scale,\n        i = g.left + f.width / 2 * h - c.width() / 2,\n        j = g.top + f.height / 2 * h - c.height() / 2;\n    c.css(\"left\", i).css(\"top\", j);\n  });\n}, JQVMap.prototype.removePin = function (a) {\n  a = a.toLowerCase(), jQuery(\"#\" + this.getPinId(a)).remove();\n}, JQVMap.prototype.removePins = function () {\n  this.container.find(\".jqvmap-pin\").remove();\n}, JQVMap.prototype.reset = function () {\n  for (var a in this.countries) this.countries[a].setFill(this.color);\n\n  this.scale = this.baseScale, this.transX = this.baseTransX, this.transY = this.baseTransY, this.applyTransform();\n}, JQVMap.prototype.resize = function () {\n  var a = this.baseScale;\n  this.width / this.height > this.defaultWidth / this.defaultHeight ? (this.baseScale = this.height / this.defaultHeight, this.baseTransX = Math.abs(this.width - this.defaultWidth * this.baseScale) / (2 * this.baseScale)) : (this.baseScale = this.width / this.defaultWidth, this.baseTransY = Math.abs(this.height - this.defaultHeight * this.baseScale) / (2 * this.baseScale)), this.scale *= this.baseScale / a, this.transX *= this.baseScale / a, this.transY *= this.baseScale / a;\n}, JQVMap.prototype.select = function (a, b) {\n  a = a.toLowerCase(), b = b || jQuery(\"#\" + this.getCountryId(a))[0], this.isSelected(a) || (this.multiSelectRegion ? this.selectedRegions.push(a) : this.selectedRegions = [a], jQuery(this.container).trigger(\"regionSelect.jqvmap\", [a]), this.selectedColor && b && (b.currentFillColor = this.selectedColor, b.setFill(this.selectedColor)));\n}, JQVMap.prototype.selectIndex = function (a) {\n  a = a.toLowerCase();\n\n  for (var b = 0; b < this.selectedRegions.length; b++) if (a === this.selectedRegions[b]) return b;\n\n  return -1;\n}, JQVMap.prototype.setBackgroundColor = function (a) {\n  this.container.css(\"background-color\", a);\n}, JQVMap.prototype.setColors = function (a, b) {\n  if (\"string\" == typeof a) this.countries[a].setFill(b), this.countries[a].setAttribute(\"original\", b);else {\n    var c = a;\n\n    for (var d in c) this.countries[d] && (this.countries[d].setFill(c[d]), this.countries[d].setAttribute(\"original\", c[d]));\n  }\n}, JQVMap.prototype.setNormalizeFunction = function (a) {\n  this.colorScale.setNormalizeFunction(a), this.values && this.setValues(this.values);\n}, JQVMap.prototype.setScale = function (a) {\n  this.scale = a, this.applyTransform();\n}, JQVMap.prototype.setScaleColors = function (a) {\n  this.colorScale.setColors(a), this.values && this.setValues(this.values);\n}, JQVMap.prototype.setValues = function (a) {\n  var b,\n      c = 0,\n      d = Number.MAX_VALUE;\n\n  for (var e in a) e = e.toLowerCase(), b = parseFloat(a[e]), isNaN(b) || (b > c && (c = a[e]), d > b && (d = b));\n\n  d === c && c++, this.colorScale.setMin(d), this.colorScale.setMax(c);\n  var f = {};\n\n  for (e in a) e = e.toLowerCase(), b = parseFloat(a[e]), f[e] = isNaN(b) ? this.color : this.colorScale.getColor(b);\n\n  this.setColors(f), this.values = a;\n}, JQVMap.prototype.unhighlight = function (a, b) {\n  a = a.toLowerCase(), b = b || jQuery(\"#\" + this.getCountryId(a))[0], b.setOpacity(1), b.currentFillColor && b.setFill(b.currentFillColor);\n}, JQVMap.prototype.zoomIn = function () {\n  var a = this,\n      b = (jQuery(\"#zoom\").innerHeight() - 12 - 30 - 6 - 7 - 6) / (this.zoomMaxStep - this.zoomCurStep);\n\n  if (a.zoomCurStep < a.zoomMaxStep) {\n    a.transX -= (a.width / a.scale - a.width / (a.scale * a.zoomStep)) / 2, a.transY -= (a.height / a.scale - a.height / (a.scale * a.zoomStep)) / 2, a.setScale(a.scale * a.zoomStep), a.zoomCurStep++;\n    var c = jQuery(\"#zoomSlider\");\n    c.css(\"top\", parseInt(c.css(\"top\"), 10) - b), a.container.trigger(\"zoomIn\");\n  }\n}, JQVMap.prototype.zoomOut = function () {\n  var a = this,\n      b = (jQuery(\"#zoom\").innerHeight() - 12 - 30 - 6 - 7 - 6) / (this.zoomMaxStep - this.zoomCurStep);\n\n  if (a.zoomCurStep > 1) {\n    a.transX += (a.width / (a.scale / a.zoomStep) - a.width / a.scale) / 2, a.transY += (a.height / (a.scale / a.zoomStep) - a.height / a.scale) / 2, a.setScale(a.scale / a.zoomStep), a.zoomCurStep--;\n    var c = jQuery(\"#zoomSlider\");\n    c.css(\"top\", parseInt(c.css(\"top\"), 10) + b), a.container.trigger(\"zoomOut\");\n  }\n}, VectorCanvas.prototype.applyTransformParams = function (a, b, c) {\n  \"svg\" === this.mode ? this.rootGroup.setAttribute(\"transform\", \"scale(\" + a + \") translate(\" + b + \", \" + c + \")\") : (this.rootGroup.coordorigin = this.width - b + \",\" + (this.height - c), this.rootGroup.coordsize = this.width / a + \",\" + this.height / a);\n}, VectorCanvas.prototype.createGroup = function (a) {\n  var b;\n  return \"svg\" === this.mode ? b = this.createSvgNode(\"g\") : (b = this.createVmlNode(\"group\"), b.style.width = this.width + \"px\", b.style.height = this.height + \"px\", b.style.left = \"0px\", b.style.top = \"0px\", b.coordorigin = \"0 0\", b.coordsize = this.width + \" \" + this.height), a && (this.rootGroup = b), b;\n}, VectorCanvas.prototype.createPath = function (a) {\n  var b;\n  if (\"svg\" === this.mode) b = this.createSvgNode(\"path\"), b.setAttribute(\"d\", a.path), null !== this.params.borderColor && b.setAttribute(\"stroke\", this.params.borderColor), this.params.borderWidth > 0 && (b.setAttribute(\"stroke-width\", this.params.borderWidth), b.setAttribute(\"stroke-linecap\", \"round\"), b.setAttribute(\"stroke-linejoin\", \"round\")), this.params.borderOpacity > 0 && b.setAttribute(\"stroke-opacity\", this.params.borderOpacity), b.setFill = function (a) {\n    this.setAttribute(\"fill\", a), null === this.getAttribute(\"original\") && this.setAttribute(\"original\", a);\n  }, b.getFill = function () {\n    return this.getAttribute(\"fill\");\n  }, b.getOriginalFill = function () {\n    return this.getAttribute(\"original\");\n  }, b.setOpacity = function (a) {\n    this.setAttribute(\"fill-opacity\", a);\n  };else {\n    b = this.createVmlNode(\"shape\"), b.coordorigin = \"0 0\", b.coordsize = this.width + \" \" + this.height, b.style.width = this.width + \"px\", b.style.height = this.height + \"px\", b.fillcolor = JQVMap.defaultFillColor, b.stroked = !1, b.path = VectorCanvas.pathSvgToVml(a.path);\n    var c = this.createVmlNode(\"skew\");\n    c.on = !0, c.matrix = \"0.01,0,0,0.01,0,0\", c.offset = \"0,0\", b.appendChild(c);\n    var d = this.createVmlNode(\"fill\");\n    b.appendChild(d), b.setFill = function (a) {\n      this.getElementsByTagName(\"fill\")[0].color = a, null === this.getAttribute(\"original\") && this.setAttribute(\"original\", a);\n    }, b.getFill = function () {\n      return this.getElementsByTagName(\"fill\")[0].color;\n    }, b.getOriginalFill = function () {\n      return this.getAttribute(\"original\");\n    }, b.setOpacity = function (a) {\n      this.getElementsByTagName(\"fill\")[0].opacity = parseInt(100 * a, 10) + \"%\";\n    };\n  }\n  return b;\n}, VectorCanvas.prototype.pathSvgToVml = function (a) {\n  var b,\n      c,\n      d = \"\",\n      e = 0,\n      f = 0;\n  return a.replace(/([MmLlHhVvCcSs])((?:-?(?:\\d+)?(?:\\.\\d+)?,?\\s?)+)/g, function (a, g, h) {\n    h = h.replace(/(\\d)-/g, \"$1,-\").replace(/\\s+/g, \",\").split(\",\"), h[0] || h.shift();\n\n    for (var i = 0, j = h.length; j > i; i++) h[i] = Math.round(100 * h[i]);\n\n    switch (g) {\n      case \"m\":\n        e += h[0], f += h[1], d = \"t\" + h.join(\",\");\n        break;\n\n      case \"M\":\n        e = h[0], f = h[1], d = \"m\" + h.join(\",\");\n        break;\n\n      case \"l\":\n        e += h[0], f += h[1], d = \"r\" + h.join(\",\");\n        break;\n\n      case \"L\":\n        e = h[0], f = h[1], d = \"l\" + h.join(\",\");\n        break;\n\n      case \"h\":\n        e += h[0], d = \"r\" + h[0] + \",0\";\n        break;\n\n      case \"H\":\n        e = h[0], d = \"l\" + e + \",\" + f;\n        break;\n\n      case \"v\":\n        f += h[0], d = \"r0,\" + h[0];\n        break;\n\n      case \"V\":\n        f = h[0], d = \"l\" + e + \",\" + f;\n        break;\n\n      case \"c\":\n        b = e + h[h.length - 4], c = f + h[h.length - 3], e += h[h.length - 2], f += h[h.length - 1], d = \"v\" + h.join(\",\");\n        break;\n\n      case \"C\":\n        b = h[h.length - 4], c = h[h.length - 3], e = h[h.length - 2], f = h[h.length - 1], d = \"c\" + h.join(\",\");\n        break;\n\n      case \"s\":\n        h.unshift(f - c), h.unshift(e - b), b = e + h[h.length - 4], c = f + h[h.length - 3], e += h[h.length - 2], f += h[h.length - 1], d = \"v\" + h.join(\",\");\n        break;\n\n      case \"S\":\n        h.unshift(f + f - c), h.unshift(e + e - b), b = h[h.length - 4], c = h[h.length - 3], e = h[h.length - 2], f = h[h.length - 1], d = \"c\" + h.join(\",\");\n    }\n\n    return d;\n  }).replace(/z/g, \"\");\n}, VectorCanvas.prototype.setSize = function (a, b) {\n  if (\"svg\" === this.mode) this.canvas.setAttribute(\"width\", a), this.canvas.setAttribute(\"height\", b);else if (this.canvas.style.width = a + \"px\", this.canvas.style.height = b + \"px\", this.canvas.coordsize = a + \" \" + b, this.canvas.coordorigin = \"0 0\", this.rootGroup) {\n    for (var c = this.rootGroup.getElementsByTagName(\"shape\"), d = 0, e = c.length; e > d; d++) c[d].coordsize = a + \" \" + b, c[d].style.width = a + \"px\", c[d].style.height = b + \"px\";\n\n    this.rootGroup.coordsize = a + \" \" + b, this.rootGroup.style.width = a + \"px\", this.rootGroup.style.height = b + \"px\";\n  }\n  this.width = a, this.height = b;\n};","map":null,"metadata":{},"sourceType":"script"}