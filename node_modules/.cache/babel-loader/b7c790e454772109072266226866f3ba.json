{"ast":null,"code":"/*!\n * \n * Super simple wysiwyg editor v0.8.18\n * https://summernote.org\n * \n * \n * Copyright 2013- Alan Hong. and other contributors\n * summernote may be freely distributed under the MIT license.\n * \n * Date: 2020-05-20T16:47Z\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n  if (typeof exports === 'object' && typeof module === 'object') module.exports = factory(require(\"jquery\"));else if (typeof define === 'function' && define.amd) define([\"jquery\"], factory);else {\n    var a = typeof exports === 'object' ? factory(require(\"jquery\")) : factory(root[\"jQuery\"]);\n\n    for (var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n  }\n})(window, function (__WEBPACK_EXTERNAL_MODULE__0__) {\n  return (\n    /******/\n    function (modules) {\n      // webpackBootstrap\n\n      /******/\n      // The module cache\n\n      /******/\n      var installedModules = {};\n      /******/\n\n      /******/\n      // The require function\n\n      /******/\n\n      function __webpack_require__(moduleId) {\n        /******/\n\n        /******/\n        // Check if module is in cache\n\n        /******/\n        if (installedModules[moduleId]) {\n          /******/\n          return installedModules[moduleId].exports;\n          /******/\n        }\n        /******/\n        // Create a new module (and put it into the cache)\n\n        /******/\n\n\n        var module = installedModules[moduleId] = {\n          /******/\n          i: moduleId,\n\n          /******/\n          l: false,\n\n          /******/\n          exports: {}\n          /******/\n\n        };\n        /******/\n\n        /******/\n        // Execute the module function\n\n        /******/\n\n        modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n        /******/\n\n        /******/\n        // Flag the module as loaded\n\n        /******/\n\n        module.l = true;\n        /******/\n\n        /******/\n        // Return the exports of the module\n\n        /******/\n\n        return module.exports;\n        /******/\n      }\n      /******/\n\n      /******/\n\n      /******/\n      // expose the modules object (__webpack_modules__)\n\n      /******/\n\n\n      __webpack_require__.m = modules;\n      /******/\n\n      /******/\n      // expose the module cache\n\n      /******/\n\n      __webpack_require__.c = installedModules;\n      /******/\n\n      /******/\n      // define getter function for harmony exports\n\n      /******/\n\n      __webpack_require__.d = function (exports, name, getter) {\n        /******/\n        if (!__webpack_require__.o(exports, name)) {\n          /******/\n          Object.defineProperty(exports, name, {\n            enumerable: true,\n            get: getter\n          });\n          /******/\n        }\n        /******/\n\n      };\n      /******/\n\n      /******/\n      // define __esModule on exports\n\n      /******/\n\n\n      __webpack_require__.r = function (exports) {\n        /******/\n        if (typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n          /******/\n          Object.defineProperty(exports, Symbol.toStringTag, {\n            value: 'Module'\n          });\n          /******/\n        }\n        /******/\n\n\n        Object.defineProperty(exports, '__esModule', {\n          value: true\n        });\n        /******/\n      };\n      /******/\n\n      /******/\n      // create a fake namespace object\n\n      /******/\n      // mode & 1: value is a module id, require it\n\n      /******/\n      // mode & 2: merge all properties of value into the ns\n\n      /******/\n      // mode & 4: return value when already ns object\n\n      /******/\n      // mode & 8|1: behave like require\n\n      /******/\n\n\n      __webpack_require__.t = function (value, mode) {\n        /******/\n        if (mode & 1) value = __webpack_require__(value);\n        /******/\n\n        if (mode & 8) return value;\n        /******/\n\n        if (mode & 4 && typeof value === 'object' && value && value.__esModule) return value;\n        /******/\n\n        var ns = Object.create(null);\n        /******/\n\n        __webpack_require__.r(ns);\n        /******/\n\n\n        Object.defineProperty(ns, 'default', {\n          enumerable: true,\n          value: value\n        });\n        /******/\n\n        if (mode & 2 && typeof value != 'string') for (var key in value) __webpack_require__.d(ns, key, function (key) {\n          return value[key];\n        }.bind(null, key));\n        /******/\n\n        return ns;\n        /******/\n      };\n      /******/\n\n      /******/\n      // getDefaultExport function for compatibility with non-harmony modules\n\n      /******/\n\n\n      __webpack_require__.n = function (module) {\n        /******/\n        var getter = module && module.__esModule ?\n        /******/\n        function getDefault() {\n          return module['default'];\n        } :\n        /******/\n        function getModuleExports() {\n          return module;\n        };\n        /******/\n\n        __webpack_require__.d(getter, 'a', getter);\n        /******/\n\n\n        return getter;\n        /******/\n      };\n      /******/\n\n      /******/\n      // Object.prototype.hasOwnProperty.call\n\n      /******/\n\n\n      __webpack_require__.o = function (object, property) {\n        return Object.prototype.hasOwnProperty.call(object, property);\n      };\n      /******/\n\n      /******/\n      // __webpack_public_path__\n\n      /******/\n\n\n      __webpack_require__.p = \"\";\n      /******/\n\n      /******/\n\n      /******/\n      // Load entry module and return exports\n\n      /******/\n\n      return __webpack_require__(__webpack_require__.s = 53);\n      /******/\n    }(\n    /************************************************************************/\n\n    /******/\n    {\n      /***/\n      0:\n      /***/\n      function (module, exports) {\n        module.exports = __WEBPACK_EXTERNAL_MODULE__0__;\n        /***/\n      },\n\n      /***/\n      1:\n      /***/\n      function (module, __webpack_exports__, __webpack_require__) {\n        \"use strict\";\n        /* harmony import */\n\n        var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n        /* harmony import */\n\n\n        var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Renderer = /*#__PURE__*/function () {\n          function Renderer(markup, children, options, callback) {\n            _classCallCheck(this, Renderer);\n\n            this.markup = markup;\n            this.children = children;\n            this.options = options;\n            this.callback = callback;\n          }\n\n          _createClass(Renderer, [{\n            key: \"render\",\n            value: function render($parent) {\n              var $node = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this.markup);\n\n              if (this.options && this.options.contents) {\n                $node.html(this.options.contents);\n              }\n\n              if (this.options && this.options.className) {\n                $node.addClass(this.options.className);\n              }\n\n              if (this.options && this.options.data) {\n                jquery__WEBPACK_IMPORTED_MODULE_0___default.a.each(this.options.data, function (k, v) {\n                  $node.attr('data-' + k, v);\n                });\n              }\n\n              if (this.options && this.options.click) {\n                $node.on('click', this.options.click);\n              }\n\n              if (this.children) {\n                var $container = $node.find('.note-children-container');\n                this.children.forEach(function (child) {\n                  child.render($container.length ? $container : $node);\n                });\n              }\n\n              if (this.callback) {\n                this.callback($node, this.options);\n              }\n\n              if (this.options && this.options.callback) {\n                this.options.callback($node);\n              }\n\n              if ($parent) {\n                $parent.append($node);\n              }\n\n              return $node;\n            }\n          }]);\n\n          return Renderer;\n        }();\n        /* harmony default export */\n\n\n        __webpack_exports__[\"a\"] = {\n          create: function create(markup, callback) {\n            return function () {\n              var options = _typeof(arguments[1]) === 'object' ? arguments[1] : arguments[0];\n              var children = Array.isArray(arguments[0]) ? arguments[0] : [];\n\n              if (options && options.children) {\n                children = options.children;\n              }\n\n              return new Renderer(markup, children, options, callback);\n            };\n          }\n        };\n        /***/\n      },\n\n      /***/\n      2:\n      /***/\n      function (module, exports) {\n        /* WEBPACK VAR INJECTION */\n        (function (__webpack_amd_options__) {\n          /* globals __webpack_amd_options__ */\n          module.exports = __webpack_amd_options__;\n          /* WEBPACK VAR INJECTION */\n        }).call(this, {});\n        /***/\n      },\n\n      /***/\n      3:\n      /***/\n      function (module, __webpack_exports__, __webpack_require__) {\n        \"use strict\"; // EXTERNAL MODULE: external {\"root\":\"jQuery\",\"commonjs2\":\"jquery\",\"commonjs\":\"jquery\",\"amd\":\"jquery\"}\n\n        var external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_ = __webpack_require__(0);\n\n        var external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default = /*#__PURE__*/__webpack_require__.n(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_); // CONCATENATED MODULE: ./src/js/base/summernote-en-US.js\n\n\n        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote || {\n          lang: {}\n        };\n        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.lang, {\n          'en-US': {\n            font: {\n              bold: 'Bold',\n              italic: 'Italic',\n              underline: 'Underline',\n              clear: 'Remove Font Style',\n              height: 'Line Height',\n              name: 'Font Family',\n              strikethrough: 'Strikethrough',\n              subscript: 'Subscript',\n              superscript: 'Superscript',\n              size: 'Font Size',\n              sizeunit: 'Font Size Unit'\n            },\n            image: {\n              image: 'Picture',\n              insert: 'Insert Image',\n              resizeFull: 'Resize full',\n              resizeHalf: 'Resize half',\n              resizeQuarter: 'Resize quarter',\n              resizeNone: 'Original size',\n              floatLeft: 'Float Left',\n              floatRight: 'Float Right',\n              floatNone: 'Remove float',\n              shapeRounded: 'Shape: Rounded',\n              shapeCircle: 'Shape: Circle',\n              shapeThumbnail: 'Shape: Thumbnail',\n              shapeNone: 'Shape: None',\n              dragImageHere: 'Drag image or text here',\n              dropImage: 'Drop image or Text',\n              selectFromFiles: 'Select from files',\n              maximumFileSize: 'Maximum file size',\n              maximumFileSizeError: 'Maximum file size exceeded.',\n              url: 'Image URL',\n              remove: 'Remove Image',\n              original: 'Original'\n            },\n            video: {\n              video: 'Video',\n              videoLink: 'Video Link',\n              insert: 'Insert Video',\n              url: 'Video URL',\n              providers: '(YouTube, Vimeo, Vine, Instagram, DailyMotion or Youku)'\n            },\n            link: {\n              link: 'Link',\n              insert: 'Insert Link',\n              unlink: 'Unlink',\n              edit: 'Edit',\n              textToDisplay: 'Text to display',\n              url: 'To what URL should this link go?',\n              openInNewWindow: 'Open in new window',\n              useProtocol: 'Use default protocol'\n            },\n            table: {\n              table: 'Table',\n              addRowAbove: 'Add row above',\n              addRowBelow: 'Add row below',\n              addColLeft: 'Add column left',\n              addColRight: 'Add column right',\n              delRow: 'Delete row',\n              delCol: 'Delete column',\n              delTable: 'Delete table'\n            },\n            hr: {\n              insert: 'Insert Horizontal Rule'\n            },\n            style: {\n              style: 'Style',\n              p: 'Normal',\n              blockquote: 'Quote',\n              pre: 'Code',\n              h1: 'Header 1',\n              h2: 'Header 2',\n              h3: 'Header 3',\n              h4: 'Header 4',\n              h5: 'Header 5',\n              h6: 'Header 6'\n            },\n            lists: {\n              unordered: 'Unordered list',\n              ordered: 'Ordered list'\n            },\n            options: {\n              help: 'Help',\n              fullscreen: 'Full Screen',\n              codeview: 'Code View'\n            },\n            paragraph: {\n              paragraph: 'Paragraph',\n              outdent: 'Outdent',\n              indent: 'Indent',\n              left: 'Align left',\n              center: 'Align center',\n              right: 'Align right',\n              justify: 'Justify full'\n            },\n            color: {\n              recent: 'Recent Color',\n              more: 'More Color',\n              background: 'Background Color',\n              foreground: 'Text Color',\n              transparent: 'Transparent',\n              setTransparent: 'Set transparent',\n              reset: 'Reset',\n              resetToDefault: 'Reset to default',\n              cpSelect: 'Select'\n            },\n            shortcut: {\n              shortcuts: 'Keyboard shortcuts',\n              close: 'Close',\n              textFormatting: 'Text formatting',\n              action: 'Action',\n              paragraphFormatting: 'Paragraph formatting',\n              documentStyle: 'Document Style',\n              extraKeys: 'Extra keys'\n            },\n            help: {\n              'escape': 'Escape',\n              'insertParagraph': 'Insert Paragraph',\n              'undo': 'Undo the last command',\n              'redo': 'Redo the last command',\n              'tab': 'Tab',\n              'untab': 'Untab',\n              'bold': 'Set a bold style',\n              'italic': 'Set a italic style',\n              'underline': 'Set a underline style',\n              'strikethrough': 'Set a strikethrough style',\n              'removeFormat': 'Clean a style',\n              'justifyLeft': 'Set left align',\n              'justifyCenter': 'Set center align',\n              'justifyRight': 'Set right align',\n              'justifyFull': 'Set full align',\n              'insertUnorderedList': 'Toggle unordered list',\n              'insertOrderedList': 'Toggle ordered list',\n              'outdent': 'Outdent on current paragraph',\n              'indent': 'Indent on current paragraph',\n              'formatPara': 'Change current block\\'s format as a paragraph(P tag)',\n              'formatH1': 'Change current block\\'s format as H1',\n              'formatH2': 'Change current block\\'s format as H2',\n              'formatH3': 'Change current block\\'s format as H3',\n              'formatH4': 'Change current block\\'s format as H4',\n              'formatH5': 'Change current block\\'s format as H5',\n              'formatH6': 'Change current block\\'s format as H6',\n              'insertHorizontalRule': 'Insert horizontal rule',\n              'linkDialog.show': 'Show Link Dialog'\n            },\n            history: {\n              undo: 'Undo',\n              redo: 'Redo'\n            },\n            specialChar: {\n              specialChar: 'SPECIAL CHARACTERS',\n              select: 'Select Special characters'\n            },\n            output: {\n              noSelection: 'No Selection Made!'\n            }\n          }\n        }); // CONCATENATED MODULE: ./src/js/base/core/env.js\n\n        var isSupportAmd = typeof define === 'function' && __webpack_require__(2); // eslint-disable-line\n\n        /**\n         * returns whether font is installed or not.\n         *\n         * @param {String} fontName\n         * @return {Boolean}\n         */\n\n\n        var genericFontFamilies = ['sans-serif', 'serif', 'monospace', 'cursive', 'fantasy'];\n\n        function validFontName(fontName) {\n          return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.inArray(fontName.toLowerCase(), genericFontFamilies) === -1 ? \"'\".concat(fontName, \"'\") : fontName;\n        }\n\n        function env_isFontInstalled(fontName) {\n          var testFontName = fontName === 'Comic Sans MS' ? 'Courier New' : 'Comic Sans MS';\n          var testText = 'mmmmmmmmmmwwwww';\n          var testSize = '200px';\n          var canvas = document.createElement('canvas');\n          var context = canvas.getContext('2d');\n          context.font = testSize + \" '\" + testFontName + \"'\";\n          var originalWidth = context.measureText(testText).width;\n          context.font = testSize + ' ' + validFontName(fontName) + ', \"' + testFontName + '\"';\n          var width = context.measureText(testText).width;\n          return originalWidth !== width;\n        }\n\n        var userAgent = navigator.userAgent;\n        var isMSIE = /MSIE|Trident/i.test(userAgent);\n        var browserVersion;\n\n        if (isMSIE) {\n          var matches = /MSIE (\\d+[.]\\d+)/.exec(userAgent);\n\n          if (matches) {\n            browserVersion = parseFloat(matches[1]);\n          }\n\n          matches = /Trident\\/.*rv:([0-9]{1,}[.0-9]{0,})/.exec(userAgent);\n\n          if (matches) {\n            browserVersion = parseFloat(matches[1]);\n          }\n        }\n\n        var isEdge = /Edge\\/\\d+/.test(userAgent);\n        var isSupportTouch = 'ontouchstart' in window || navigator.MaxTouchPoints > 0 || navigator.msMaxTouchPoints > 0; // [workaround] IE doesn't have input events for contentEditable\n        // - see: https://goo.gl/4bfIvA\n\n        var inputEventName = isMSIE ? 'DOMCharacterDataModified DOMSubtreeModified DOMNodeInserted' : 'input';\n        /**\n         * @class core.env\n         *\n         * Object which check platform and agent\n         *\n         * @singleton\n         * @alternateClassName env\n         */\n\n        /* harmony default export */\n\n        var env = {\n          isMac: navigator.appVersion.indexOf('Mac') > -1,\n          isMSIE: isMSIE,\n          isEdge: isEdge,\n          isFF: !isEdge && /firefox/i.test(userAgent),\n          isPhantom: /PhantomJS/i.test(userAgent),\n          isWebkit: !isEdge && /webkit/i.test(userAgent),\n          isChrome: !isEdge && /chrome/i.test(userAgent),\n          isSafari: !isEdge && /safari/i.test(userAgent) && !/chrome/i.test(userAgent),\n          browserVersion: browserVersion,\n          jqueryVersion: parseFloat(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.fn.jquery),\n          isSupportAmd: isSupportAmd,\n          isSupportTouch: isSupportTouch,\n          isFontInstalled: env_isFontInstalled,\n          isW3CRangeSupport: !!document.createRange,\n          inputEventName: inputEventName,\n          genericFontFamilies: genericFontFamilies,\n          validFontName: validFontName\n        }; // CONCATENATED MODULE: ./src/js/base/core/func.js\n\n        /**\n         * @class core.func\n         *\n         * func utils (for high-order func's arg)\n         *\n         * @singleton\n         * @alternateClassName func\n         */\n\n        function eq(itemA) {\n          return function (itemB) {\n            return itemA === itemB;\n          };\n        }\n\n        function eq2(itemA, itemB) {\n          return itemA === itemB;\n        }\n\n        function peq2(propName) {\n          return function (itemA, itemB) {\n            return itemA[propName] === itemB[propName];\n          };\n        }\n\n        function ok() {\n          return true;\n        }\n\n        function fail() {\n          return false;\n        }\n\n        function not(f) {\n          return function () {\n            return !f.apply(f, arguments);\n          };\n        }\n\n        function and(fA, fB) {\n          return function (item) {\n            return fA(item) && fB(item);\n          };\n        }\n\n        function func_self(a) {\n          return a;\n        }\n\n        function func_invoke(obj, method) {\n          return function () {\n            return obj[method].apply(obj, arguments);\n          };\n        }\n\n        var idCounter = 0;\n        /**\n         * reset globally-unique id\n         *\n         */\n\n        function resetUniqueId() {\n          idCounter = 0;\n        }\n        /**\n         * generate a globally-unique id\n         *\n         * @param {String} [prefix]\n         */\n\n\n        function uniqueId(prefix) {\n          var id = ++idCounter + '';\n          return prefix ? prefix + id : id;\n        }\n        /**\n         * returns bnd (bounds) from rect\n         *\n         * - IE Compatibility Issue: http://goo.gl/sRLOAo\n         * - Scroll Issue: http://goo.gl/sNjUc\n         *\n         * @param {Rect} rect\n         * @return {Object} bounds\n         * @return {Number} bounds.top\n         * @return {Number} bounds.left\n         * @return {Number} bounds.width\n         * @return {Number} bounds.height\n         */\n\n\n        function rect2bnd(rect) {\n          var $document = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);\n          return {\n            top: rect.top + $document.scrollTop(),\n            left: rect.left + $document.scrollLeft(),\n            width: rect.right - rect.left,\n            height: rect.bottom - rect.top\n          };\n        }\n        /**\n         * returns a copy of the object where the keys have become the values and the values the keys.\n         * @param {Object} obj\n         * @return {Object}\n         */\n\n\n        function invertObject(obj) {\n          var inverted = {};\n\n          for (var key in obj) {\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n              inverted[obj[key]] = key;\n            }\n          }\n\n          return inverted;\n        }\n        /**\n         * @param {String} namespace\n         * @param {String} [prefix]\n         * @return {String}\n         */\n\n\n        function namespaceToCamel(namespace, prefix) {\n          prefix = prefix || '';\n          return prefix + namespace.split('.').map(function (name) {\n            return name.substring(0, 1).toUpperCase() + name.substring(1);\n          }).join('');\n        }\n        /**\n         * Returns a function, that, as long as it continues to be invoked, will not\n         * be triggered. The function will be called after it stops being called for\n         * N milliseconds. If `immediate` is passed, trigger the function on the\n         * leading edge, instead of the trailing.\n         * @param {Function} func\n         * @param {Number} wait\n         * @param {Boolean} immediate\n         * @return {Function}\n         */\n\n\n        function debounce(func, wait, immediate) {\n          var timeout;\n          return function () {\n            var context = this;\n            var args = arguments;\n\n            var later = function later() {\n              timeout = null;\n\n              if (!immediate) {\n                func.apply(context, args);\n              }\n            };\n\n            var callNow = immediate && !timeout;\n            clearTimeout(timeout);\n            timeout = setTimeout(later, wait);\n\n            if (callNow) {\n              func.apply(context, args);\n            }\n          };\n        }\n        /**\n         *\n         * @param {String} url\n         * @return {Boolean}\n         */\n\n\n        function isValidUrl(url) {\n          var expression = /[-a-zA-Z0-9@:%._\\+~#=]{2,256}\\.[a-z]{2,6}\\b([-a-zA-Z0-9@:%_\\+.~#?&//=]*)/gi;\n          return expression.test(url);\n        }\n        /* harmony default export */\n\n\n        var func = {\n          eq: eq,\n          eq2: eq2,\n          peq2: peq2,\n          ok: ok,\n          fail: fail,\n          self: func_self,\n          not: not,\n          and: and,\n          invoke: func_invoke,\n          resetUniqueId: resetUniqueId,\n          uniqueId: uniqueId,\n          rect2bnd: rect2bnd,\n          invertObject: invertObject,\n          namespaceToCamel: namespaceToCamel,\n          debounce: debounce,\n          isValidUrl: isValidUrl\n        }; // CONCATENATED MODULE: ./src/js/base/core/lists.js\n\n        /**\n         * returns the first item of an array.\n         *\n         * @param {Array} array\n         */\n\n        function lists_head(array) {\n          return array[0];\n        }\n        /**\n         * returns the last item of an array.\n         *\n         * @param {Array} array\n         */\n\n\n        function lists_last(array) {\n          return array[array.length - 1];\n        }\n        /**\n         * returns everything but the last entry of the array.\n         *\n         * @param {Array} array\n         */\n\n\n        function initial(array) {\n          return array.slice(0, array.length - 1);\n        }\n        /**\n         * returns the rest of the items in an array.\n         *\n         * @param {Array} array\n         */\n\n\n        function tail(array) {\n          return array.slice(1);\n        }\n        /**\n         * returns item of array\n         */\n\n\n        function find(array, pred) {\n          for (var idx = 0, len = array.length; idx < len; idx++) {\n            var item = array[idx];\n\n            if (pred(item)) {\n              return item;\n            }\n          }\n        }\n        /**\n         * returns true if all of the values in the array pass the predicate truth test.\n         */\n\n\n        function lists_all(array, pred) {\n          for (var idx = 0, len = array.length; idx < len; idx++) {\n            if (!pred(array[idx])) {\n              return false;\n            }\n          }\n\n          return true;\n        }\n        /**\n         * returns true if the value is present in the list.\n         */\n\n\n        function contains(array, item) {\n          if (array && array.length && item) {\n            if (array.indexOf) {\n              return array.indexOf(item) !== -1;\n            } else if (array.contains) {\n              // `DOMTokenList` doesn't implement `.indexOf`, but it implements `.contains`\n              return array.contains(item);\n            }\n          }\n\n          return false;\n        }\n        /**\n         * get sum from a list\n         *\n         * @param {Array} array - array\n         * @param {Function} fn - iterator\n         */\n\n\n        function sum(array, fn) {\n          fn = fn || func.self;\n          return array.reduce(function (memo, v) {\n            return memo + fn(v);\n          }, 0);\n        }\n        /**\n         * returns a copy of the collection with array type.\n         * @param {Collection} collection - collection eg) node.childNodes, ...\n         */\n\n\n        function from(collection) {\n          var result = [];\n          var length = collection.length;\n          var idx = -1;\n\n          while (++idx < length) {\n            result[idx] = collection[idx];\n          }\n\n          return result;\n        }\n        /**\n         * returns whether list is empty or not\n         */\n\n\n        function lists_isEmpty(array) {\n          return !array || !array.length;\n        }\n        /**\n         * cluster elements by predicate function.\n         *\n         * @param {Array} array - array\n         * @param {Function} fn - predicate function for cluster rule\n         * @param {Array[]}\n         */\n\n\n        function clusterBy(array, fn) {\n          if (!array.length) {\n            return [];\n          }\n\n          var aTail = tail(array);\n          return aTail.reduce(function (memo, v) {\n            var aLast = lists_last(memo);\n\n            if (fn(lists_last(aLast), v)) {\n              aLast[aLast.length] = v;\n            } else {\n              memo[memo.length] = [v];\n            }\n\n            return memo;\n          }, [[lists_head(array)]]);\n        }\n        /**\n         * returns a copy of the array with all false values removed\n         *\n         * @param {Array} array - array\n         * @param {Function} fn - predicate function for cluster rule\n         */\n\n\n        function compact(array) {\n          var aResult = [];\n\n          for (var idx = 0, len = array.length; idx < len; idx++) {\n            if (array[idx]) {\n              aResult.push(array[idx]);\n            }\n          }\n\n          return aResult;\n        }\n        /**\n         * produces a duplicate-free version of the array\n         *\n         * @param {Array} array\n         */\n\n\n        function unique(array) {\n          var results = [];\n\n          for (var idx = 0, len = array.length; idx < len; idx++) {\n            if (!contains(results, array[idx])) {\n              results.push(array[idx]);\n            }\n          }\n\n          return results;\n        }\n        /**\n         * returns next item.\n         * @param {Array} array\n         */\n\n\n        function lists_next(array, item) {\n          if (array && array.length && item) {\n            var idx = array.indexOf(item);\n            return idx === -1 ? null : array[idx + 1];\n          }\n\n          return null;\n        }\n        /**\n         * returns prev item.\n         * @param {Array} array\n         */\n\n\n        function prev(array, item) {\n          if (array && array.length && item) {\n            var idx = array.indexOf(item);\n            return idx === -1 ? null : array[idx - 1];\n          }\n\n          return null;\n        }\n        /**\n         * @class core.list\n         *\n         * list utils\n         *\n         * @singleton\n         * @alternateClassName list\n         */\n\n        /* harmony default export */\n\n\n        var lists = {\n          head: lists_head,\n          last: lists_last,\n          initial: initial,\n          tail: tail,\n          prev: prev,\n          next: lists_next,\n          find: find,\n          contains: contains,\n          all: lists_all,\n          sum: sum,\n          from: from,\n          isEmpty: lists_isEmpty,\n          clusterBy: clusterBy,\n          compact: compact,\n          unique: unique\n        }; // CONCATENATED MODULE: ./src/js/base/core/dom.js\n\n        var NBSP_CHAR = String.fromCharCode(160);\n        var ZERO_WIDTH_NBSP_CHAR = \"\\uFEFF\";\n        /**\n         * @method isEditable\n         *\n         * returns whether node is `note-editable` or not.\n         *\n         * @param {Node} node\n         * @return {Boolean}\n         */\n\n        function isEditable(node) {\n          return node && external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).hasClass('note-editable');\n        }\n        /**\n         * @method isControlSizing\n         *\n         * returns whether node is `note-control-sizing` or not.\n         *\n         * @param {Node} node\n         * @return {Boolean}\n         */\n\n\n        function isControlSizing(node) {\n          return node && external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).hasClass('note-control-sizing');\n        }\n        /**\n         * @method makePredByNodeName\n         *\n         * returns predicate which judge whether nodeName is same\n         *\n         * @param {String} nodeName\n         * @return {Function}\n         */\n\n\n        function makePredByNodeName(nodeName) {\n          nodeName = nodeName.toUpperCase();\n          return function (node) {\n            return node && node.nodeName.toUpperCase() === nodeName;\n          };\n        }\n        /**\n         * @method isText\n         *\n         *\n         *\n         * @param {Node} node\n         * @return {Boolean} true if node's type is text(3)\n         */\n\n\n        function isText(node) {\n          return node && node.nodeType === 3;\n        }\n        /**\n         * @method isElement\n         *\n         *\n         *\n         * @param {Node} node\n         * @return {Boolean} true if node's type is element(1)\n         */\n\n\n        function isElement(node) {\n          return node && node.nodeType === 1;\n        }\n        /**\n         * ex) br, col, embed, hr, img, input, ...\n         * @see http://www.w3.org/html/wg/drafts/html/master/syntax.html#void-elements\n         */\n\n\n        function isVoid(node) {\n          return node && /^BR|^IMG|^HR|^IFRAME|^BUTTON|^INPUT|^AUDIO|^VIDEO|^EMBED/.test(node.nodeName.toUpperCase());\n        }\n\n        function isPara(node) {\n          if (isEditable(node)) {\n            return false;\n          } // Chrome(v31.0), FF(v25.0.1) use DIV for paragraph\n\n\n          return node && /^DIV|^P|^LI|^H[1-7]/.test(node.nodeName.toUpperCase());\n        }\n\n        function isHeading(node) {\n          return node && /^H[1-7]/.test(node.nodeName.toUpperCase());\n        }\n\n        var isPre = makePredByNodeName('PRE');\n        var isLi = makePredByNodeName('LI');\n\n        function isPurePara(node) {\n          return isPara(node) && !isLi(node);\n        }\n\n        var isTable = makePredByNodeName('TABLE');\n        var isData = makePredByNodeName('DATA');\n\n        function dom_isInline(node) {\n          return !isBodyContainer(node) && !isList(node) && !isHr(node) && !isPara(node) && !isTable(node) && !isBlockquote(node) && !isData(node);\n        }\n\n        function isList(node) {\n          return node && /^UL|^OL/.test(node.nodeName.toUpperCase());\n        }\n\n        var isHr = makePredByNodeName('HR');\n\n        function dom_isCell(node) {\n          return node && /^TD|^TH/.test(node.nodeName.toUpperCase());\n        }\n\n        var isBlockquote = makePredByNodeName('BLOCKQUOTE');\n\n        function isBodyContainer(node) {\n          return dom_isCell(node) || isBlockquote(node) || isEditable(node);\n        }\n\n        var isAnchor = makePredByNodeName('A');\n\n        function isParaInline(node) {\n          return dom_isInline(node) && !!dom_ancestor(node, isPara);\n        }\n\n        function isBodyInline(node) {\n          return dom_isInline(node) && !dom_ancestor(node, isPara);\n        }\n\n        var isBody = makePredByNodeName('BODY');\n        /**\n         * returns whether nodeB is closest sibling of nodeA\n         *\n         * @param {Node} nodeA\n         * @param {Node} nodeB\n         * @return {Boolean}\n         */\n\n        function isClosestSibling(nodeA, nodeB) {\n          return nodeA.nextSibling === nodeB || nodeA.previousSibling === nodeB;\n        }\n        /**\n         * returns array of closest siblings with node\n         *\n         * @param {Node} node\n         * @param {function} [pred] - predicate function\n         * @return {Node[]}\n         */\n\n\n        function withClosestSiblings(node, pred) {\n          pred = pred || func.ok;\n          var siblings = [];\n\n          if (node.previousSibling && pred(node.previousSibling)) {\n            siblings.push(node.previousSibling);\n          }\n\n          siblings.push(node);\n\n          if (node.nextSibling && pred(node.nextSibling)) {\n            siblings.push(node.nextSibling);\n          }\n\n          return siblings;\n        }\n        /**\n         * blank HTML for cursor position\n         * - [workaround] old IE only works with &nbsp;\n         * - [workaround] IE11 and other browser works with bogus br\n         */\n\n\n        var blankHTML = env.isMSIE && env.browserVersion < 11 ? '&nbsp;' : '<br>';\n        /**\n         * @method nodeLength\n         *\n         * returns #text's text size or element's childNodes size\n         *\n         * @param {Node} node\n         */\n\n        function nodeLength(node) {\n          if (isText(node)) {\n            return node.nodeValue.length;\n          }\n\n          if (node) {\n            return node.childNodes.length;\n          }\n\n          return 0;\n        }\n        /**\n         * returns whether deepest child node is empty or not.\n         *\n         * @param {Node} node\n         * @return {Boolean}\n         */\n\n\n        function deepestChildIsEmpty(node) {\n          do {\n            if (node.firstElementChild === null || node.firstElementChild.innerHTML === '') break;\n          } while (node = node.firstElementChild);\n\n          return dom_isEmpty(node);\n        }\n        /**\n         * returns whether node is empty or not.\n         *\n         * @param {Node} node\n         * @return {Boolean}\n         */\n\n\n        function dom_isEmpty(node) {\n          var len = nodeLength(node);\n\n          if (len === 0) {\n            return true;\n          } else if (!isText(node) && len === 1 && node.innerHTML === blankHTML) {\n            // ex) <p><br></p>, <span><br></span>\n            return true;\n          } else if (lists.all(node.childNodes, isText) && node.innerHTML === '') {\n            // ex) <p></p>, <span></span>\n            return true;\n          }\n\n          return false;\n        }\n        /**\n         * padding blankHTML if node is empty (for cursor position)\n         */\n\n\n        function paddingBlankHTML(node) {\n          if (!isVoid(node) && !nodeLength(node)) {\n            node.innerHTML = blankHTML;\n          }\n        }\n        /**\n         * find nearest ancestor predicate hit\n         *\n         * @param {Node} node\n         * @param {Function} pred - predicate function\n         */\n\n\n        function dom_ancestor(node, pred) {\n          while (node) {\n            if (pred(node)) {\n              return node;\n            }\n\n            if (isEditable(node)) {\n              break;\n            }\n\n            node = node.parentNode;\n          }\n\n          return null;\n        }\n        /**\n         * find nearest ancestor only single child blood line and predicate hit\n         *\n         * @param {Node} node\n         * @param {Function} pred - predicate function\n         */\n\n\n        function singleChildAncestor(node, pred) {\n          node = node.parentNode;\n\n          while (node) {\n            if (nodeLength(node) !== 1) {\n              break;\n            }\n\n            if (pred(node)) {\n              return node;\n            }\n\n            if (isEditable(node)) {\n              break;\n            }\n\n            node = node.parentNode;\n          }\n\n          return null;\n        }\n        /**\n         * returns new array of ancestor nodes (until predicate hit).\n         *\n         * @param {Node} node\n         * @param {Function} [optional] pred - predicate function\n         */\n\n\n        function listAncestor(node, pred) {\n          pred = pred || func.fail;\n          var ancestors = [];\n          dom_ancestor(node, function (el) {\n            if (!isEditable(el)) {\n              ancestors.push(el);\n            }\n\n            return pred(el);\n          });\n          return ancestors;\n        }\n        /**\n         * find farthest ancestor predicate hit\n         */\n\n\n        function lastAncestor(node, pred) {\n          var ancestors = listAncestor(node);\n          return lists.last(ancestors.filter(pred));\n        }\n        /**\n         * returns common ancestor node between two nodes.\n         *\n         * @param {Node} nodeA\n         * @param {Node} nodeB\n         */\n\n\n        function dom_commonAncestor(nodeA, nodeB) {\n          var ancestors = listAncestor(nodeA);\n\n          for (var n = nodeB; n; n = n.parentNode) {\n            if (ancestors.indexOf(n) > -1) return n;\n          }\n\n          return null; // difference document area\n        }\n        /**\n         * listing all previous siblings (until predicate hit).\n         *\n         * @param {Node} node\n         * @param {Function} [optional] pred - predicate function\n         */\n\n\n        function listPrev(node, pred) {\n          pred = pred || func.fail;\n          var nodes = [];\n\n          while (node) {\n            if (pred(node)) {\n              break;\n            }\n\n            nodes.push(node);\n            node = node.previousSibling;\n          }\n\n          return nodes;\n        }\n        /**\n         * listing next siblings (until predicate hit).\n         *\n         * @param {Node} node\n         * @param {Function} [pred] - predicate function\n         */\n\n\n        function listNext(node, pred) {\n          pred = pred || func.fail;\n          var nodes = [];\n\n          while (node) {\n            if (pred(node)) {\n              break;\n            }\n\n            nodes.push(node);\n            node = node.nextSibling;\n          }\n\n          return nodes;\n        }\n        /**\n         * listing descendant nodes\n         *\n         * @param {Node} node\n         * @param {Function} [pred] - predicate function\n         */\n\n\n        function listDescendant(node, pred) {\n          var descendants = [];\n          pred = pred || func.ok; // start DFS(depth first search) with node\n\n          (function fnWalk(current) {\n            if (node !== current && pred(current)) {\n              descendants.push(current);\n            }\n\n            for (var idx = 0, len = current.childNodes.length; idx < len; idx++) {\n              fnWalk(current.childNodes[idx]);\n            }\n          })(node);\n\n          return descendants;\n        }\n        /**\n         * wrap node with new tag.\n         *\n         * @param {Node} node\n         * @param {Node} tagName of wrapper\n         * @return {Node} - wrapper\n         */\n\n\n        function wrap(node, wrapperName) {\n          var parent = node.parentNode;\n          var wrapper = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<' + wrapperName + '>')[0];\n          parent.insertBefore(wrapper, node);\n          wrapper.appendChild(node);\n          return wrapper;\n        }\n        /**\n         * insert node after preceding\n         *\n         * @param {Node} node\n         * @param {Node} preceding - predicate function\n         */\n\n\n        function insertAfter(node, preceding) {\n          var next = preceding.nextSibling;\n          var parent = preceding.parentNode;\n\n          if (next) {\n            parent.insertBefore(node, next);\n          } else {\n            parent.appendChild(node);\n          }\n\n          return node;\n        }\n        /**\n         * append elements.\n         *\n         * @param {Node} node\n         * @param {Collection} aChild\n         */\n\n\n        function appendChildNodes(node, aChild) {\n          external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(aChild, function (idx, child) {\n            node.appendChild(child);\n          });\n          return node;\n        }\n        /**\n         * returns whether boundaryPoint is left edge or not.\n         *\n         * @param {BoundaryPoint} point\n         * @return {Boolean}\n         */\n\n\n        function isLeftEdgePoint(point) {\n          return point.offset === 0;\n        }\n        /**\n         * returns whether boundaryPoint is right edge or not.\n         *\n         * @param {BoundaryPoint} point\n         * @return {Boolean}\n         */\n\n\n        function isRightEdgePoint(point) {\n          return point.offset === nodeLength(point.node);\n        }\n        /**\n         * returns whether boundaryPoint is edge or not.\n         *\n         * @param {BoundaryPoint} point\n         * @return {Boolean}\n         */\n\n\n        function isEdgePoint(point) {\n          return isLeftEdgePoint(point) || isRightEdgePoint(point);\n        }\n        /**\n         * returns whether node is left edge of ancestor or not.\n         *\n         * @param {Node} node\n         * @param {Node} ancestor\n         * @return {Boolean}\n         */\n\n\n        function dom_isLeftEdgeOf(node, ancestor) {\n          while (node && node !== ancestor) {\n            if (dom_position(node) !== 0) {\n              return false;\n            }\n\n            node = node.parentNode;\n          }\n\n          return true;\n        }\n        /**\n         * returns whether node is right edge of ancestor or not.\n         *\n         * @param {Node} node\n         * @param {Node} ancestor\n         * @return {Boolean}\n         */\n\n\n        function isRightEdgeOf(node, ancestor) {\n          if (!ancestor) {\n            return false;\n          }\n\n          while (node && node !== ancestor) {\n            if (dom_position(node) !== nodeLength(node.parentNode) - 1) {\n              return false;\n            }\n\n            node = node.parentNode;\n          }\n\n          return true;\n        }\n        /**\n         * returns whether point is left edge of ancestor or not.\n         * @param {BoundaryPoint} point\n         * @param {Node} ancestor\n         * @return {Boolean}\n         */\n\n\n        function isLeftEdgePointOf(point, ancestor) {\n          return isLeftEdgePoint(point) && dom_isLeftEdgeOf(point.node, ancestor);\n        }\n        /**\n         * returns whether point is right edge of ancestor or not.\n         * @param {BoundaryPoint} point\n         * @param {Node} ancestor\n         * @return {Boolean}\n         */\n\n\n        function isRightEdgePointOf(point, ancestor) {\n          return isRightEdgePoint(point) && isRightEdgeOf(point.node, ancestor);\n        }\n        /**\n         * returns offset from parent.\n         *\n         * @param {Node} node\n         */\n\n\n        function dom_position(node) {\n          var offset = 0;\n\n          while (node = node.previousSibling) {\n            offset += 1;\n          }\n\n          return offset;\n        }\n\n        function hasChildren(node) {\n          return !!(node && node.childNodes && node.childNodes.length);\n        }\n        /**\n         * returns previous boundaryPoint\n         *\n         * @param {BoundaryPoint} point\n         * @param {Boolean} isSkipInnerOffset\n         * @return {BoundaryPoint}\n         */\n\n\n        function dom_prevPoint(point, isSkipInnerOffset) {\n          var node;\n          var offset;\n\n          if (point.offset === 0) {\n            if (isEditable(point.node)) {\n              return null;\n            }\n\n            node = point.node.parentNode;\n            offset = dom_position(point.node);\n          } else if (hasChildren(point.node)) {\n            node = point.node.childNodes[point.offset - 1];\n            offset = nodeLength(node);\n          } else {\n            node = point.node;\n            offset = isSkipInnerOffset ? 0 : point.offset - 1;\n          }\n\n          return {\n            node: node,\n            offset: offset\n          };\n        }\n        /**\n         * returns next boundaryPoint\n         *\n         * @param {BoundaryPoint} point\n         * @param {Boolean} isSkipInnerOffset\n         * @return {BoundaryPoint}\n         */\n\n\n        function dom_nextPoint(point, isSkipInnerOffset) {\n          var node, offset;\n\n          if (nodeLength(point.node) === point.offset) {\n            if (isEditable(point.node)) {\n              return null;\n            }\n\n            var nextTextNode = getNextTextNode(point.node);\n\n            if (nextTextNode) {\n              node = nextTextNode;\n              offset = 0;\n            } else {\n              node = point.node.parentNode;\n              offset = dom_position(point.node) + 1;\n            }\n          } else if (hasChildren(point.node)) {\n            node = point.node.childNodes[point.offset];\n            offset = 0;\n          } else {\n            node = point.node;\n            offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;\n          }\n\n          return {\n            node: node,\n            offset: offset\n          };\n        }\n        /**\n         * returns next boundaryPoint with empty node\n         *\n         * @param {BoundaryPoint} point\n         * @param {Boolean} isSkipInnerOffset\n         * @return {BoundaryPoint}\n         */\n\n\n        function nextPointWithEmptyNode(point, isSkipInnerOffset) {\n          var node, offset; // if node is empty string node, return current node's sibling.\n\n          if (dom_isEmpty(point.node)) {\n            node = point.node.nextSibling;\n            offset = 0;\n            return {\n              node: node,\n              offset: offset\n            };\n          }\n\n          if (nodeLength(point.node) === point.offset) {\n            if (isEditable(point.node)) {\n              return null;\n            }\n\n            var nextTextNode = getNextTextNode(point.node);\n\n            if (nextTextNode) {\n              node = nextTextNode;\n              offset = 0;\n            } else {\n              node = point.node.parentNode;\n              offset = dom_position(point.node) + 1;\n            } // if next node is editable, return current node's sibling node.\n\n\n            if (isEditable(node)) {\n              node = point.node.nextSibling;\n              offset = 0;\n            }\n          } else if (hasChildren(point.node)) {\n            node = point.node.childNodes[point.offset];\n            offset = 0;\n\n            if (dom_isEmpty(node)) {\n              return null;\n            }\n          } else {\n            node = point.node;\n            offset = isSkipInnerOffset ? nodeLength(point.node) : point.offset + 1;\n\n            if (dom_isEmpty(node)) {\n              return null;\n            }\n          }\n\n          return {\n            node: node,\n            offset: offset\n          };\n        }\n        /*\n        * returns the next Text node index or 0 if not found.\n        */\n\n\n        function getNextTextNode(actual) {\n          if (!actual.nextSibling) return undefined;\n          if (actual.parent !== actual.nextSibling.parent) return undefined;\n          if (isText(actual.nextSibling)) return actual.nextSibling;\n          return getNextTextNode(actual.nextSibling);\n        }\n        /**\n         * returns whether pointA and pointB is same or not.\n         *\n         * @param {BoundaryPoint} pointA\n         * @param {BoundaryPoint} pointB\n         * @return {Boolean}\n         */\n\n\n        function isSamePoint(pointA, pointB) {\n          return pointA.node === pointB.node && pointA.offset === pointB.offset;\n        }\n        /**\n         * returns whether point is visible (can set cursor) or not.\n         *\n         * @param {BoundaryPoint} point\n         * @return {Boolean}\n         */\n\n\n        function isVisiblePoint(point) {\n          if (isText(point.node) || !hasChildren(point.node) || dom_isEmpty(point.node)) {\n            return true;\n          }\n\n          var leftNode = point.node.childNodes[point.offset - 1];\n          var rightNode = point.node.childNodes[point.offset];\n\n          if ((!leftNode || isVoid(leftNode)) && (!rightNode || isVoid(rightNode))) {\n            return true;\n          }\n\n          return false;\n        }\n        /**\n         * @method prevPointUtil\n         *\n         * @param {BoundaryPoint} point\n         * @param {Function} pred\n         * @return {BoundaryPoint}\n         */\n\n\n        function prevPointUntil(point, pred) {\n          while (point) {\n            if (pred(point)) {\n              return point;\n            }\n\n            point = dom_prevPoint(point);\n          }\n\n          return null;\n        }\n        /**\n         * @method nextPointUntil\n         *\n         * @param {BoundaryPoint} point\n         * @param {Function} pred\n         * @return {BoundaryPoint}\n         */\n\n\n        function nextPointUntil(point, pred) {\n          while (point) {\n            if (pred(point)) {\n              return point;\n            }\n\n            point = dom_nextPoint(point);\n          }\n\n          return null;\n        }\n        /**\n         * returns whether point has character or not.\n         *\n         * @param {Point} point\n         * @return {Boolean}\n         */\n\n\n        function isCharPoint(point) {\n          if (!isText(point.node)) {\n            return false;\n          }\n\n          var ch = point.node.nodeValue.charAt(point.offset - 1);\n          return ch && ch !== ' ' && ch !== NBSP_CHAR;\n        }\n        /**\n         * returns whether point has space or not.\n         *\n         * @param {Point} point\n         * @return {Boolean}\n         */\n\n\n        function isSpacePoint(point) {\n          if (!isText(point.node)) {\n            return false;\n          }\n\n          var ch = point.node.nodeValue.charAt(point.offset - 1);\n          return ch === ' ' || ch === NBSP_CHAR;\n        }\n        /**\n         * @method walkPoint\n         *\n         * @param {BoundaryPoint} startPoint\n         * @param {BoundaryPoint} endPoint\n         * @param {Function} handler\n         * @param {Boolean} isSkipInnerOffset\n         */\n\n\n        function walkPoint(startPoint, endPoint, handler, isSkipInnerOffset) {\n          var point = startPoint;\n\n          while (point) {\n            handler(point);\n\n            if (isSamePoint(point, endPoint)) {\n              break;\n            }\n\n            var isSkipOffset = isSkipInnerOffset && startPoint.node !== point.node && endPoint.node !== point.node;\n            point = nextPointWithEmptyNode(point, isSkipOffset);\n          }\n        }\n        /**\n         * @method makeOffsetPath\n         *\n         * return offsetPath(array of offset) from ancestor\n         *\n         * @param {Node} ancestor - ancestor node\n         * @param {Node} node\n         */\n\n\n        function makeOffsetPath(ancestor, node) {\n          var ancestors = listAncestor(node, func.eq(ancestor));\n          return ancestors.map(dom_position).reverse();\n        }\n        /**\n         * @method fromOffsetPath\n         *\n         * return element from offsetPath(array of offset)\n         *\n         * @param {Node} ancestor - ancestor node\n         * @param {array} offsets - offsetPath\n         */\n\n\n        function fromOffsetPath(ancestor, offsets) {\n          var current = ancestor;\n\n          for (var i = 0, len = offsets.length; i < len; i++) {\n            if (current.childNodes.length <= offsets[i]) {\n              current = current.childNodes[current.childNodes.length - 1];\n            } else {\n              current = current.childNodes[offsets[i]];\n            }\n          }\n\n          return current;\n        }\n        /**\n         * @method splitNode\n         *\n         * split element or #text\n         *\n         * @param {BoundaryPoint} point\n         * @param {Object} [options]\n         * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false\n         * @param {Boolean} [options.isNotSplitEdgePoint] - default: false\n         * @param {Boolean} [options.isDiscardEmptySplits] - default: false\n         * @return {Node} right node of boundaryPoint\n         */\n\n\n        function splitNode(point, options) {\n          var isSkipPaddingBlankHTML = options && options.isSkipPaddingBlankHTML;\n          var isNotSplitEdgePoint = options && options.isNotSplitEdgePoint;\n          var isDiscardEmptySplits = options && options.isDiscardEmptySplits;\n\n          if (isDiscardEmptySplits) {\n            isSkipPaddingBlankHTML = true;\n          } // edge case\n\n\n          if (isEdgePoint(point) && (isText(point.node) || isNotSplitEdgePoint)) {\n            if (isLeftEdgePoint(point)) {\n              return point.node;\n            } else if (isRightEdgePoint(point)) {\n              return point.node.nextSibling;\n            }\n          } // split #text\n\n\n          if (isText(point.node)) {\n            return point.node.splitText(point.offset);\n          } else {\n            var childNode = point.node.childNodes[point.offset];\n            var clone = insertAfter(point.node.cloneNode(false), point.node);\n            appendChildNodes(clone, listNext(childNode));\n\n            if (!isSkipPaddingBlankHTML) {\n              paddingBlankHTML(point.node);\n              paddingBlankHTML(clone);\n            }\n\n            if (isDiscardEmptySplits) {\n              if (dom_isEmpty(point.node)) {\n                remove(point.node);\n              }\n\n              if (dom_isEmpty(clone)) {\n                remove(clone);\n                return point.node.nextSibling;\n              }\n            }\n\n            return clone;\n          }\n        }\n        /**\n         * @method splitTree\n         *\n         * split tree by point\n         *\n         * @param {Node} root - split root\n         * @param {BoundaryPoint} point\n         * @param {Object} [options]\n         * @param {Boolean} [options.isSkipPaddingBlankHTML] - default: false\n         * @param {Boolean} [options.isNotSplitEdgePoint] - default: false\n         * @return {Node} right node of boundaryPoint\n         */\n\n\n        function splitTree(root, point, options) {\n          // ex) [#text, <span>, <p>]\n          var ancestors = listAncestor(point.node, func.eq(root));\n\n          if (!ancestors.length) {\n            return null;\n          } else if (ancestors.length === 1) {\n            return splitNode(point, options);\n          }\n\n          return ancestors.reduce(function (node, parent) {\n            if (node === point.node) {\n              node = splitNode(point, options);\n            }\n\n            return splitNode({\n              node: parent,\n              offset: node ? dom_position(node) : nodeLength(parent)\n            }, options);\n          });\n        }\n        /**\n         * split point\n         *\n         * @param {Point} point\n         * @param {Boolean} isInline\n         * @return {Object}\n         */\n\n\n        function splitPoint(point, isInline) {\n          // find splitRoot, container\n          //  - inline: splitRoot is a child of paragraph\n          //  - block: splitRoot is a child of bodyContainer\n          var pred = isInline ? isPara : isBodyContainer;\n          var ancestors = listAncestor(point.node, pred);\n          var topAncestor = lists.last(ancestors) || point.node;\n          var splitRoot, container;\n\n          if (pred(topAncestor)) {\n            splitRoot = ancestors[ancestors.length - 2];\n            container = topAncestor;\n          } else {\n            splitRoot = topAncestor;\n            container = splitRoot.parentNode;\n          } // if splitRoot is exists, split with splitTree\n\n\n          var pivot = splitRoot && splitTree(splitRoot, point, {\n            isSkipPaddingBlankHTML: isInline,\n            isNotSplitEdgePoint: isInline\n          }); // if container is point.node, find pivot with point.offset\n\n          if (!pivot && container === point.node) {\n            pivot = point.node.childNodes[point.offset];\n          }\n\n          return {\n            rightNode: pivot,\n            container: container\n          };\n        }\n\n        function dom_create(nodeName) {\n          return document.createElement(nodeName);\n        }\n\n        function createText(text) {\n          return document.createTextNode(text);\n        }\n        /**\n         * @method remove\n         *\n         * remove node, (isRemoveChild: remove child or not)\n         *\n         * @param {Node} node\n         * @param {Boolean} isRemoveChild\n         */\n\n\n        function remove(node, isRemoveChild) {\n          if (!node || !node.parentNode) {\n            return;\n          }\n\n          if (node.removeNode) {\n            return node.removeNode(isRemoveChild);\n          }\n\n          var parent = node.parentNode;\n\n          if (!isRemoveChild) {\n            var nodes = [];\n\n            for (var i = 0, len = node.childNodes.length; i < len; i++) {\n              nodes.push(node.childNodes[i]);\n            }\n\n            for (var _i = 0, _len = nodes.length; _i < _len; _i++) {\n              parent.insertBefore(nodes[_i], node);\n            }\n          }\n\n          parent.removeChild(node);\n        }\n        /**\n         * @method removeWhile\n         *\n         * @param {Node} node\n         * @param {Function} pred\n         */\n\n\n        function removeWhile(node, pred) {\n          while (node) {\n            if (isEditable(node) || !pred(node)) {\n              break;\n            }\n\n            var parent = node.parentNode;\n            remove(node);\n            node = parent;\n          }\n        }\n        /**\n         * @method replace\n         *\n         * replace node with provided nodeName\n         *\n         * @param {Node} node\n         * @param {String} nodeName\n         * @return {Node} - new node\n         */\n\n\n        function dom_replace(node, nodeName) {\n          if (node.nodeName.toUpperCase() === nodeName.toUpperCase()) {\n            return node;\n          }\n\n          var newNode = dom_create(nodeName);\n\n          if (node.style.cssText) {\n            newNode.style.cssText = node.style.cssText;\n          }\n\n          appendChildNodes(newNode, lists.from(node.childNodes));\n          insertAfter(newNode, node);\n          remove(node);\n          return newNode;\n        }\n\n        var isTextarea = makePredByNodeName('TEXTAREA');\n        /**\n         * @param {jQuery} $node\n         * @param {Boolean} [stripLinebreaks] - default: false\n         */\n\n        function dom_value($node, stripLinebreaks) {\n          var val = isTextarea($node[0]) ? $node.val() : $node.html();\n\n          if (stripLinebreaks) {\n            return val.replace(/[\\n\\r]/g, '');\n          }\n\n          return val;\n        }\n        /**\n         * @method html\n         *\n         * get the HTML contents of node\n         *\n         * @param {jQuery} $node\n         * @param {Boolean} [isNewlineOnBlock]\n         */\n\n\n        function dom_html($node, isNewlineOnBlock) {\n          var markup = dom_value($node);\n\n          if (isNewlineOnBlock) {\n            var regexTag = /<(\\/?)(\\b(?!!)[^>\\s]*)(.*?)(\\s*\\/?>)/g;\n            markup = markup.replace(regexTag, function (match, endSlash, name) {\n              name = name.toUpperCase();\n              var isEndOfInlineContainer = /^DIV|^TD|^TH|^P|^LI|^H[1-7]/.test(name) && !!endSlash;\n              var isBlockNode = /^BLOCKQUOTE|^TABLE|^TBODY|^TR|^HR|^UL|^OL/.test(name);\n              return match + (isEndOfInlineContainer || isBlockNode ? '\\n' : '');\n            });\n            markup = markup.trim();\n          }\n\n          return markup;\n        }\n\n        function posFromPlaceholder(placeholder) {\n          var $placeholder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(placeholder);\n          var pos = $placeholder.offset();\n          var height = $placeholder.outerHeight(true); // include margin\n\n          return {\n            left: pos.left,\n            top: pos.top + height\n          };\n        }\n\n        function attachEvents($node, events) {\n          Object.keys(events).forEach(function (key) {\n            $node.on(key, events[key]);\n          });\n        }\n\n        function detachEvents($node, events) {\n          Object.keys(events).forEach(function (key) {\n            $node.off(key, events[key]);\n          });\n        }\n        /**\n         * @method isCustomStyleTag\n         *\n         * assert if a node contains a \"note-styletag\" class,\n         * which implies that's a custom-made style tag node\n         *\n         * @param {Node} an HTML DOM node\n         */\n\n\n        function isCustomStyleTag(node) {\n          return node && !isText(node) && lists.contains(node.classList, 'note-styletag');\n        }\n        /* harmony default export */\n\n\n        var dom = {\n          /** @property {String} NBSP_CHAR */\n          NBSP_CHAR: NBSP_CHAR,\n\n          /** @property {String} ZERO_WIDTH_NBSP_CHAR */\n          ZERO_WIDTH_NBSP_CHAR: ZERO_WIDTH_NBSP_CHAR,\n\n          /** @property {String} blank */\n          blank: blankHTML,\n\n          /** @property {String} emptyPara */\n          emptyPara: \"<p>\".concat(blankHTML, \"</p>\"),\n          makePredByNodeName: makePredByNodeName,\n          isEditable: isEditable,\n          isControlSizing: isControlSizing,\n          isText: isText,\n          isElement: isElement,\n          isVoid: isVoid,\n          isPara: isPara,\n          isPurePara: isPurePara,\n          isHeading: isHeading,\n          isInline: dom_isInline,\n          isBlock: func.not(dom_isInline),\n          isBodyInline: isBodyInline,\n          isBody: isBody,\n          isParaInline: isParaInline,\n          isPre: isPre,\n          isList: isList,\n          isTable: isTable,\n          isData: isData,\n          isCell: dom_isCell,\n          isBlockquote: isBlockquote,\n          isBodyContainer: isBodyContainer,\n          isAnchor: isAnchor,\n          isDiv: makePredByNodeName('DIV'),\n          isLi: isLi,\n          isBR: makePredByNodeName('BR'),\n          isSpan: makePredByNodeName('SPAN'),\n          isB: makePredByNodeName('B'),\n          isU: makePredByNodeName('U'),\n          isS: makePredByNodeName('S'),\n          isI: makePredByNodeName('I'),\n          isImg: makePredByNodeName('IMG'),\n          isTextarea: isTextarea,\n          deepestChildIsEmpty: deepestChildIsEmpty,\n          isEmpty: dom_isEmpty,\n          isEmptyAnchor: func.and(isAnchor, dom_isEmpty),\n          isClosestSibling: isClosestSibling,\n          withClosestSiblings: withClosestSiblings,\n          nodeLength: nodeLength,\n          isLeftEdgePoint: isLeftEdgePoint,\n          isRightEdgePoint: isRightEdgePoint,\n          isEdgePoint: isEdgePoint,\n          isLeftEdgeOf: dom_isLeftEdgeOf,\n          isRightEdgeOf: isRightEdgeOf,\n          isLeftEdgePointOf: isLeftEdgePointOf,\n          isRightEdgePointOf: isRightEdgePointOf,\n          prevPoint: dom_prevPoint,\n          nextPoint: dom_nextPoint,\n          nextPointWithEmptyNode: nextPointWithEmptyNode,\n          isSamePoint: isSamePoint,\n          isVisiblePoint: isVisiblePoint,\n          prevPointUntil: prevPointUntil,\n          nextPointUntil: nextPointUntil,\n          isCharPoint: isCharPoint,\n          isSpacePoint: isSpacePoint,\n          walkPoint: walkPoint,\n          ancestor: dom_ancestor,\n          singleChildAncestor: singleChildAncestor,\n          listAncestor: listAncestor,\n          lastAncestor: lastAncestor,\n          listNext: listNext,\n          listPrev: listPrev,\n          listDescendant: listDescendant,\n          commonAncestor: dom_commonAncestor,\n          wrap: wrap,\n          insertAfter: insertAfter,\n          appendChildNodes: appendChildNodes,\n          position: dom_position,\n          hasChildren: hasChildren,\n          makeOffsetPath: makeOffsetPath,\n          fromOffsetPath: fromOffsetPath,\n          splitTree: splitTree,\n          splitPoint: splitPoint,\n          create: dom_create,\n          createText: createText,\n          remove: remove,\n          removeWhile: removeWhile,\n          replace: dom_replace,\n          html: dom_html,\n          value: dom_value,\n          posFromPlaceholder: posFromPlaceholder,\n          attachEvents: attachEvents,\n          detachEvents: detachEvents,\n          isCustomStyleTag: isCustomStyleTag\n        }; // CONCATENATED MODULE: ./src/js/base/Context.js\n\n        function _classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function _defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function _createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) _defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Context_Context = /*#__PURE__*/function () {\n          /**\n           * @param {jQuery} $note\n           * @param {Object} options\n           */\n          function Context($note, options) {\n            _classCallCheck(this, Context);\n\n            this.$note = $note;\n            this.memos = {};\n            this.modules = {};\n            this.layoutInfo = {};\n            this.options = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(true, {}, options); // init ui with options\n\n            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui_template(this.options);\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.initialize();\n          }\n          /**\n           * create layout and initialize modules and other resources\n           */\n\n\n          _createClass(Context, [{\n            key: \"initialize\",\n            value: function initialize() {\n              this.layoutInfo = this.ui.createLayout(this.$note);\n\n              this._initialize();\n\n              this.$note.hide();\n              return this;\n            }\n            /**\n             * destroy modules and other resources and remove layout\n             */\n\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this._destroy();\n\n              this.$note.removeData('summernote');\n              this.ui.removeLayout(this.$note, this.layoutInfo);\n            }\n            /**\n             * destory modules and other resources and initialize it again\n             */\n\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              var disabled = this.isDisabled();\n              this.code(dom.emptyPara);\n\n              this._destroy();\n\n              this._initialize();\n\n              if (disabled) {\n                this.disable();\n              }\n            }\n          }, {\n            key: \"_initialize\",\n            value: function _initialize() {\n              var _this = this; // set own id\n\n\n              this.options.id = func.uniqueId(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.now()); // set default container for tooltips, popovers, and dialogs\n\n              this.options.container = this.options.container || this.layoutInfo.editor; // add optional buttons\n\n              var buttons = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend({}, this.options.buttons);\n              Object.keys(buttons).forEach(function (key) {\n                _this.memo('button.' + key, buttons[key]);\n              });\n              var modules = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend({}, this.options.modules, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.plugins || {}); // add and initialize modules\n\n              Object.keys(modules).forEach(function (key) {\n                _this.module(key, modules[key], true);\n              });\n              Object.keys(this.modules).forEach(function (key) {\n                _this.initializeModule(key);\n              });\n            }\n          }, {\n            key: \"_destroy\",\n            value: function _destroy() {\n              var _this2 = this; // destroy modules with reversed order\n\n\n              Object.keys(this.modules).reverse().forEach(function (key) {\n                _this2.removeModule(key);\n              });\n              Object.keys(this.memos).forEach(function (key) {\n                _this2.removeMemo(key);\n              }); // trigger custom onDestroy callback\n\n              this.triggerEvent('destroy', this);\n            }\n          }, {\n            key: \"code\",\n            value: function code(html) {\n              var isActivated = this.invoke('codeview.isActivated');\n\n              if (html === undefined) {\n                this.invoke('codeview.sync');\n                return isActivated ? this.layoutInfo.codable.val() : this.layoutInfo.editable.html();\n              } else {\n                if (isActivated) {\n                  this.invoke('codeview.sync', html);\n                } else {\n                  this.layoutInfo.editable.html(html);\n                }\n\n                this.$note.val(html);\n                this.triggerEvent('change', html, this.layoutInfo.editable);\n              }\n            }\n          }, {\n            key: \"isDisabled\",\n            value: function isDisabled() {\n              return this.layoutInfo.editable.attr('contenteditable') === 'false';\n            }\n          }, {\n            key: \"enable\",\n            value: function enable() {\n              this.layoutInfo.editable.attr('contenteditable', true);\n              this.invoke('toolbar.activate', true);\n              this.triggerEvent('disable', false);\n              this.options.editing = true;\n            }\n          }, {\n            key: \"disable\",\n            value: function disable() {\n              // close codeview if codeview is opend\n              if (this.invoke('codeview.isActivated')) {\n                this.invoke('codeview.deactivate');\n              }\n\n              this.layoutInfo.editable.attr('contenteditable', false);\n              this.options.editing = false;\n              this.invoke('toolbar.deactivate', true);\n              this.triggerEvent('disable', true);\n            }\n          }, {\n            key: \"triggerEvent\",\n            value: function triggerEvent() {\n              var namespace = lists.head(arguments);\n              var args = lists.tail(lists.from(arguments));\n              var callback = this.options.callbacks[func.namespaceToCamel(namespace, 'on')];\n\n              if (callback) {\n                callback.apply(this.$note[0], args);\n              }\n\n              this.$note.trigger('summernote.' + namespace, args);\n            }\n          }, {\n            key: \"initializeModule\",\n            value: function initializeModule(key) {\n              var module = this.modules[key];\n              module.shouldInitialize = module.shouldInitialize || func.ok;\n\n              if (!module.shouldInitialize()) {\n                return;\n              } // initialize module\n\n\n              if (module.initialize) {\n                module.initialize();\n              } // attach events\n\n\n              if (module.events) {\n                dom.attachEvents(this.$note, module.events);\n              }\n            }\n          }, {\n            key: \"module\",\n            value: function module(key, ModuleClass, withoutIntialize) {\n              if (arguments.length === 1) {\n                return this.modules[key];\n              }\n\n              this.modules[key] = new ModuleClass(this);\n\n              if (!withoutIntialize) {\n                this.initializeModule(key);\n              }\n            }\n          }, {\n            key: \"removeModule\",\n            value: function removeModule(key) {\n              var module = this.modules[key];\n\n              if (module.shouldInitialize()) {\n                if (module.events) {\n                  dom.detachEvents(this.$note, module.events);\n                }\n\n                if (module.destroy) {\n                  module.destroy();\n                }\n              }\n\n              delete this.modules[key];\n            }\n          }, {\n            key: \"memo\",\n            value: function memo(key, obj) {\n              if (arguments.length === 1) {\n                return this.memos[key];\n              }\n\n              this.memos[key] = obj;\n            }\n          }, {\n            key: \"removeMemo\",\n            value: function removeMemo(key) {\n              if (this.memos[key] && this.memos[key].destroy) {\n                this.memos[key].destroy();\n              }\n\n              delete this.memos[key];\n            }\n            /**\n             * Some buttons need to change their visual style immediately once they get pressed\n             */\n\n          }, {\n            key: \"createInvokeHandlerAndUpdateState\",\n            value: function createInvokeHandlerAndUpdateState(namespace, value) {\n              var _this3 = this;\n\n              return function (event) {\n                _this3.createInvokeHandler(namespace, value)(event);\n\n                _this3.invoke('buttons.updateCurrentStyle');\n              };\n            }\n          }, {\n            key: \"createInvokeHandler\",\n            value: function createInvokeHandler(namespace, value) {\n              var _this4 = this;\n\n              return function (event) {\n                event.preventDefault();\n                var $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target);\n\n                _this4.invoke(namespace, value || $target.closest('[data-value]').data('value'), $target);\n              };\n            }\n          }, {\n            key: \"invoke\",\n            value: function invoke() {\n              var namespace = lists.head(arguments);\n              var args = lists.tail(lists.from(arguments));\n              var splits = namespace.split('.');\n              var hasSeparator = splits.length > 1;\n              var moduleName = hasSeparator && lists.head(splits);\n              var methodName = hasSeparator ? lists.last(splits) : lists.head(splits);\n              var module = this.modules[moduleName || 'editor'];\n\n              if (!moduleName && this[methodName]) {\n                return this[methodName].apply(this, args);\n              } else if (module && module[methodName] && module.shouldInitialize()) {\n                return module[methodName].apply(module, args);\n              }\n            }\n          }]);\n\n          return Context;\n        }(); // CONCATENATED MODULE: ./src/js/summernote.js\n\n\n        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.fn.extend({\n          /**\n           * Summernote API\n           *\n           * @param {Object|String}\n           * @return {this}\n           */\n          summernote: function summernote() {\n            var type = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.type(lists.head(arguments));\n            var isExternalAPICalled = type === 'string';\n            var hasInitOptions = type === 'object';\n            var options = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend({}, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.options, hasInitOptions ? lists.head(arguments) : {}); // Update options\n\n            options.langInfo = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(true, {}, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.lang['en-US'], external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.lang[options.lang]);\n            options.icons = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(true, {}, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.options.icons, options.icons);\n            options.tooltip = options.tooltip === 'auto' ? !env.isSupportTouch : options.tooltip;\n            this.each(function (idx, note) {\n              var $note = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(note);\n\n              if (!$note.data('summernote')) {\n                var context = new Context_Context($note, options);\n                $note.data('summernote', context);\n                $note.data('summernote').triggerEvent('init', context.layoutInfo);\n              }\n            });\n            var $note = this.first();\n\n            if ($note.length) {\n              var context = $note.data('summernote');\n\n              if (isExternalAPICalled) {\n                return context.invoke.apply(context, lists.from(arguments));\n              } else if (options.focus) {\n                context.invoke('editor.focus');\n              }\n            }\n\n            return this;\n          }\n        }); // CONCATENATED MODULE: ./src/js/base/core/range.js\n\n        function range_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function range_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function range_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) range_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) range_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * return boundaryPoint from TextRange, inspired by Andy Na's HuskyRange.js\n         *\n         * @param {TextRange} textRange\n         * @param {Boolean} isStart\n         * @return {BoundaryPoint}\n         *\n         * @see http://msdn.microsoft.com/en-us/library/ie/ms535872(v=vs.85).aspx\n         */\n\n\n        function textRangeToPoint(textRange, isStart) {\n          var container = textRange.parentElement();\n          var offset;\n          var tester = document.body.createTextRange();\n          var prevContainer;\n          var childNodes = lists.from(container.childNodes);\n\n          for (offset = 0; offset < childNodes.length; offset++) {\n            if (dom.isText(childNodes[offset])) {\n              continue;\n            }\n\n            tester.moveToElementText(childNodes[offset]);\n\n            if (tester.compareEndPoints('StartToStart', textRange) >= 0) {\n              break;\n            }\n\n            prevContainer = childNodes[offset];\n          }\n\n          if (offset !== 0 && dom.isText(childNodes[offset - 1])) {\n            var textRangeStart = document.body.createTextRange();\n            var curTextNode = null;\n            textRangeStart.moveToElementText(prevContainer || container);\n            textRangeStart.collapse(!prevContainer);\n            curTextNode = prevContainer ? prevContainer.nextSibling : container.firstChild;\n            var pointTester = textRange.duplicate();\n            pointTester.setEndPoint('StartToStart', textRangeStart);\n            var textCount = pointTester.text.replace(/[\\r\\n]/g, '').length;\n\n            while (textCount > curTextNode.nodeValue.length && curTextNode.nextSibling) {\n              textCount -= curTextNode.nodeValue.length;\n              curTextNode = curTextNode.nextSibling;\n            } // [workaround] enforce IE to re-reference curTextNode, hack\n\n\n            var dummy = curTextNode.nodeValue; // eslint-disable-line\n\n            if (isStart && curTextNode.nextSibling && dom.isText(curTextNode.nextSibling) && textCount === curTextNode.nodeValue.length) {\n              textCount -= curTextNode.nodeValue.length;\n              curTextNode = curTextNode.nextSibling;\n            }\n\n            container = curTextNode;\n            offset = textCount;\n          }\n\n          return {\n            cont: container,\n            offset: offset\n          };\n        }\n        /**\n         * return TextRange from boundary point (inspired by google closure-library)\n         * @param {BoundaryPoint} point\n         * @return {TextRange}\n         */\n\n\n        function pointToTextRange(point) {\n          var textRangeInfo = function textRangeInfo(container, offset) {\n            var node, isCollapseToStart;\n\n            if (dom.isText(container)) {\n              var prevTextNodes = dom.listPrev(container, func.not(dom.isText));\n              var prevContainer = lists.last(prevTextNodes).previousSibling;\n              node = prevContainer || container.parentNode;\n              offset += lists.sum(lists.tail(prevTextNodes), dom.nodeLength);\n              isCollapseToStart = !prevContainer;\n            } else {\n              node = container.childNodes[offset] || container;\n\n              if (dom.isText(node)) {\n                return textRangeInfo(node, 0);\n              }\n\n              offset = 0;\n              isCollapseToStart = false;\n            }\n\n            return {\n              node: node,\n              collapseToStart: isCollapseToStart,\n              offset: offset\n            };\n          };\n\n          var textRange = document.body.createTextRange();\n          var info = textRangeInfo(point.node, point.offset);\n          textRange.moveToElementText(info.node);\n          textRange.collapse(info.collapseToStart);\n          textRange.moveStart('character', info.offset);\n          return textRange;\n        }\n        /**\n           * Wrapped Range\n           *\n           * @constructor\n           * @param {Node} sc - start container\n           * @param {Number} so - start offset\n           * @param {Node} ec - end container\n           * @param {Number} eo - end offset\n           */\n\n\n        var range_WrappedRange = /*#__PURE__*/function () {\n          function WrappedRange(sc, so, ec, eo) {\n            range_classCallCheck(this, WrappedRange);\n            this.sc = sc;\n            this.so = so;\n            this.ec = ec;\n            this.eo = eo; // isOnEditable: judge whether range is on editable or not\n\n            this.isOnEditable = this.makeIsOn(dom.isEditable); // isOnList: judge whether range is on list node or not\n\n            this.isOnList = this.makeIsOn(dom.isList); // isOnAnchor: judge whether range is on anchor node or not\n\n            this.isOnAnchor = this.makeIsOn(dom.isAnchor); // isOnCell: judge whether range is on cell node or not\n\n            this.isOnCell = this.makeIsOn(dom.isCell); // isOnData: judge whether range is on data node or not\n\n            this.isOnData = this.makeIsOn(dom.isData);\n          } // nativeRange: get nativeRange from sc, so, ec, eo\n\n\n          range_createClass(WrappedRange, [{\n            key: \"nativeRange\",\n            value: function nativeRange() {\n              if (env.isW3CRangeSupport) {\n                var w3cRange = document.createRange();\n                w3cRange.setStart(this.sc, this.so);\n                w3cRange.setEnd(this.ec, this.eo);\n                return w3cRange;\n              } else {\n                var textRange = pointToTextRange({\n                  node: this.sc,\n                  offset: this.so\n                });\n                textRange.setEndPoint('EndToEnd', pointToTextRange({\n                  node: this.ec,\n                  offset: this.eo\n                }));\n                return textRange;\n              }\n            }\n          }, {\n            key: \"getPoints\",\n            value: function getPoints() {\n              return {\n                sc: this.sc,\n                so: this.so,\n                ec: this.ec,\n                eo: this.eo\n              };\n            }\n          }, {\n            key: \"getStartPoint\",\n            value: function getStartPoint() {\n              return {\n                node: this.sc,\n                offset: this.so\n              };\n            }\n          }, {\n            key: \"getEndPoint\",\n            value: function getEndPoint() {\n              return {\n                node: this.ec,\n                offset: this.eo\n              };\n            }\n            /**\n             * select update visible range\n             */\n\n          }, {\n            key: \"select\",\n            value: function select() {\n              var nativeRng = this.nativeRange();\n\n              if (env.isW3CRangeSupport) {\n                var selection = document.getSelection();\n\n                if (selection.rangeCount > 0) {\n                  selection.removeAllRanges();\n                }\n\n                selection.addRange(nativeRng);\n              } else {\n                nativeRng.select();\n              }\n\n              return this;\n            }\n            /**\n             * Moves the scrollbar to start container(sc) of current range\n             *\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"scrollIntoView\",\n            value: function scrollIntoView(container) {\n              var height = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(container).height();\n\n              if (container.scrollTop + height < this.sc.offsetTop) {\n                container.scrollTop += Math.abs(container.scrollTop + height - this.sc.offsetTop);\n              }\n\n              return this;\n            }\n            /**\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"normalize\",\n            value: function normalize() {\n              /**\n               * @param {BoundaryPoint} point\n               * @param {Boolean} isLeftToRight - true: prefer to choose right node\n               *                                - false: prefer to choose left node\n               * @return {BoundaryPoint}\n               */\n              var getVisiblePoint = function getVisiblePoint(point, isLeftToRight) {\n                if (!point) {\n                  return point;\n                } // Just use the given point [XXX:Adhoc]\n                //  - case 01. if the point is on the middle of the node\n                //  - case 02. if the point is on the right edge and prefer to choose left node\n                //  - case 03. if the point is on the left edge and prefer to choose right node\n                //  - case 04. if the point is on the right edge and prefer to choose right node but the node is void\n                //  - case 05. if the point is on the left edge and prefer to choose left node but the node is void\n                //  - case 06. if the point is on the block node and there is no children\n\n\n                if (dom.isVisiblePoint(point)) {\n                  if (!dom.isEdgePoint(point) || dom.isRightEdgePoint(point) && !isLeftToRight || dom.isLeftEdgePoint(point) && isLeftToRight || dom.isRightEdgePoint(point) && isLeftToRight && dom.isVoid(point.node.nextSibling) || dom.isLeftEdgePoint(point) && !isLeftToRight && dom.isVoid(point.node.previousSibling) || dom.isBlock(point.node) && dom.isEmpty(point.node)) {\n                    return point;\n                  }\n                } // point on block's edge\n\n\n                var block = dom.ancestor(point.node, dom.isBlock);\n                var hasRightNode = false;\n\n                if (!hasRightNode) {\n                  var prevPoint = dom.prevPoint(point) || {\n                    node: null\n                  };\n                  hasRightNode = (dom.isLeftEdgePointOf(point, block) || dom.isVoid(prevPoint.node)) && !isLeftToRight;\n                }\n\n                var hasLeftNode = false;\n\n                if (!hasLeftNode) {\n                  var _nextPoint = dom.nextPoint(point) || {\n                    node: null\n                  };\n\n                  hasLeftNode = (dom.isRightEdgePointOf(point, block) || dom.isVoid(_nextPoint.node)) && isLeftToRight;\n                }\n\n                if (hasRightNode || hasLeftNode) {\n                  // returns point already on visible point\n                  if (dom.isVisiblePoint(point)) {\n                    return point;\n                  } // reverse direction\n\n\n                  isLeftToRight = !isLeftToRight;\n                }\n\n                var nextPoint = isLeftToRight ? dom.nextPointUntil(dom.nextPoint(point), dom.isVisiblePoint) : dom.prevPointUntil(dom.prevPoint(point), dom.isVisiblePoint);\n                return nextPoint || point;\n              };\n\n              var endPoint = getVisiblePoint(this.getEndPoint(), false);\n              var startPoint = this.isCollapsed() ? endPoint : getVisiblePoint(this.getStartPoint(), true);\n              return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n            }\n            /**\n             * returns matched nodes on range\n             *\n             * @param {Function} [pred] - predicate function\n             * @param {Object} [options]\n             * @param {Boolean} [options.includeAncestor]\n             * @param {Boolean} [options.fullyContains]\n             * @return {Node[]}\n             */\n\n          }, {\n            key: \"nodes\",\n            value: function nodes(pred, options) {\n              pred = pred || func.ok;\n              var includeAncestor = options && options.includeAncestor;\n              var fullyContains = options && options.fullyContains; // TODO compare points and sort\n\n              var startPoint = this.getStartPoint();\n              var endPoint = this.getEndPoint();\n              var nodes = [];\n              var leftEdgeNodes = [];\n              dom.walkPoint(startPoint, endPoint, function (point) {\n                if (dom.isEditable(point.node)) {\n                  return;\n                }\n\n                var node;\n\n                if (fullyContains) {\n                  if (dom.isLeftEdgePoint(point)) {\n                    leftEdgeNodes.push(point.node);\n                  }\n\n                  if (dom.isRightEdgePoint(point) && lists.contains(leftEdgeNodes, point.node)) {\n                    node = point.node;\n                  }\n                } else if (includeAncestor) {\n                  node = dom.ancestor(point.node, pred);\n                } else {\n                  node = point.node;\n                }\n\n                if (node && pred(node)) {\n                  nodes.push(node);\n                }\n              }, true);\n              return lists.unique(nodes);\n            }\n            /**\n             * returns commonAncestor of range\n             * @return {Element} - commonAncestor\n             */\n\n          }, {\n            key: \"commonAncestor\",\n            value: function commonAncestor() {\n              return dom.commonAncestor(this.sc, this.ec);\n            }\n            /**\n             * returns expanded range by pred\n             *\n             * @param {Function} pred - predicate function\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"expand\",\n            value: function expand(pred) {\n              var startAncestor = dom.ancestor(this.sc, pred);\n              var endAncestor = dom.ancestor(this.ec, pred);\n\n              if (!startAncestor && !endAncestor) {\n                return new WrappedRange(this.sc, this.so, this.ec, this.eo);\n              }\n\n              var boundaryPoints = this.getPoints();\n\n              if (startAncestor) {\n                boundaryPoints.sc = startAncestor;\n                boundaryPoints.so = 0;\n              }\n\n              if (endAncestor) {\n                boundaryPoints.ec = endAncestor;\n                boundaryPoints.eo = dom.nodeLength(endAncestor);\n              }\n\n              return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo);\n            }\n            /**\n             * @param {Boolean} isCollapseToStart\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"collapse\",\n            value: function collapse(isCollapseToStart) {\n              if (isCollapseToStart) {\n                return new WrappedRange(this.sc, this.so, this.sc, this.so);\n              } else {\n                return new WrappedRange(this.ec, this.eo, this.ec, this.eo);\n              }\n            }\n            /**\n             * splitText on range\n             */\n\n          }, {\n            key: \"splitText\",\n            value: function splitText() {\n              var isSameContainer = this.sc === this.ec;\n              var boundaryPoints = this.getPoints();\n\n              if (dom.isText(this.ec) && !dom.isEdgePoint(this.getEndPoint())) {\n                this.ec.splitText(this.eo);\n              }\n\n              if (dom.isText(this.sc) && !dom.isEdgePoint(this.getStartPoint())) {\n                boundaryPoints.sc = this.sc.splitText(this.so);\n                boundaryPoints.so = 0;\n\n                if (isSameContainer) {\n                  boundaryPoints.ec = boundaryPoints.sc;\n                  boundaryPoints.eo = this.eo - this.so;\n                }\n              }\n\n              return new WrappedRange(boundaryPoints.sc, boundaryPoints.so, boundaryPoints.ec, boundaryPoints.eo);\n            }\n            /**\n             * delete contents on range\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"deleteContents\",\n            value: function deleteContents() {\n              if (this.isCollapsed()) {\n                return this;\n              }\n\n              var rng = this.splitText();\n              var nodes = rng.nodes(null, {\n                fullyContains: true\n              }); // find new cursor point\n\n              var point = dom.prevPointUntil(rng.getStartPoint(), function (point) {\n                return !lists.contains(nodes, point.node);\n              });\n              var emptyParents = [];\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(nodes, function (idx, node) {\n                // find empty parents\n                var parent = node.parentNode;\n\n                if (point.node !== parent && dom.nodeLength(parent) === 1) {\n                  emptyParents.push(parent);\n                }\n\n                dom.remove(node, false);\n              }); // remove empty parents\n\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(emptyParents, function (idx, node) {\n                dom.remove(node, false);\n              });\n              return new WrappedRange(point.node, point.offset, point.node, point.offset).normalize();\n            }\n            /**\n             * makeIsOn: return isOn(pred) function\n             */\n\n          }, {\n            key: \"makeIsOn\",\n            value: function makeIsOn(pred) {\n              return function () {\n                var ancestor = dom.ancestor(this.sc, pred);\n                return !!ancestor && ancestor === dom.ancestor(this.ec, pred);\n              };\n            }\n            /**\n             * @param {Function} pred\n             * @return {Boolean}\n             */\n\n          }, {\n            key: \"isLeftEdgeOf\",\n            value: function isLeftEdgeOf(pred) {\n              if (!dom.isLeftEdgePoint(this.getStartPoint())) {\n                return false;\n              }\n\n              var node = dom.ancestor(this.sc, pred);\n              return node && dom.isLeftEdgeOf(this.sc, node);\n            }\n            /**\n             * returns whether range was collapsed or not\n             */\n\n          }, {\n            key: \"isCollapsed\",\n            value: function isCollapsed() {\n              return this.sc === this.ec && this.so === this.eo;\n            }\n            /**\n             * wrap inline nodes which children of body with paragraph\n             *\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"wrapBodyInlineWithPara\",\n            value: function wrapBodyInlineWithPara() {\n              if (dom.isBodyContainer(this.sc) && dom.isEmpty(this.sc)) {\n                this.sc.innerHTML = dom.emptyPara;\n                return new WrappedRange(this.sc.firstChild, 0, this.sc.firstChild, 0);\n              }\n              /**\n               * [workaround] firefox often create range on not visible point. so normalize here.\n               *  - firefox: |<p>text</p>|\n               *  - chrome: <p>|text|</p>\n               */\n\n\n              var rng = this.normalize();\n\n              if (dom.isParaInline(this.sc) || dom.isPara(this.sc)) {\n                return rng;\n              } // find inline top ancestor\n\n\n              var topAncestor;\n\n              if (dom.isInline(rng.sc)) {\n                var ancestors = dom.listAncestor(rng.sc, func.not(dom.isInline));\n                topAncestor = lists.last(ancestors);\n\n                if (!dom.isInline(topAncestor)) {\n                  topAncestor = ancestors[ancestors.length - 2] || rng.sc.childNodes[rng.so];\n                }\n              } else {\n                topAncestor = rng.sc.childNodes[rng.so > 0 ? rng.so - 1 : 0];\n              }\n\n              if (topAncestor) {\n                // siblings not in paragraph\n                var inlineSiblings = dom.listPrev(topAncestor, dom.isParaInline).reverse();\n                inlineSiblings = inlineSiblings.concat(dom.listNext(topAncestor.nextSibling, dom.isParaInline)); // wrap with paragraph\n\n                if (inlineSiblings.length) {\n                  var para = dom.wrap(lists.head(inlineSiblings), 'p');\n                  dom.appendChildNodes(para, lists.tail(inlineSiblings));\n                }\n              }\n\n              return this.normalize();\n            }\n            /**\n             * insert node at current cursor\n             *\n             * @param {Node} node\n             * @return {Node}\n             */\n\n          }, {\n            key: \"insertNode\",\n            value: function insertNode(node) {\n              var rng = this;\n\n              if (dom.isText(node) || dom.isInline(node)) {\n                rng = this.wrapBodyInlineWithPara().deleteContents();\n              }\n\n              var info = dom.splitPoint(rng.getStartPoint(), dom.isInline(node));\n\n              if (info.rightNode) {\n                info.rightNode.parentNode.insertBefore(node, info.rightNode);\n\n                if (dom.isEmpty(info.rightNode) && dom.isPara(node)) {\n                  info.rightNode.parentNode.removeChild(info.rightNode);\n                }\n              } else {\n                info.container.appendChild(node);\n              }\n\n              return node;\n            }\n            /**\n             * insert html at current cursor\n             */\n\n          }, {\n            key: \"pasteHTML\",\n            value: function pasteHTML(markup) {\n              markup = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.trim(markup);\n              var contentsContainer = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div></div>').html(markup)[0];\n              var childNodes = lists.from(contentsContainer.childNodes); // const rng = this.wrapBodyInlineWithPara().deleteContents();\n\n              var rng = this;\n              var reversed = false;\n\n              if (rng.so >= 0) {\n                childNodes = childNodes.reverse();\n                reversed = true;\n              }\n\n              childNodes = childNodes.map(function (childNode) {\n                return rng.insertNode(childNode);\n              });\n\n              if (reversed) {\n                childNodes = childNodes.reverse();\n              }\n\n              return childNodes;\n            }\n            /**\n             * returns text in range\n             *\n             * @return {String}\n             */\n\n          }, {\n            key: \"toString\",\n            value: function toString() {\n              var nativeRng = this.nativeRange();\n              return env.isW3CRangeSupport ? nativeRng.toString() : nativeRng.text;\n            }\n            /**\n             * returns range for word before cursor\n             *\n             * @param {Boolean} [findAfter] - find after cursor, default: false\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"getWordRange\",\n            value: function getWordRange(findAfter) {\n              var endPoint = this.getEndPoint();\n\n              if (!dom.isCharPoint(endPoint)) {\n                return this;\n              }\n\n              var startPoint = dom.prevPointUntil(endPoint, function (point) {\n                return !dom.isCharPoint(point);\n              });\n\n              if (findAfter) {\n                endPoint = dom.nextPointUntil(endPoint, function (point) {\n                  return !dom.isCharPoint(point);\n                });\n              }\n\n              return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n            }\n            /**\n             * returns range for words before cursor\n             *\n             * @param {Boolean} [findAfter] - find after cursor, default: false\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"getWordsRange\",\n            value: function getWordsRange(findAfter) {\n              var endPoint = this.getEndPoint();\n\n              var isNotTextPoint = function isNotTextPoint(point) {\n                return !dom.isCharPoint(point) && !dom.isSpacePoint(point);\n              };\n\n              if (isNotTextPoint(endPoint)) {\n                return this;\n              }\n\n              var startPoint = dom.prevPointUntil(endPoint, isNotTextPoint);\n\n              if (findAfter) {\n                endPoint = dom.nextPointUntil(endPoint, isNotTextPoint);\n              }\n\n              return new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n            }\n            /**\n             * returns range for words before cursor that match with a Regex\n             *\n             * example:\n             *  range: 'hi @Peter Pan'\n             *  regex: '/@[a-z ]+/i'\n             *  return range: '@Peter Pan'\n             *\n             * @param {RegExp} [regex]\n             * @return {WrappedRange|null}\n             */\n\n          }, {\n            key: \"getWordsMatchRange\",\n            value: function getWordsMatchRange(regex) {\n              var endPoint = this.getEndPoint();\n              var startPoint = dom.prevPointUntil(endPoint, function (point) {\n                if (!dom.isCharPoint(point) && !dom.isSpacePoint(point)) {\n                  return true;\n                }\n\n                var rng = new WrappedRange(point.node, point.offset, endPoint.node, endPoint.offset);\n                var result = regex.exec(rng.toString());\n                return result && result.index === 0;\n              });\n              var rng = new WrappedRange(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n              var text = rng.toString();\n              var result = regex.exec(text);\n\n              if (result && result[0].length === text.length) {\n                return rng;\n              } else {\n                return null;\n              }\n            }\n            /**\n             * create offsetPath bookmark\n             *\n             * @param {Node} editable\n             */\n\n          }, {\n            key: \"bookmark\",\n            value: function bookmark(editable) {\n              return {\n                s: {\n                  path: dom.makeOffsetPath(editable, this.sc),\n                  offset: this.so\n                },\n                e: {\n                  path: dom.makeOffsetPath(editable, this.ec),\n                  offset: this.eo\n                }\n              };\n            }\n            /**\n             * create offsetPath bookmark base on paragraph\n             *\n             * @param {Node[]} paras\n             */\n\n          }, {\n            key: \"paraBookmark\",\n            value: function paraBookmark(paras) {\n              return {\n                s: {\n                  path: lists.tail(dom.makeOffsetPath(lists.head(paras), this.sc)),\n                  offset: this.so\n                },\n                e: {\n                  path: lists.tail(dom.makeOffsetPath(lists.last(paras), this.ec)),\n                  offset: this.eo\n                }\n              };\n            }\n            /**\n             * getClientRects\n             * @return {Rect[]}\n             */\n\n          }, {\n            key: \"getClientRects\",\n            value: function getClientRects() {\n              var nativeRng = this.nativeRange();\n              return nativeRng.getClientRects();\n            }\n          }]);\n          return WrappedRange;\n        }();\n        /**\n         * Data structure\n         *  * BoundaryPoint: a point of dom tree\n         *  * BoundaryPoints: two boundaryPoints corresponding to the start and the end of the Range\n         *\n         * See to http://www.w3.org/TR/DOM-Level-2-Traversal-Range/ranges.html#Level-2-Range-Position\n         */\n\n        /* harmony default export */\n\n\n        var range = {\n          /**\n           * create Range Object From arguments or Browser Selection\n           *\n           * @param {Node} sc - start container\n           * @param {Number} so - start offset\n           * @param {Node} ec - end container\n           * @param {Number} eo - end offset\n           * @return {WrappedRange}\n           */\n          create: function create(sc, so, ec, eo) {\n            if (arguments.length === 4) {\n              return new range_WrappedRange(sc, so, ec, eo);\n            } else if (arguments.length === 2) {\n              // collapsed\n              ec = sc;\n              eo = so;\n              return new range_WrappedRange(sc, so, ec, eo);\n            } else {\n              var wrappedRange = this.createFromSelection();\n\n              if (!wrappedRange && arguments.length === 1) {\n                var bodyElement = arguments[0];\n\n                if (dom.isEditable(bodyElement)) {\n                  bodyElement = bodyElement.lastChild;\n                }\n\n                return this.createFromBodyElement(bodyElement, dom.emptyPara === arguments[0].innerHTML);\n              }\n\n              return wrappedRange;\n            }\n          },\n          createFromBodyElement: function createFromBodyElement(bodyElement) {\n            var isCollapseToStart = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n            var wrappedRange = this.createFromNode(bodyElement);\n            return wrappedRange.collapse(isCollapseToStart);\n          },\n          createFromSelection: function createFromSelection() {\n            var sc, so, ec, eo;\n\n            if (env.isW3CRangeSupport) {\n              var selection = document.getSelection();\n\n              if (!selection || selection.rangeCount === 0) {\n                return null;\n              } else if (dom.isBody(selection.anchorNode)) {\n                // Firefox: returns entire body as range on initialization.\n                // We won't never need it.\n                return null;\n              }\n\n              var nativeRng = selection.getRangeAt(0);\n              sc = nativeRng.startContainer;\n              so = nativeRng.startOffset;\n              ec = nativeRng.endContainer;\n              eo = nativeRng.endOffset;\n            } else {\n              // IE8: TextRange\n              var textRange = document.selection.createRange();\n              var textRangeEnd = textRange.duplicate();\n              textRangeEnd.collapse(false);\n              var textRangeStart = textRange;\n              textRangeStart.collapse(true);\n              var startPoint = textRangeToPoint(textRangeStart, true);\n              var endPoint = textRangeToPoint(textRangeEnd, false); // same visible point case: range was collapsed.\n\n              if (dom.isText(startPoint.node) && dom.isLeftEdgePoint(startPoint) && dom.isTextNode(endPoint.node) && dom.isRightEdgePoint(endPoint) && endPoint.node.nextSibling === startPoint.node) {\n                startPoint = endPoint;\n              }\n\n              sc = startPoint.cont;\n              so = startPoint.offset;\n              ec = endPoint.cont;\n              eo = endPoint.offset;\n            }\n\n            return new range_WrappedRange(sc, so, ec, eo);\n          },\n\n          /**\n           * @method\n           *\n           * create WrappedRange from node\n           *\n           * @param {Node} node\n           * @return {WrappedRange}\n           */\n          createFromNode: function createFromNode(node) {\n            var sc = node;\n            var so = 0;\n            var ec = node;\n            var eo = dom.nodeLength(ec); // browsers can't target a picture or void node\n\n            if (dom.isVoid(sc)) {\n              so = dom.listPrev(sc).length - 1;\n              sc = sc.parentNode;\n            }\n\n            if (dom.isBR(ec)) {\n              eo = dom.listPrev(ec).length - 1;\n              ec = ec.parentNode;\n            } else if (dom.isVoid(ec)) {\n              eo = dom.listPrev(ec).length;\n              ec = ec.parentNode;\n            }\n\n            return this.create(sc, so, ec, eo);\n          },\n\n          /**\n           * create WrappedRange from node after position\n           *\n           * @param {Node} node\n           * @return {WrappedRange}\n           */\n          createFromNodeBefore: function createFromNodeBefore(node) {\n            return this.createFromNode(node).collapse(true);\n          },\n\n          /**\n           * create WrappedRange from node after position\n           *\n           * @param {Node} node\n           * @return {WrappedRange}\n           */\n          createFromNodeAfter: function createFromNodeAfter(node) {\n            return this.createFromNode(node).collapse();\n          },\n\n          /**\n           * @method\n           *\n           * create WrappedRange from bookmark\n           *\n           * @param {Node} editable\n           * @param {Object} bookmark\n           * @return {WrappedRange}\n           */\n          createFromBookmark: function createFromBookmark(editable, bookmark) {\n            var sc = dom.fromOffsetPath(editable, bookmark.s.path);\n            var so = bookmark.s.offset;\n            var ec = dom.fromOffsetPath(editable, bookmark.e.path);\n            var eo = bookmark.e.offset;\n            return new range_WrappedRange(sc, so, ec, eo);\n          },\n\n          /**\n           * @method\n           *\n           * create WrappedRange from paraBookmark\n           *\n           * @param {Object} bookmark\n           * @param {Node[]} paras\n           * @return {WrappedRange}\n           */\n          createFromParaBookmark: function createFromParaBookmark(bookmark, paras) {\n            var so = bookmark.s.offset;\n            var eo = bookmark.e.offset;\n            var sc = dom.fromOffsetPath(lists.head(paras), bookmark.s.path);\n            var ec = dom.fromOffsetPath(lists.last(paras), bookmark.e.path);\n            return new range_WrappedRange(sc, so, ec, eo);\n          }\n        }; // CONCATENATED MODULE: ./src/js/base/core/key.js\n\n        var KEY_MAP = {\n          'BACKSPACE': 8,\n          'TAB': 9,\n          'ENTER': 13,\n          'ESCAPE': 27,\n          'SPACE': 32,\n          'DELETE': 46,\n          // Arrow\n          'LEFT': 37,\n          'UP': 38,\n          'RIGHT': 39,\n          'DOWN': 40,\n          // Number: 0-9\n          'NUM0': 48,\n          'NUM1': 49,\n          'NUM2': 50,\n          'NUM3': 51,\n          'NUM4': 52,\n          'NUM5': 53,\n          'NUM6': 54,\n          'NUM7': 55,\n          'NUM8': 56,\n          // Alphabet: a-z\n          'B': 66,\n          'E': 69,\n          'I': 73,\n          'J': 74,\n          'K': 75,\n          'L': 76,\n          'R': 82,\n          'S': 83,\n          'U': 85,\n          'V': 86,\n          'Y': 89,\n          'Z': 90,\n          'SLASH': 191,\n          'LEFTBRACKET': 219,\n          'BACKSLASH': 220,\n          'RIGHTBRACKET': 221,\n          // Navigation\n          'HOME': 36,\n          'END': 35,\n          'PAGEUP': 33,\n          'PAGEDOWN': 34\n        };\n        /**\n         * @class core.key\n         *\n         * Object for keycodes.\n         *\n         * @singleton\n         * @alternateClassName key\n         */\n\n        /* harmony default export */\n\n        var core_key = {\n          /**\n           * @method isEdit\n           *\n           * @param {Number} keyCode\n           * @return {Boolean}\n           */\n          isEdit: function isEdit(keyCode) {\n            return lists.contains([KEY_MAP.BACKSPACE, KEY_MAP.TAB, KEY_MAP.ENTER, KEY_MAP.SPACE, KEY_MAP.DELETE], keyCode);\n          },\n\n          /**\n           * @method isMove\n           *\n           * @param {Number} keyCode\n           * @return {Boolean}\n           */\n          isMove: function isMove(keyCode) {\n            return lists.contains([KEY_MAP.LEFT, KEY_MAP.UP, KEY_MAP.RIGHT, KEY_MAP.DOWN], keyCode);\n          },\n\n          /**\n           * @method isNavigation\n           *\n           * @param {Number} keyCode\n           * @return {Boolean}\n           */\n          isNavigation: function isNavigation(keyCode) {\n            return lists.contains([KEY_MAP.HOME, KEY_MAP.END, KEY_MAP.PAGEUP, KEY_MAP.PAGEDOWN], keyCode);\n          },\n\n          /**\n           * @property {Object} nameFromCode\n           * @property {String} nameFromCode.8 \"BACKSPACE\"\n           */\n          nameFromCode: func.invertObject(KEY_MAP),\n          code: KEY_MAP\n        }; // CONCATENATED MODULE: ./src/js/base/core/async.js\n\n        /**\n         * @method readFileAsDataURL\n         *\n         * read contents of file as representing URL\n         *\n         * @param {File} file\n         * @return {Promise} - then: dataUrl\n         */\n\n        function readFileAsDataURL(file) {\n          return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function (deferred) {\n            external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(new FileReader(), {\n              onload: function onload(e) {\n                var dataURL = e.target.result;\n                deferred.resolve(dataURL);\n              },\n              onerror: function onerror(err) {\n                deferred.reject(err);\n              }\n            }).readAsDataURL(file);\n          }).promise();\n        }\n        /**\n         * @method createImage\n         *\n         * create `<image>` from url string\n         *\n         * @param {String} url\n         * @return {Promise} - then: $image\n         */\n\n\n        function createImage(url) {\n          return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function (deferred) {\n            var $img = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<img>');\n            $img.one('load', function () {\n              $img.off('error abort');\n              deferred.resolve($img);\n            }).one('error abort', function () {\n              $img.off('load').detach();\n              deferred.reject($img);\n            }).css({\n              display: 'none'\n            }).appendTo(document.body).attr('src', url);\n          }).promise();\n        } // CONCATENATED MODULE: ./src/js/base/editing/History.js\n\n\n        function History_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function History_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function History_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) History_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) History_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var History_History = /*#__PURE__*/function () {\n          function History(context) {\n            History_classCallCheck(this, History);\n            this.stack = [];\n            this.stackOffset = -1;\n            this.context = context;\n            this.$editable = context.layoutInfo.editable;\n            this.editable = this.$editable[0];\n          }\n\n          History_createClass(History, [{\n            key: \"makeSnapshot\",\n            value: function makeSnapshot() {\n              var rng = range.create(this.editable);\n              var emptyBookmark = {\n                s: {\n                  path: [],\n                  offset: 0\n                },\n                e: {\n                  path: [],\n                  offset: 0\n                }\n              };\n              return {\n                contents: this.$editable.html(),\n                bookmark: rng && rng.isOnEditable() ? rng.bookmark(this.editable) : emptyBookmark\n              };\n            }\n          }, {\n            key: \"applySnapshot\",\n            value: function applySnapshot(snapshot) {\n              if (snapshot.contents !== null) {\n                this.$editable.html(snapshot.contents);\n              }\n\n              if (snapshot.bookmark !== null) {\n                range.createFromBookmark(this.editable, snapshot.bookmark).select();\n              }\n            }\n            /**\n            * @method rewind\n            * Rewinds the history stack back to the first snapshot taken.\n            * Leaves the stack intact, so that \"Redo\" can still be used.\n            */\n\n          }, {\n            key: \"rewind\",\n            value: function rewind() {\n              // Create snap shot if not yet recorded\n              if (this.$editable.html() !== this.stack[this.stackOffset].contents) {\n                this.recordUndo();\n              } // Return to the first available snapshot.\n\n\n              this.stackOffset = 0; // Apply that snapshot.\n\n              this.applySnapshot(this.stack[this.stackOffset]);\n            }\n            /**\n            *  @method commit\n            *  Resets history stack, but keeps current editor's content.\n            */\n\n          }, {\n            key: \"commit\",\n            value: function commit() {\n              // Clear the stack.\n              this.stack = []; // Restore stackOffset to its original value.\n\n              this.stackOffset = -1; // Record our first snapshot (of nothing).\n\n              this.recordUndo();\n            }\n            /**\n            * @method reset\n            * Resets the history stack completely; reverting to an empty editor.\n            */\n\n          }, {\n            key: \"reset\",\n            value: function reset() {\n              // Clear the stack.\n              this.stack = []; // Restore stackOffset to its original value.\n\n              this.stackOffset = -1; // Clear the editable area.\n\n              this.$editable.html(''); // Record our first snapshot (of nothing).\n\n              this.recordUndo();\n            }\n            /**\n             * undo\n             */\n\n          }, {\n            key: \"undo\",\n            value: function undo() {\n              // Create snap shot if not yet recorded\n              if (this.$editable.html() !== this.stack[this.stackOffset].contents) {\n                this.recordUndo();\n              }\n\n              if (this.stackOffset > 0) {\n                this.stackOffset--;\n                this.applySnapshot(this.stack[this.stackOffset]);\n              }\n            }\n            /**\n             * redo\n             */\n\n          }, {\n            key: \"redo\",\n            value: function redo() {\n              if (this.stack.length - 1 > this.stackOffset) {\n                this.stackOffset++;\n                this.applySnapshot(this.stack[this.stackOffset]);\n              }\n            }\n            /**\n             * recorded undo\n             */\n\n          }, {\n            key: \"recordUndo\",\n            value: function recordUndo() {\n              this.stackOffset++; // Wash out stack after stackOffset\n\n              if (this.stack.length > this.stackOffset) {\n                this.stack = this.stack.slice(0, this.stackOffset);\n              } // Create new snapshot and push it to the end\n\n\n              this.stack.push(this.makeSnapshot()); // If the stack size reachs to the limit, then slice it\n\n              if (this.stack.length > this.context.options.historyLimit) {\n                this.stack.shift();\n                this.stackOffset -= 1;\n              }\n            }\n          }]);\n          return History;\n        }(); // CONCATENATED MODULE: ./src/js/base/editing/Style.js\n\n\n        function Style_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Style_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Style_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Style_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Style_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Style_Style = /*#__PURE__*/function () {\n          function Style() {\n            Style_classCallCheck(this, Style);\n          }\n\n          Style_createClass(Style, [{\n            key: \"jQueryCSS\",\n\n            /**\n             * @method jQueryCSS\n             *\n             * [workaround] for old jQuery\n             * passing an array of style properties to .css()\n             * will result in an object of property-value pairs.\n             * (compability with version < 1.9)\n             *\n             * @private\n             * @param  {jQuery} $obj\n             * @param  {Array} propertyNames - An array of one or more CSS properties.\n             * @return {Object}\n             */\n            value: function jQueryCSS($obj, propertyNames) {\n              if (env.jqueryVersion < 1.9) {\n                var result = {};\n                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(propertyNames, function (idx, propertyName) {\n                  result[propertyName] = $obj.css(propertyName);\n                });\n                return result;\n              }\n\n              return $obj.css(propertyNames);\n            }\n            /**\n             * returns style object from node\n             *\n             * @param {jQuery} $node\n             * @return {Object}\n             */\n\n          }, {\n            key: \"fromNode\",\n            value: function fromNode($node) {\n              var properties = ['font-family', 'font-size', 'text-align', 'list-style-type', 'line-height'];\n              var styleInfo = this.jQueryCSS($node, properties) || {};\n              var fontSize = $node[0].style.fontSize || styleInfo['font-size'];\n              styleInfo['font-size'] = parseInt(fontSize, 10);\n              styleInfo['font-size-unit'] = fontSize.match(/[a-z%]+$/);\n              return styleInfo;\n            }\n            /**\n             * paragraph level style\n             *\n             * @param {WrappedRange} rng\n             * @param {Object} styleInfo\n             */\n\n          }, {\n            key: \"stylePara\",\n            value: function stylePara(rng, styleInfo) {\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(rng.nodes(dom.isPara, {\n                includeAncestor: true\n              }), function (idx, para) {\n                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(para).css(styleInfo);\n              });\n            }\n            /**\n             * insert and returns styleNodes on range.\n             *\n             * @param {WrappedRange} rng\n             * @param {Object} [options] - options for styleNodes\n             * @param {String} [options.nodeName] - default: `SPAN`\n             * @param {Boolean} [options.expandClosestSibling] - default: `false`\n             * @param {Boolean} [options.onlyPartialContains] - default: `false`\n             * @return {Node[]}\n             */\n\n          }, {\n            key: \"styleNodes\",\n            value: function styleNodes(rng, options) {\n              rng = rng.splitText();\n              var nodeName = options && options.nodeName || 'SPAN';\n              var expandClosestSibling = !!(options && options.expandClosestSibling);\n              var onlyPartialContains = !!(options && options.onlyPartialContains);\n\n              if (rng.isCollapsed()) {\n                return [rng.insertNode(dom.create(nodeName))];\n              }\n\n              var pred = dom.makePredByNodeName(nodeName);\n              var nodes = rng.nodes(dom.isText, {\n                fullyContains: true\n              }).map(function (text) {\n                return dom.singleChildAncestor(text, pred) || dom.wrap(text, nodeName);\n              });\n\n              if (expandClosestSibling) {\n                if (onlyPartialContains) {\n                  var nodesInRange = rng.nodes(); // compose with partial contains predication\n\n                  pred = func.and(pred, function (node) {\n                    return lists.contains(nodesInRange, node);\n                  });\n                }\n\n                return nodes.map(function (node) {\n                  var siblings = dom.withClosestSiblings(node, pred);\n                  var head = lists.head(siblings);\n                  var tails = lists.tail(siblings);\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(tails, function (idx, elem) {\n                    dom.appendChildNodes(head, elem.childNodes);\n                    dom.remove(elem);\n                  });\n                  return lists.head(siblings);\n                });\n              } else {\n                return nodes;\n              }\n            }\n            /**\n             * get current style on cursor\n             *\n             * @param {WrappedRange} rng\n             * @return {Object} - object contains style properties.\n             */\n\n          }, {\n            key: \"current\",\n            value: function current(rng) {\n              var $cont = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(!dom.isElement(rng.sc) ? rng.sc.parentNode : rng.sc);\n              var styleInfo = this.fromNode($cont); // document.queryCommandState for toggle state\n              // [workaround] prevent Firefox nsresult: \"0x80004005 (NS_ERROR_FAILURE)\"\n\n              try {\n                styleInfo = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(styleInfo, {\n                  'font-bold': document.queryCommandState('bold') ? 'bold' : 'normal',\n                  'font-italic': document.queryCommandState('italic') ? 'italic' : 'normal',\n                  'font-underline': document.queryCommandState('underline') ? 'underline' : 'normal',\n                  'font-subscript': document.queryCommandState('subscript') ? 'subscript' : 'normal',\n                  'font-superscript': document.queryCommandState('superscript') ? 'superscript' : 'normal',\n                  'font-strikethrough': document.queryCommandState('strikethrough') ? 'strikethrough' : 'normal',\n                  'font-family': document.queryCommandValue('fontname') || styleInfo['font-family']\n                });\n              } catch (e) {} // eslint-disable-next-line\n              // list-style-type to list-style(unordered, ordered)\n\n\n              if (!rng.isOnList()) {\n                styleInfo['list-style'] = 'none';\n              } else {\n                var orderedTypes = ['circle', 'disc', 'disc-leading-zero', 'square'];\n                var isUnordered = orderedTypes.indexOf(styleInfo['list-style-type']) > -1;\n                styleInfo['list-style'] = isUnordered ? 'unordered' : 'ordered';\n              }\n\n              var para = dom.ancestor(rng.sc, dom.isPara);\n\n              if (para && para.style['line-height']) {\n                styleInfo['line-height'] = para.style.lineHeight;\n              } else {\n                var lineHeight = parseInt(styleInfo['line-height'], 10) / parseInt(styleInfo['font-size'], 10);\n                styleInfo['line-height'] = lineHeight.toFixed(1);\n              }\n\n              styleInfo.anchor = rng.isOnAnchor() && dom.ancestor(rng.sc, dom.isAnchor);\n              styleInfo.ancestors = dom.listAncestor(rng.sc, dom.isEditable);\n              styleInfo.range = rng;\n              return styleInfo;\n            }\n          }]);\n          return Style;\n        }(); // CONCATENATED MODULE: ./src/js/base/editing/Bullet.js\n\n\n        function Bullet_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Bullet_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Bullet_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Bullet_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Bullet_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Bullet_Bullet = /*#__PURE__*/function () {\n          function Bullet() {\n            Bullet_classCallCheck(this, Bullet);\n          }\n\n          Bullet_createClass(Bullet, [{\n            key: \"insertOrderedList\",\n\n            /**\n             * toggle ordered list\n             */\n            value: function insertOrderedList(editable) {\n              this.toggleList('OL', editable);\n            }\n            /**\n             * toggle unordered list\n             */\n\n          }, {\n            key: \"insertUnorderedList\",\n            value: function insertUnorderedList(editable) {\n              this.toggleList('UL', editable);\n            }\n            /**\n             * indent\n             */\n\n          }, {\n            key: \"indent\",\n            value: function indent(editable) {\n              var _this = this;\n\n              var rng = range.create(editable).wrapBodyInlineWithPara();\n              var paras = rng.nodes(dom.isPara, {\n                includeAncestor: true\n              });\n              var clustereds = lists.clusterBy(paras, func.peq2('parentNode'));\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(clustereds, function (idx, paras) {\n                var head = lists.head(paras);\n\n                if (dom.isLi(head)) {\n                  var previousList = _this.findList(head.previousSibling);\n\n                  if (previousList) {\n                    paras.map(function (para) {\n                      return previousList.appendChild(para);\n                    });\n                  } else {\n                    _this.wrapList(paras, head.parentNode.nodeName);\n\n                    paras.map(function (para) {\n                      return para.parentNode;\n                    }).map(function (para) {\n                      return _this.appendToPrevious(para);\n                    });\n                  }\n                } else {\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(paras, function (idx, para) {\n                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(para).css('marginLeft', function (idx, val) {\n                      return (parseInt(val, 10) || 0) + 25;\n                    });\n                  });\n                }\n              });\n              rng.select();\n            }\n            /**\n             * outdent\n             */\n\n          }, {\n            key: \"outdent\",\n            value: function outdent(editable) {\n              var _this2 = this;\n\n              var rng = range.create(editable).wrapBodyInlineWithPara();\n              var paras = rng.nodes(dom.isPara, {\n                includeAncestor: true\n              });\n              var clustereds = lists.clusterBy(paras, func.peq2('parentNode'));\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(clustereds, function (idx, paras) {\n                var head = lists.head(paras);\n\n                if (dom.isLi(head)) {\n                  _this2.releaseList([paras]);\n                } else {\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(paras, function (idx, para) {\n                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(para).css('marginLeft', function (idx, val) {\n                      val = parseInt(val, 10) || 0;\n                      return val > 25 ? val - 25 : '';\n                    });\n                  });\n                }\n              });\n              rng.select();\n            }\n            /**\n             * toggle list\n             *\n             * @param {String} listName - OL or UL\n             */\n\n          }, {\n            key: \"toggleList\",\n            value: function toggleList(listName, editable) {\n              var _this3 = this;\n\n              var rng = range.create(editable).wrapBodyInlineWithPara();\n              var paras = rng.nodes(dom.isPara, {\n                includeAncestor: true\n              });\n              var bookmark = rng.paraBookmark(paras);\n              var clustereds = lists.clusterBy(paras, func.peq2('parentNode')); // paragraph to list\n\n              if (lists.find(paras, dom.isPurePara)) {\n                var wrappedParas = [];\n                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(clustereds, function (idx, paras) {\n                  wrappedParas = wrappedParas.concat(_this3.wrapList(paras, listName));\n                });\n                paras = wrappedParas; // list to paragraph or change list style\n              } else {\n                var diffLists = rng.nodes(dom.isList, {\n                  includeAncestor: true\n                }).filter(function (listNode) {\n                  return !external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.nodeName(listNode, listName);\n                });\n\n                if (diffLists.length) {\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(diffLists, function (idx, listNode) {\n                    dom.replace(listNode, listName);\n                  });\n                } else {\n                  paras = this.releaseList(clustereds, true);\n                }\n              }\n\n              range.createFromParaBookmark(bookmark, paras).select();\n            }\n            /**\n             * @param {Node[]} paras\n             * @param {String} listName\n             * @return {Node[]}\n             */\n\n          }, {\n            key: \"wrapList\",\n            value: function wrapList(paras, listName) {\n              var head = lists.head(paras);\n              var last = lists.last(paras);\n              var prevList = dom.isList(head.previousSibling) && head.previousSibling;\n              var nextList = dom.isList(last.nextSibling) && last.nextSibling;\n              var listNode = prevList || dom.insertAfter(dom.create(listName || 'UL'), last); // P to LI\n\n              paras = paras.map(function (para) {\n                return dom.isPurePara(para) ? dom.replace(para, 'LI') : para;\n              }); // append to list(<ul>, <ol>)\n\n              dom.appendChildNodes(listNode, paras);\n\n              if (nextList) {\n                dom.appendChildNodes(listNode, lists.from(nextList.childNodes));\n                dom.remove(nextList);\n              }\n\n              return paras;\n            }\n            /**\n             * @method releaseList\n             *\n             * @param {Array[]} clustereds\n             * @param {Boolean} isEscapseToBody\n             * @return {Node[]}\n             */\n\n          }, {\n            key: \"releaseList\",\n            value: function releaseList(clustereds, isEscapseToBody) {\n              var _this4 = this;\n\n              var releasedParas = [];\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(clustereds, function (idx, paras) {\n                var head = lists.head(paras);\n                var last = lists.last(paras);\n                var headList = isEscapseToBody ? dom.lastAncestor(head, dom.isList) : head.parentNode;\n                var parentItem = headList.parentNode;\n\n                if (headList.parentNode.nodeName === 'LI') {\n                  paras.map(function (para) {\n                    var newList = _this4.findNextSiblings(para);\n\n                    if (parentItem.nextSibling) {\n                      parentItem.parentNode.insertBefore(para, parentItem.nextSibling);\n                    } else {\n                      parentItem.parentNode.appendChild(para);\n                    }\n\n                    if (newList.length) {\n                      _this4.wrapList(newList, headList.nodeName);\n\n                      para.appendChild(newList[0].parentNode);\n                    }\n                  });\n\n                  if (headList.children.length === 0) {\n                    parentItem.removeChild(headList);\n                  }\n\n                  if (parentItem.childNodes.length === 0) {\n                    parentItem.parentNode.removeChild(parentItem);\n                  }\n                } else {\n                  var lastList = headList.childNodes.length > 1 ? dom.splitTree(headList, {\n                    node: last.parentNode,\n                    offset: dom.position(last) + 1\n                  }, {\n                    isSkipPaddingBlankHTML: true\n                  }) : null;\n                  var middleList = dom.splitTree(headList, {\n                    node: head.parentNode,\n                    offset: dom.position(head)\n                  }, {\n                    isSkipPaddingBlankHTML: true\n                  });\n                  paras = isEscapseToBody ? dom.listDescendant(middleList, dom.isLi) : lists.from(middleList.childNodes).filter(dom.isLi); // LI to P\n\n                  if (isEscapseToBody || !dom.isList(headList.parentNode)) {\n                    paras = paras.map(function (para) {\n                      return dom.replace(para, 'P');\n                    });\n                  }\n\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(lists.from(paras).reverse(), function (idx, para) {\n                    dom.insertAfter(para, headList);\n                  }); // remove empty lists\n\n                  var rootLists = lists.compact([headList, middleList, lastList]);\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(rootLists, function (idx, rootList) {\n                    var listNodes = [rootList].concat(dom.listDescendant(rootList, dom.isList));\n                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(listNodes.reverse(), function (idx, listNode) {\n                      if (!dom.nodeLength(listNode)) {\n                        dom.remove(listNode, true);\n                      }\n                    });\n                  });\n                }\n\n                releasedParas = releasedParas.concat(paras);\n              });\n              return releasedParas;\n            }\n            /**\n             * @method appendToPrevious\n             *\n             * Appends list to previous list item, if\n             * none exist it wraps the list in a new list item.\n             *\n             * @param {HTMLNode} ListItem\n             * @return {HTMLNode}\n             */\n\n          }, {\n            key: \"appendToPrevious\",\n            value: function appendToPrevious(node) {\n              return node.previousSibling ? dom.appendChildNodes(node.previousSibling, [node]) : this.wrapList([node], 'LI');\n            }\n            /**\n             * @method findList\n             *\n             * Finds an existing list in list item\n             *\n             * @param {HTMLNode} ListItem\n             * @return {Array[]}\n             */\n\n          }, {\n            key: \"findList\",\n            value: function findList(node) {\n              return node ? lists.find(node.children, function (child) {\n                return ['OL', 'UL'].indexOf(child.nodeName) > -1;\n              }) : null;\n            }\n            /**\n             * @method findNextSiblings\n             *\n             * Finds all list item siblings that follow it\n             *\n             * @param {HTMLNode} ListItem\n             * @return {HTMLNode}\n             */\n\n          }, {\n            key: \"findNextSiblings\",\n            value: function findNextSiblings(node) {\n              var siblings = [];\n\n              while (node.nextSibling) {\n                siblings.push(node.nextSibling);\n                node = node.nextSibling;\n              }\n\n              return siblings;\n            }\n          }]);\n          return Bullet;\n        }(); // CONCATENATED MODULE: ./src/js/base/editing/Typing.js\n\n\n        function Typing_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Typing_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Typing_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Typing_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Typing_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * @class editing.Typing\n         *\n         * Typing\n         *\n         */\n\n\n        var Typing_Typing = /*#__PURE__*/function () {\n          function Typing(context) {\n            Typing_classCallCheck(this, Typing); // a Bullet instance to toggle lists off\n\n            this.bullet = new Bullet_Bullet();\n            this.options = context.options;\n          }\n          /**\n           * insert tab\n           *\n           * @param {WrappedRange} rng\n           * @param {Number} tabsize\n           */\n\n\n          Typing_createClass(Typing, [{\n            key: \"insertTab\",\n            value: function insertTab(rng, tabsize) {\n              var tab = dom.createText(new Array(tabsize + 1).join(dom.NBSP_CHAR));\n              rng = rng.deleteContents();\n              rng.insertNode(tab, true);\n              rng = range.create(tab, tabsize);\n              rng.select();\n            }\n            /**\n             * insert paragraph\n             *\n             * @param {jQuery} $editable\n             * @param {WrappedRange} rng Can be used in unit tests to \"mock\" the range\n             *\n             * blockquoteBreakingLevel\n             *   0 - No break, the new paragraph remains inside the quote\n             *   1 - Break the first blockquote in the ancestors list\n             *   2 - Break all blockquotes, so that the new paragraph is not quoted (this is the default)\n             */\n\n          }, {\n            key: \"insertParagraph\",\n            value: function insertParagraph(editable, rng) {\n              rng = rng || range.create(editable); // deleteContents on range.\n\n              rng = rng.deleteContents(); // Wrap range if it needs to be wrapped by paragraph\n\n              rng = rng.wrapBodyInlineWithPara(); // finding paragraph\n\n              var splitRoot = dom.ancestor(rng.sc, dom.isPara);\n              var nextPara; // on paragraph: split paragraph\n\n              if (splitRoot) {\n                // if it is an empty line with li\n                if (dom.isLi(splitRoot) && (dom.isEmpty(splitRoot) || dom.deepestChildIsEmpty(splitRoot))) {\n                  // toggle UL/OL and escape\n                  this.bullet.toggleList(splitRoot.parentNode.nodeName);\n                  return;\n                } else {\n                  var blockquote = null;\n\n                  if (this.options.blockquoteBreakingLevel === 1) {\n                    blockquote = dom.ancestor(splitRoot, dom.isBlockquote);\n                  } else if (this.options.blockquoteBreakingLevel === 2) {\n                    blockquote = dom.lastAncestor(splitRoot, dom.isBlockquote);\n                  }\n\n                  if (blockquote) {\n                    // We're inside a blockquote and options ask us to break it\n                    nextPara = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(dom.emptyPara)[0]; // If the split is right before a <br>, remove it so that there's no \"empty line\"\n                    // after the split in the new blockquote created\n\n                    if (dom.isRightEdgePoint(rng.getStartPoint()) && dom.isBR(rng.sc.nextSibling)) {\n                      external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(rng.sc.nextSibling).remove();\n                    }\n\n                    var split = dom.splitTree(blockquote, rng.getStartPoint(), {\n                      isDiscardEmptySplits: true\n                    });\n\n                    if (split) {\n                      split.parentNode.insertBefore(nextPara, split);\n                    } else {\n                      dom.insertAfter(nextPara, blockquote); // There's no split if we were at the end of the blockquote\n                    }\n                  } else {\n                    nextPara = dom.splitTree(splitRoot, rng.getStartPoint()); // not a blockquote, just insert the paragraph\n\n                    var emptyAnchors = dom.listDescendant(splitRoot, dom.isEmptyAnchor);\n                    emptyAnchors = emptyAnchors.concat(dom.listDescendant(nextPara, dom.isEmptyAnchor));\n                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(emptyAnchors, function (idx, anchor) {\n                      dom.remove(anchor);\n                    }); // replace empty heading, pre or custom-made styleTag with P tag\n\n                    if ((dom.isHeading(nextPara) || dom.isPre(nextPara) || dom.isCustomStyleTag(nextPara)) && dom.isEmpty(nextPara)) {\n                      nextPara = dom.replace(nextPara, 'p');\n                    }\n                  }\n                } // no paragraph: insert empty paragraph\n\n              } else {\n                var next = rng.sc.childNodes[rng.so];\n                nextPara = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(dom.emptyPara)[0];\n\n                if (next) {\n                  rng.sc.insertBefore(nextPara, next);\n                } else {\n                  rng.sc.appendChild(nextPara);\n                }\n              }\n\n              range.create(nextPara, 0).normalize().select().scrollIntoView(editable);\n            }\n          }]);\n          return Typing;\n        }(); // CONCATENATED MODULE: ./src/js/base/editing/Table.js\n\n\n        function Table_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Table_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Table_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Table_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Table_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * @class Create a virtual table to create what actions to do in change.\n         * @param {object} startPoint Cell selected to apply change.\n         * @param {enum} where  Where change will be applied Row or Col. Use enum: TableResultAction.where\n         * @param {enum} action Action to be applied. Use enum: TableResultAction.requestAction\n         * @param {object} domTable Dom element of table to make changes.\n         */\n\n\n        var TableResultAction = function TableResultAction(startPoint, where, action, domTable) {\n          var _startPoint = {\n            'colPos': 0,\n            'rowPos': 0\n          };\n          var _virtualTable = [];\n          var _actionCellList = []; /// ///////////////////////////////////////////\n          // Private functions\n          /// ///////////////////////////////////////////\n\n          /**\n           * Set the startPoint of action.\n           */\n\n          function setStartPoint() {\n            if (!startPoint || !startPoint.tagName || startPoint.tagName.toLowerCase() !== 'td' && startPoint.tagName.toLowerCase() !== 'th') {\n              // Impossible to identify start Cell point\n              return;\n            }\n\n            _startPoint.colPos = startPoint.cellIndex;\n\n            if (!startPoint.parentElement || !startPoint.parentElement.tagName || startPoint.parentElement.tagName.toLowerCase() !== 'tr') {\n              // Impossible to identify start Row point\n              return;\n            }\n\n            _startPoint.rowPos = startPoint.parentElement.rowIndex;\n          }\n          /**\n           * Define virtual table position info object.\n           *\n           * @param {int} rowIndex Index position in line of virtual table.\n           * @param {int} cellIndex Index position in column of virtual table.\n           * @param {object} baseRow Row affected by this position.\n           * @param {object} baseCell Cell affected by this position.\n           * @param {bool} isSpan Inform if it is an span cell/row.\n           */\n\n\n          function setVirtualTablePosition(rowIndex, cellIndex, baseRow, baseCell, isRowSpan, isColSpan, isVirtualCell) {\n            var objPosition = {\n              'baseRow': baseRow,\n              'baseCell': baseCell,\n              'isRowSpan': isRowSpan,\n              'isColSpan': isColSpan,\n              'isVirtual': isVirtualCell\n            };\n\n            if (!_virtualTable[rowIndex]) {\n              _virtualTable[rowIndex] = [];\n            }\n\n            _virtualTable[rowIndex][cellIndex] = objPosition;\n          }\n          /**\n           * Create action cell object.\n           *\n           * @param {object} virtualTableCellObj Object of specific position on virtual table.\n           * @param {enum} resultAction Action to be applied in that item.\n           */\n\n\n          function getActionCell(virtualTableCellObj, resultAction, virtualRowPosition, virtualColPosition) {\n            return {\n              'baseCell': virtualTableCellObj.baseCell,\n              'action': resultAction,\n              'virtualTable': {\n                'rowIndex': virtualRowPosition,\n                'cellIndex': virtualColPosition\n              }\n            };\n          }\n          /**\n           * Recover free index of row to append Cell.\n           *\n           * @param {int} rowIndex Index of row to find free space.\n           * @param {int} cellIndex Index of cell to find free space in table.\n           */\n\n\n          function recoverCellIndex(rowIndex, cellIndex) {\n            if (!_virtualTable[rowIndex]) {\n              return cellIndex;\n            }\n\n            if (!_virtualTable[rowIndex][cellIndex]) {\n              return cellIndex;\n            }\n\n            var newCellIndex = cellIndex;\n\n            while (_virtualTable[rowIndex][newCellIndex]) {\n              newCellIndex++;\n\n              if (!_virtualTable[rowIndex][newCellIndex]) {\n                return newCellIndex;\n              }\n            }\n          }\n          /**\n           * Recover info about row and cell and add information to virtual table.\n           *\n           * @param {object} row Row to recover information.\n           * @param {object} cell Cell to recover information.\n           */\n\n\n          function addCellInfoToVirtual(row, cell) {\n            var cellIndex = recoverCellIndex(row.rowIndex, cell.cellIndex);\n            var cellHasColspan = cell.colSpan > 1;\n            var cellHasRowspan = cell.rowSpan > 1;\n            var isThisSelectedCell = row.rowIndex === _startPoint.rowPos && cell.cellIndex === _startPoint.colPos;\n            setVirtualTablePosition(row.rowIndex, cellIndex, row, cell, cellHasRowspan, cellHasColspan, false); // Add span rows to virtual Table.\n\n            var rowspanNumber = cell.attributes.rowSpan ? parseInt(cell.attributes.rowSpan.value, 10) : 0;\n\n            if (rowspanNumber > 1) {\n              for (var rp = 1; rp < rowspanNumber; rp++) {\n                var rowspanIndex = row.rowIndex + rp;\n                adjustStartPoint(rowspanIndex, cellIndex, cell, isThisSelectedCell);\n                setVirtualTablePosition(rowspanIndex, cellIndex, row, cell, true, cellHasColspan, true);\n              }\n            } // Add span cols to virtual table.\n\n\n            var colspanNumber = cell.attributes.colSpan ? parseInt(cell.attributes.colSpan.value, 10) : 0;\n\n            if (colspanNumber > 1) {\n              for (var cp = 1; cp < colspanNumber; cp++) {\n                var cellspanIndex = recoverCellIndex(row.rowIndex, cellIndex + cp);\n                adjustStartPoint(row.rowIndex, cellspanIndex, cell, isThisSelectedCell);\n                setVirtualTablePosition(row.rowIndex, cellspanIndex, row, cell, cellHasRowspan, true, true);\n              }\n            }\n          }\n          /**\n           * Process validation and adjust of start point if needed\n           *\n           * @param {int} rowIndex\n           * @param {int} cellIndex\n           * @param {object} cell\n           * @param {bool} isSelectedCell\n           */\n\n\n          function adjustStartPoint(rowIndex, cellIndex, cell, isSelectedCell) {\n            if (rowIndex === _startPoint.rowPos && _startPoint.colPos >= cell.cellIndex && cell.cellIndex <= cellIndex && !isSelectedCell) {\n              _startPoint.colPos++;\n            }\n          }\n          /**\n           * Create virtual table of cells with all cells, including span cells.\n           */\n\n\n          function createVirtualTable() {\n            var rows = domTable.rows;\n\n            for (var rowIndex = 0; rowIndex < rows.length; rowIndex++) {\n              var cells = rows[rowIndex].cells;\n\n              for (var cellIndex = 0; cellIndex < cells.length; cellIndex++) {\n                addCellInfoToVirtual(rows[rowIndex], cells[cellIndex]);\n              }\n            }\n          }\n          /**\n           * Get action to be applied on the cell.\n           *\n           * @param {object} cell virtual table cell to apply action\n           */\n\n\n          function getDeleteResultActionToCell(cell) {\n            switch (where) {\n              case TableResultAction.where.Column:\n                if (cell.isColSpan) {\n                  return TableResultAction.resultAction.SubtractSpanCount;\n                }\n\n                break;\n\n              case TableResultAction.where.Row:\n                if (!cell.isVirtual && cell.isRowSpan) {\n                  return TableResultAction.resultAction.AddCell;\n                } else if (cell.isRowSpan) {\n                  return TableResultAction.resultAction.SubtractSpanCount;\n                }\n\n                break;\n            }\n\n            return TableResultAction.resultAction.RemoveCell;\n          }\n          /**\n           * Get action to be applied on the cell.\n           *\n           * @param {object} cell virtual table cell to apply action\n           */\n\n\n          function getAddResultActionToCell(cell) {\n            switch (where) {\n              case TableResultAction.where.Column:\n                if (cell.isColSpan) {\n                  return TableResultAction.resultAction.SumSpanCount;\n                } else if (cell.isRowSpan && cell.isVirtual) {\n                  return TableResultAction.resultAction.Ignore;\n                }\n\n                break;\n\n              case TableResultAction.where.Row:\n                if (cell.isRowSpan) {\n                  return TableResultAction.resultAction.SumSpanCount;\n                } else if (cell.isColSpan && cell.isVirtual) {\n                  return TableResultAction.resultAction.Ignore;\n                }\n\n                break;\n            }\n\n            return TableResultAction.resultAction.AddCell;\n          }\n\n          function init() {\n            setStartPoint();\n            createVirtualTable();\n          } /// ///////////////////////////////////////////\n          // Public functions\n          /// ///////////////////////////////////////////\n\n          /**\n           * Recover array os what to do in table.\n           */\n\n\n          this.getActionList = function () {\n            var fixedRow = where === TableResultAction.where.Row ? _startPoint.rowPos : -1;\n            var fixedCol = where === TableResultAction.where.Column ? _startPoint.colPos : -1;\n            var actualPosition = 0;\n            var canContinue = true;\n\n            while (canContinue) {\n              var rowPosition = fixedRow >= 0 ? fixedRow : actualPosition;\n              var colPosition = fixedCol >= 0 ? fixedCol : actualPosition;\n              var row = _virtualTable[rowPosition];\n\n              if (!row) {\n                canContinue = false;\n                return _actionCellList;\n              }\n\n              var cell = row[colPosition];\n\n              if (!cell) {\n                canContinue = false;\n                return _actionCellList;\n              } // Define action to be applied in this cell\n\n\n              var resultAction = TableResultAction.resultAction.Ignore;\n\n              switch (action) {\n                case TableResultAction.requestAction.Add:\n                  resultAction = getAddResultActionToCell(cell);\n                  break;\n\n                case TableResultAction.requestAction.Delete:\n                  resultAction = getDeleteResultActionToCell(cell);\n                  break;\n              }\n\n              _actionCellList.push(getActionCell(cell, resultAction, rowPosition, colPosition));\n\n              actualPosition++;\n            }\n\n            return _actionCellList;\n          };\n\n          init();\n        };\n        /**\n        *\n        * Where action occours enum.\n        */\n\n\n        TableResultAction.where = {\n          'Row': 0,\n          'Column': 1\n        };\n        /**\n        *\n        * Requested action to apply enum.\n        */\n\n        TableResultAction.requestAction = {\n          'Add': 0,\n          'Delete': 1\n        };\n        /**\n        *\n        * Result action to be executed enum.\n        */\n\n        TableResultAction.resultAction = {\n          'Ignore': 0,\n          'SubtractSpanCount': 1,\n          'RemoveCell': 2,\n          'AddCell': 3,\n          'SumSpanCount': 4\n        };\n        /**\n         *\n         * @class editing.Table\n         *\n         * Table\n         *\n         */\n\n        var Table_Table = /*#__PURE__*/function () {\n          function Table() {\n            Table_classCallCheck(this, Table);\n          }\n\n          Table_createClass(Table, [{\n            key: \"tab\",\n\n            /**\n             * handle tab key\n             *\n             * @param {WrappedRange} rng\n             * @param {Boolean} isShift\n             */\n            value: function tab(rng, isShift) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var table = dom.ancestor(cell, dom.isTable);\n              var cells = dom.listDescendant(table, dom.isCell);\n              var nextCell = lists[isShift ? 'prev' : 'next'](cells, cell);\n\n              if (nextCell) {\n                range.create(nextCell, 0).select();\n              }\n            }\n            /**\n             * Add a new row\n             *\n             * @param {WrappedRange} rng\n             * @param {String} position (top/bottom)\n             * @return {Node}\n             */\n\n          }, {\n            key: \"addRow\",\n            value: function addRow(rng, position) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var currentTr = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest('tr');\n              var trAttributes = this.recoverAttributes(currentTr);\n              var html = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<tr' + trAttributes + '></tr>');\n              var vTable = new TableResultAction(cell, TableResultAction.where.Row, TableResultAction.requestAction.Add, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentTr).closest('table')[0]);\n              var actions = vTable.getActionList();\n\n              for (var idCell = 0; idCell < actions.length; idCell++) {\n                var currentCell = actions[idCell];\n                var tdAttributes = this.recoverAttributes(currentCell.baseCell);\n\n                switch (currentCell.action) {\n                  case TableResultAction.resultAction.AddCell:\n                    html.append('<td' + tdAttributes + '>' + dom.blank + '</td>');\n                    break;\n\n                  case TableResultAction.resultAction.SumSpanCount:\n                    {\n                      if (position === 'top') {\n                        var baseCellTr = currentCell.baseCell.parent;\n                        var isTopFromRowSpan = (!baseCellTr ? 0 : currentCell.baseCell.closest('tr').rowIndex) <= currentTr[0].rowIndex;\n\n                        if (isTopFromRowSpan) {\n                          var newTd = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div></div>').append(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<td' + tdAttributes + '>' + dom.blank + '</td>').removeAttr('rowspan')).html();\n                          html.append(newTd);\n                          break;\n                        }\n                      }\n\n                      var rowspanNumber = parseInt(currentCell.baseCell.rowSpan, 10);\n                      rowspanNumber++;\n                      currentCell.baseCell.setAttribute('rowSpan', rowspanNumber);\n                    }\n                    break;\n                }\n              }\n\n              if (position === 'top') {\n                currentTr.before(html);\n              } else {\n                var cellHasRowspan = cell.rowSpan > 1;\n\n                if (cellHasRowspan) {\n                  var lastTrIndex = currentTr[0].rowIndex + (cell.rowSpan - 2);\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentTr).parent().find('tr')[lastTrIndex]).after(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(html));\n                  return;\n                }\n\n                currentTr.after(html);\n              }\n            }\n            /**\n             * Add a new col\n             *\n             * @param {WrappedRange} rng\n             * @param {String} position (left/right)\n             * @return {Node}\n             */\n\n          }, {\n            key: \"addCol\",\n            value: function addCol(rng, position) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var row = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest('tr');\n              var rowsGroup = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(row).siblings();\n              rowsGroup.push(row);\n              var vTable = new TableResultAction(cell, TableResultAction.where.Column, TableResultAction.requestAction.Add, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(row).closest('table')[0]);\n              var actions = vTable.getActionList();\n\n              for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n                var currentCell = actions[actionIndex];\n                var tdAttributes = this.recoverAttributes(currentCell.baseCell);\n\n                switch (currentCell.action) {\n                  case TableResultAction.resultAction.AddCell:\n                    if (position === 'right') {\n                      external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentCell.baseCell).after('<td' + tdAttributes + '>' + dom.blank + '</td>');\n                    } else {\n                      external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentCell.baseCell).before('<td' + tdAttributes + '>' + dom.blank + '</td>');\n                    }\n\n                    break;\n\n                  case TableResultAction.resultAction.SumSpanCount:\n                    if (position === 'right') {\n                      var colspanNumber = parseInt(currentCell.baseCell.colSpan, 10);\n                      colspanNumber++;\n                      currentCell.baseCell.setAttribute('colSpan', colspanNumber);\n                    } else {\n                      external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(currentCell.baseCell).before('<td' + tdAttributes + '>' + dom.blank + '</td>');\n                    }\n\n                    break;\n                }\n              }\n            }\n            /*\n            * Copy attributes from element.\n            *\n            * @param {object} Element to recover attributes.\n            * @return {string} Copied string elements.\n            */\n\n          }, {\n            key: \"recoverAttributes\",\n            value: function recoverAttributes(el) {\n              var resultStr = '';\n\n              if (!el) {\n                return resultStr;\n              }\n\n              var attrList = el.attributes || [];\n\n              for (var i = 0; i < attrList.length; i++) {\n                if (attrList[i].name.toLowerCase() === 'id') {\n                  continue;\n                }\n\n                if (attrList[i].specified) {\n                  resultStr += ' ' + attrList[i].name + '=\\'' + attrList[i].value + '\\'';\n                }\n              }\n\n              return resultStr;\n            }\n            /**\n             * Delete current row\n             *\n             * @param {WrappedRange} rng\n             * @return {Node}\n             */\n\n          }, {\n            key: \"deleteRow\",\n            value: function deleteRow(rng) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var row = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest('tr');\n              var cellPos = row.children('td, th').index(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell));\n              var rowPos = row[0].rowIndex;\n              var vTable = new TableResultAction(cell, TableResultAction.where.Row, TableResultAction.requestAction.Delete, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(row).closest('table')[0]);\n              var actions = vTable.getActionList();\n\n              for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n                if (!actions[actionIndex]) {\n                  continue;\n                }\n\n                var baseCell = actions[actionIndex].baseCell;\n                var virtualPosition = actions[actionIndex].virtualTable;\n                var hasRowspan = baseCell.rowSpan && baseCell.rowSpan > 1;\n                var rowspanNumber = hasRowspan ? parseInt(baseCell.rowSpan, 10) : 0;\n\n                switch (actions[actionIndex].action) {\n                  case TableResultAction.resultAction.Ignore:\n                    continue;\n\n                  case TableResultAction.resultAction.AddCell:\n                    {\n                      var nextRow = row.next('tr')[0];\n\n                      if (!nextRow) {\n                        continue;\n                      }\n\n                      var cloneRow = row[0].cells[cellPos];\n\n                      if (hasRowspan) {\n                        if (rowspanNumber > 2) {\n                          rowspanNumber--;\n                          nextRow.insertBefore(cloneRow, nextRow.cells[cellPos]);\n                          nextRow.cells[cellPos].setAttribute('rowSpan', rowspanNumber);\n                          nextRow.cells[cellPos].innerHTML = '';\n                        } else if (rowspanNumber === 2) {\n                          nextRow.insertBefore(cloneRow, nextRow.cells[cellPos]);\n                          nextRow.cells[cellPos].removeAttribute('rowSpan');\n                          nextRow.cells[cellPos].innerHTML = '';\n                        }\n                      }\n                    }\n                    continue;\n\n                  case TableResultAction.resultAction.SubtractSpanCount:\n                    if (hasRowspan) {\n                      if (rowspanNumber > 2) {\n                        rowspanNumber--;\n                        baseCell.setAttribute('rowSpan', rowspanNumber);\n\n                        if (virtualPosition.rowIndex !== rowPos && baseCell.cellIndex === cellPos) {\n                          baseCell.innerHTML = '';\n                        }\n                      } else if (rowspanNumber === 2) {\n                        baseCell.removeAttribute('rowSpan');\n\n                        if (virtualPosition.rowIndex !== rowPos && baseCell.cellIndex === cellPos) {\n                          baseCell.innerHTML = '';\n                        }\n                      }\n                    }\n\n                    continue;\n\n                  case TableResultAction.resultAction.RemoveCell:\n                    // Do not need remove cell because row will be deleted.\n                    continue;\n                }\n              }\n\n              row.remove();\n            }\n            /**\n             * Delete current col\n             *\n             * @param {WrappedRange} rng\n             * @return {Node}\n             */\n\n          }, {\n            key: \"deleteCol\",\n            value: function deleteCol(rng) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              var row = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest('tr');\n              var cellPos = row.children('td, th').index(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell));\n              var vTable = new TableResultAction(cell, TableResultAction.where.Column, TableResultAction.requestAction.Delete, external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(row).closest('table')[0]);\n              var actions = vTable.getActionList();\n\n              for (var actionIndex = 0; actionIndex < actions.length; actionIndex++) {\n                if (!actions[actionIndex]) {\n                  continue;\n                }\n\n                switch (actions[actionIndex].action) {\n                  case TableResultAction.resultAction.Ignore:\n                    continue;\n\n                  case TableResultAction.resultAction.SubtractSpanCount:\n                    {\n                      var baseCell = actions[actionIndex].baseCell;\n                      var hasColspan = baseCell.colSpan && baseCell.colSpan > 1;\n\n                      if (hasColspan) {\n                        var colspanNumber = baseCell.colSpan ? parseInt(baseCell.colSpan, 10) : 0;\n\n                        if (colspanNumber > 2) {\n                          colspanNumber--;\n                          baseCell.setAttribute('colSpan', colspanNumber);\n\n                          if (baseCell.cellIndex === cellPos) {\n                            baseCell.innerHTML = '';\n                          }\n                        } else if (colspanNumber === 2) {\n                          baseCell.removeAttribute('colSpan');\n\n                          if (baseCell.cellIndex === cellPos) {\n                            baseCell.innerHTML = '';\n                          }\n                        }\n                      }\n                    }\n                    continue;\n\n                  case TableResultAction.resultAction.RemoveCell:\n                    dom.remove(actions[actionIndex].baseCell, true);\n                    continue;\n                }\n              }\n            }\n            /**\n             * create empty table element\n             *\n             * @param {Number} rowCount\n             * @param {Number} colCount\n             * @return {Node}\n             */\n\n          }, {\n            key: \"createTable\",\n            value: function createTable(colCount, rowCount, options) {\n              var tds = [];\n              var tdHTML;\n\n              for (var idxCol = 0; idxCol < colCount; idxCol++) {\n                tds.push('<td>' + dom.blank + '</td>');\n              }\n\n              tdHTML = tds.join('');\n              var trs = [];\n              var trHTML;\n\n              for (var idxRow = 0; idxRow < rowCount; idxRow++) {\n                trs.push('<tr>' + tdHTML + '</tr>');\n              }\n\n              trHTML = trs.join('');\n              var $table = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<table>' + trHTML + '</table>');\n\n              if (options && options.tableClassName) {\n                $table.addClass(options.tableClassName);\n              }\n\n              return $table[0];\n            }\n            /**\n             * Delete current table\n             *\n             * @param {WrappedRange} rng\n             * @return {Node}\n             */\n\n          }, {\n            key: \"deleteTable\",\n            value: function deleteTable(rng) {\n              var cell = dom.ancestor(rng.commonAncestor(), dom.isCell);\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(cell).closest('table').remove();\n            }\n          }]);\n          return Table;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Editor.js\n\n\n        function Editor_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Editor_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Editor_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Editor_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Editor_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var KEY_BOGUS = 'bogus';\n        /**\n         * @class Editor\n         */\n\n        var Editor_Editor = /*#__PURE__*/function () {\n          function Editor(context) {\n            var _this = this;\n\n            Editor_classCallCheck(this, Editor);\n            this.context = context;\n            this.$note = context.layoutInfo.note;\n            this.$editor = context.layoutInfo.editor;\n            this.$editable = context.layoutInfo.editable;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            this.editable = this.$editable[0];\n            this.lastRange = null;\n            this.snapshot = null;\n            this.style = new Style_Style();\n            this.table = new Table_Table();\n            this.typing = new Typing_Typing(context);\n            this.bullet = new Bullet_Bullet();\n            this.history = new History_History(context);\n            this.context.memo('help.escape', this.lang.help.escape);\n            this.context.memo('help.undo', this.lang.help.undo);\n            this.context.memo('help.redo', this.lang.help.redo);\n            this.context.memo('help.tab', this.lang.help.tab);\n            this.context.memo('help.untab', this.lang.help.untab);\n            this.context.memo('help.insertParagraph', this.lang.help.insertParagraph);\n            this.context.memo('help.insertOrderedList', this.lang.help.insertOrderedList);\n            this.context.memo('help.insertUnorderedList', this.lang.help.insertUnorderedList);\n            this.context.memo('help.indent', this.lang.help.indent);\n            this.context.memo('help.outdent', this.lang.help.outdent);\n            this.context.memo('help.formatPara', this.lang.help.formatPara);\n            this.context.memo('help.insertHorizontalRule', this.lang.help.insertHorizontalRule);\n            this.context.memo('help.fontName', this.lang.help.fontName); // native commands(with execCommand), generate function for execCommand\n\n            var commands = ['bold', 'italic', 'underline', 'strikethrough', 'superscript', 'subscript', 'justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'formatBlock', 'removeFormat', 'backColor'];\n\n            for (var idx = 0, len = commands.length; idx < len; idx++) {\n              this[commands[idx]] = function (sCmd) {\n                return function (value) {\n                  _this.beforeCommand();\n\n                  document.execCommand(sCmd, false, value);\n\n                  _this.afterCommand(true);\n                };\n              }(commands[idx]);\n\n              this.context.memo('help.' + commands[idx], this.lang.help[commands[idx]]);\n            }\n\n            this.fontName = this.wrapCommand(function (value) {\n              return _this.fontStyling('font-family', env.validFontName(value));\n            });\n            this.fontSize = this.wrapCommand(function (value) {\n              var unit = _this.currentStyle()['font-size-unit'];\n\n              return _this.fontStyling('font-size', value + unit);\n            });\n            this.fontSizeUnit = this.wrapCommand(function (value) {\n              var size = _this.currentStyle()['font-size'];\n\n              return _this.fontStyling('font-size', size + value);\n            });\n\n            for (var _idx = 1; _idx <= 6; _idx++) {\n              this['formatH' + _idx] = function (idx) {\n                return function () {\n                  _this.formatBlock('H' + idx);\n                };\n              }(_idx);\n\n              this.context.memo('help.formatH' + _idx, this.lang.help['formatH' + _idx]);\n            }\n\n            this.insertParagraph = this.wrapCommand(function () {\n              _this.typing.insertParagraph(_this.editable);\n            });\n            this.insertOrderedList = this.wrapCommand(function () {\n              _this.bullet.insertOrderedList(_this.editable);\n            });\n            this.insertUnorderedList = this.wrapCommand(function () {\n              _this.bullet.insertUnorderedList(_this.editable);\n            });\n            this.indent = this.wrapCommand(function () {\n              _this.bullet.indent(_this.editable);\n            });\n            this.outdent = this.wrapCommand(function () {\n              _this.bullet.outdent(_this.editable);\n            });\n            /**\n             * insertNode\n             * insert node\n             * @param {Node} node\n             */\n\n            this.insertNode = this.wrapCommand(function (node) {\n              if (_this.isLimited(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).text().length)) {\n                return;\n              }\n\n              var rng = _this.getLastRange();\n\n              rng.insertNode(node);\n\n              _this.setLastRange(range.createFromNodeAfter(node).select());\n            });\n            /**\n             * insert text\n             * @param {String} text\n             */\n\n            this.insertText = this.wrapCommand(function (text) {\n              if (_this.isLimited(text.length)) {\n                return;\n              }\n\n              var rng = _this.getLastRange();\n\n              var textNode = rng.insertNode(dom.createText(text));\n\n              _this.setLastRange(range.create(textNode, dom.nodeLength(textNode)).select());\n            });\n            /**\n             * paste HTML\n             * @param {String} markup\n             */\n\n            this.pasteHTML = this.wrapCommand(function (markup) {\n              if (_this.isLimited(markup.length)) {\n                return;\n              }\n\n              markup = _this.context.invoke('codeview.purify', markup);\n\n              var contents = _this.getLastRange().pasteHTML(markup);\n\n              _this.setLastRange(range.createFromNodeAfter(lists.last(contents)).select());\n            });\n            /**\n             * formatBlock\n             *\n             * @param {String} tagName\n             */\n\n            this.formatBlock = this.wrapCommand(function (tagName, $target) {\n              var onApplyCustomStyle = _this.options.callbacks.onApplyCustomStyle;\n\n              if (onApplyCustomStyle) {\n                onApplyCustomStyle.call(_this, $target, _this.context, _this.onFormatBlock);\n              } else {\n                _this.onFormatBlock(tagName, $target);\n              }\n            });\n            /**\n             * insert horizontal rule\n             */\n\n            this.insertHorizontalRule = this.wrapCommand(function () {\n              var hrNode = _this.getLastRange().insertNode(dom.create('HR'));\n\n              if (hrNode.nextSibling) {\n                _this.setLastRange(range.create(hrNode.nextSibling, 0).normalize().select());\n              }\n            });\n            /**\n             * lineHeight\n             * @param {String} value\n             */\n\n            this.lineHeight = this.wrapCommand(function (value) {\n              _this.style.stylePara(_this.getLastRange(), {\n                lineHeight: value\n              });\n            });\n            /**\n             * create link (command)\n             *\n             * @param {Object} linkInfo\n             */\n\n            this.createLink = this.wrapCommand(function (linkInfo) {\n              var linkUrl = linkInfo.url;\n              var linkText = linkInfo.text;\n              var isNewWindow = linkInfo.isNewWindow;\n              var checkProtocol = linkInfo.checkProtocol;\n\n              var rng = linkInfo.range || _this.getLastRange();\n\n              var additionalTextLength = linkText.length - rng.toString().length;\n\n              if (additionalTextLength > 0 && _this.isLimited(additionalTextLength)) {\n                return;\n              }\n\n              var isTextChanged = rng.toString() !== linkText; // handle spaced urls from input\n\n              if (typeof linkUrl === 'string') {\n                linkUrl = linkUrl.trim();\n              }\n\n              if (_this.options.onCreateLink) {\n                linkUrl = _this.options.onCreateLink(linkUrl);\n              } else if (checkProtocol) {\n                // if url doesn't have any protocol and not even a relative or a label, use http:// as default\n                linkUrl = /^([A-Za-z][A-Za-z0-9+-.]*\\:|#|\\/)/.test(linkUrl) ? linkUrl : _this.options.defaultProtocol + linkUrl;\n              }\n\n              var anchors = [];\n\n              if (isTextChanged) {\n                rng = rng.deleteContents();\n                var anchor = rng.insertNode(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<A>' + linkText + '</A>')[0]);\n                anchors.push(anchor);\n              } else {\n                anchors = _this.style.styleNodes(rng, {\n                  nodeName: 'A',\n                  expandClosestSibling: true,\n                  onlyPartialContains: true\n                });\n              }\n\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(anchors, function (idx, anchor) {\n                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(anchor).attr('href', linkUrl);\n\n                if (isNewWindow) {\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(anchor).attr('target', '_blank');\n                } else {\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(anchor).removeAttr('target');\n                }\n              });\n\n              _this.setLastRange(_this.createRangeFromList(anchors).select());\n            });\n            /**\n             * setting color\n             *\n             * @param {Object} sObjColor  color code\n             * @param {String} sObjColor.foreColor foreground color\n             * @param {String} sObjColor.backColor background color\n             */\n\n            this.color = this.wrapCommand(function (colorInfo) {\n              var foreColor = colorInfo.foreColor;\n              var backColor = colorInfo.backColor;\n\n              if (foreColor) {\n                document.execCommand('foreColor', false, foreColor);\n              }\n\n              if (backColor) {\n                document.execCommand('backColor', false, backColor);\n              }\n            });\n            /**\n             * Set foreground color\n             *\n             * @param {String} colorCode foreground color code\n             */\n\n            this.foreColor = this.wrapCommand(function (colorInfo) {\n              document.execCommand('foreColor', false, colorInfo);\n            });\n            /**\n             * insert Table\n             *\n             * @param {String} dimension of table (ex : \"5x5\")\n             */\n\n            this.insertTable = this.wrapCommand(function (dim) {\n              var dimension = dim.split('x');\n\n              var rng = _this.getLastRange().deleteContents();\n\n              rng.insertNode(_this.table.createTable(dimension[0], dimension[1], _this.options));\n            });\n            /**\n             * remove media object and Figure Elements if media object is img with Figure.\n             */\n\n            this.removeMedia = this.wrapCommand(function () {\n              var $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(_this.restoreTarget()).parent();\n\n              if ($target.closest('figure').length) {\n                $target.closest('figure').remove();\n              } else {\n                $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(_this.restoreTarget()).detach();\n              }\n\n              _this.context.triggerEvent('media.delete', $target, _this.$editable);\n            });\n            /**\n             * float me\n             *\n             * @param {String} value\n             */\n\n            this.floatMe = this.wrapCommand(function (value) {\n              var $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(_this.restoreTarget());\n              $target.toggleClass('note-float-left', value === 'left');\n              $target.toggleClass('note-float-right', value === 'right');\n              $target.css('float', value === 'none' ? '' : value);\n            });\n            /**\n             * resize overlay element\n             * @param {String} value\n             */\n\n            this.resize = this.wrapCommand(function (value) {\n              var $target = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(_this.restoreTarget());\n              value = parseFloat(value);\n\n              if (value === 0) {\n                $target.css('width', '');\n              } else {\n                $target.css({\n                  width: value * 100 + '%',\n                  height: ''\n                });\n              }\n            });\n          }\n\n          Editor_createClass(Editor, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this; // bind custom events\n\n\n              this.$editable.on('keydown', function (event) {\n                if (event.keyCode === core_key.code.ENTER) {\n                  _this2.context.triggerEvent('enter', event);\n                }\n\n                _this2.context.triggerEvent('keydown', event); // keep a snapshot to limit text on input event\n\n\n                _this2.snapshot = _this2.history.makeSnapshot();\n                _this2.hasKeyShortCut = false;\n\n                if (!event.isDefaultPrevented()) {\n                  if (_this2.options.shortcuts) {\n                    _this2.hasKeyShortCut = _this2.handleKeyMap(event);\n                  } else {\n                    _this2.preventDefaultEditableShortCuts(event);\n                  }\n                }\n\n                if (_this2.isLimited(1, event)) {\n                  var lastRange = _this2.getLastRange();\n\n                  if (lastRange.eo - lastRange.so === 0) {\n                    return false;\n                  }\n                }\n\n                _this2.setLastRange(); // record undo in the key event except keyMap.\n\n\n                if (_this2.options.recordEveryKeystroke) {\n                  if (_this2.hasKeyShortCut === false) {\n                    _this2.history.recordUndo();\n                  }\n                }\n              }).on('keyup', function (event) {\n                _this2.setLastRange();\n\n                _this2.context.triggerEvent('keyup', event);\n              }).on('focus', function (event) {\n                _this2.setLastRange();\n\n                _this2.context.triggerEvent('focus', event);\n              }).on('blur', function (event) {\n                _this2.context.triggerEvent('blur', event);\n              }).on('mousedown', function (event) {\n                _this2.context.triggerEvent('mousedown', event);\n              }).on('mouseup', function (event) {\n                _this2.setLastRange();\n\n                _this2.history.recordUndo();\n\n                _this2.context.triggerEvent('mouseup', event);\n              }).on('scroll', function (event) {\n                _this2.context.triggerEvent('scroll', event);\n              }).on('paste', function (event) {\n                _this2.setLastRange();\n\n                _this2.context.triggerEvent('paste', event);\n              }).on('input', function () {\n                // To limit composition characters (e.g. Korean)\n                if (_this2.isLimited(0) && _this2.snapshot) {\n                  _this2.history.applySnapshot(_this2.snapshot);\n                }\n              });\n              this.$editable.attr('spellcheck', this.options.spellCheck);\n              this.$editable.attr('autocorrect', this.options.spellCheck);\n\n              if (this.options.disableGrammar) {\n                this.$editable.attr('data-gramm', false);\n              } // init content before set event\n\n\n              this.$editable.html(dom.html(this.$note) || dom.emptyPara);\n              this.$editable.on(env.inputEventName, func.debounce(function () {\n                _this2.context.triggerEvent('change', _this2.$editable.html(), _this2.$editable);\n              }, 10));\n              this.$editable.on('focusin', function (event) {\n                _this2.context.triggerEvent('focusin', event);\n              }).on('focusout', function (event) {\n                _this2.context.triggerEvent('focusout', event);\n              });\n\n              if (this.options.airMode) {\n                if (this.options.overrideContextMenu) {\n                  this.$editor.on('contextmenu', function (event) {\n                    _this2.context.triggerEvent('contextmenu', event);\n\n                    return false;\n                  });\n                }\n              } else {\n                if (this.options.width) {\n                  this.$editor.outerWidth(this.options.width);\n                }\n\n                if (this.options.height) {\n                  this.$editable.outerHeight(this.options.height);\n                }\n\n                if (this.options.maxHeight) {\n                  this.$editable.css('max-height', this.options.maxHeight);\n                }\n\n                if (this.options.minHeight) {\n                  this.$editable.css('min-height', this.options.minHeight);\n                }\n              }\n\n              this.history.recordUndo();\n              this.setLastRange();\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$editable.off();\n            }\n          }, {\n            key: \"handleKeyMap\",\n            value: function handleKeyMap(event) {\n              var keyMap = this.options.keyMap[env.isMac ? 'mac' : 'pc'];\n              var keys = [];\n\n              if (event.metaKey) {\n                keys.push('CMD');\n              }\n\n              if (event.ctrlKey && !event.altKey) {\n                keys.push('CTRL');\n              }\n\n              if (event.shiftKey) {\n                keys.push('SHIFT');\n              }\n\n              var keyName = core_key.nameFromCode[event.keyCode];\n\n              if (keyName) {\n                keys.push(keyName);\n              }\n\n              var eventName = keyMap[keys.join('+')];\n\n              if (keyName === 'TAB' && !this.options.tabDisable) {\n                this.afterCommand();\n              } else if (eventName) {\n                if (this.context.invoke(eventName) !== false) {\n                  event.preventDefault(); // if keyMap action was invoked\n\n                  return true;\n                }\n              } else if (core_key.isEdit(event.keyCode)) {\n                this.afterCommand();\n              }\n\n              return false;\n            }\n          }, {\n            key: \"preventDefaultEditableShortCuts\",\n            value: function preventDefaultEditableShortCuts(event) {\n              // B(Bold, 66) / I(Italic, 73) / U(Underline, 85)\n              if ((event.ctrlKey || event.metaKey) && lists.contains([66, 73, 85], event.keyCode)) {\n                event.preventDefault();\n              }\n            }\n          }, {\n            key: \"isLimited\",\n            value: function isLimited(pad, event) {\n              pad = pad || 0;\n\n              if (typeof event !== 'undefined') {\n                if (core_key.isMove(event.keyCode) || core_key.isNavigation(event.keyCode) || event.ctrlKey || event.metaKey || lists.contains([core_key.code.BACKSPACE, core_key.code.DELETE], event.keyCode)) {\n                  return false;\n                }\n              }\n\n              if (this.options.maxTextLength > 0) {\n                if (this.$editable.text().length + pad > this.options.maxTextLength) {\n                  return true;\n                }\n              }\n\n              return false;\n            }\n            /**\n             * create range\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"createRange\",\n            value: function createRange() {\n              this.focus();\n              this.setLastRange();\n              return this.getLastRange();\n            }\n            /**\n             * create a new range from the list of elements\n             *\n             * @param {list} dom element list\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"createRangeFromList\",\n            value: function createRangeFromList(lst) {\n              var startRange = range.createFromNodeBefore(lists.head(lst));\n              var startPoint = startRange.getStartPoint();\n              var endRange = range.createFromNodeAfter(lists.last(lst));\n              var endPoint = endRange.getEndPoint();\n              return range.create(startPoint.node, startPoint.offset, endPoint.node, endPoint.offset);\n            }\n            /**\n             * set the last range\n             *\n             * if given rng is exist, set rng as the last range\n             * or create a new range at the end of the document\n             *\n             * @param {WrappedRange} rng\n             */\n\n          }, {\n            key: \"setLastRange\",\n            value: function setLastRange(rng) {\n              if (rng) {\n                this.lastRange = rng;\n              } else {\n                this.lastRange = range.create(this.editable);\n\n                if (external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.lastRange.sc).closest('.note-editable').length === 0) {\n                  this.lastRange = range.createFromBodyElement(this.editable);\n                }\n              }\n            }\n            /**\n             * get the last range\n             *\n             * if there is a saved last range, return it\n             * or create a new range and return it\n             *\n             * @return {WrappedRange}\n             */\n\n          }, {\n            key: \"getLastRange\",\n            value: function getLastRange() {\n              if (!this.lastRange) {\n                this.setLastRange();\n              }\n\n              return this.lastRange;\n            }\n            /**\n             * saveRange\n             *\n             * save current range\n             *\n             * @param {Boolean} [thenCollapse=false]\n             */\n\n          }, {\n            key: \"saveRange\",\n            value: function saveRange(thenCollapse) {\n              if (thenCollapse) {\n                this.getLastRange().collapse().select();\n              }\n            }\n            /**\n             * restoreRange\n             *\n             * restore lately range\n             */\n\n          }, {\n            key: \"restoreRange\",\n            value: function restoreRange() {\n              if (this.lastRange) {\n                this.lastRange.select();\n                this.focus();\n              }\n            }\n          }, {\n            key: \"saveTarget\",\n            value: function saveTarget(node) {\n              this.$editable.data('target', node);\n            }\n          }, {\n            key: \"clearTarget\",\n            value: function clearTarget() {\n              this.$editable.removeData('target');\n            }\n          }, {\n            key: \"restoreTarget\",\n            value: function restoreTarget() {\n              return this.$editable.data('target');\n            }\n            /**\n             * currentStyle\n             *\n             * current style\n             * @return {Object|Boolean} unfocus\n             */\n\n          }, {\n            key: \"currentStyle\",\n            value: function currentStyle() {\n              var rng = range.create();\n\n              if (rng) {\n                rng = rng.normalize();\n              }\n\n              return rng ? this.style.current(rng) : this.style.fromNode(this.$editable);\n            }\n            /**\n             * style from node\n             *\n             * @param {jQuery} $node\n             * @return {Object}\n             */\n\n          }, {\n            key: \"styleFromNode\",\n            value: function styleFromNode($node) {\n              return this.style.fromNode($node);\n            }\n            /**\n             * undo\n             */\n\n          }, {\n            key: \"undo\",\n            value: function undo() {\n              this.context.triggerEvent('before.command', this.$editable.html());\n              this.history.undo();\n              this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n            }\n            /*\n            * commit\n            */\n\n          }, {\n            key: \"commit\",\n            value: function commit() {\n              this.context.triggerEvent('before.command', this.$editable.html());\n              this.history.commit();\n              this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n            }\n            /**\n             * redo\n             */\n\n          }, {\n            key: \"redo\",\n            value: function redo() {\n              this.context.triggerEvent('before.command', this.$editable.html());\n              this.history.redo();\n              this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n            }\n            /**\n             * before command\n             */\n\n          }, {\n            key: \"beforeCommand\",\n            value: function beforeCommand() {\n              this.context.triggerEvent('before.command', this.$editable.html()); // Set styleWithCSS before run a command\n\n              document.execCommand('styleWithCSS', false, this.options.styleWithCSS); // keep focus on editable before command execution\n\n              this.focus();\n            }\n            /**\n             * after command\n             * @param {Boolean} isPreventTrigger\n             */\n\n          }, {\n            key: \"afterCommand\",\n            value: function afterCommand(isPreventTrigger) {\n              this.normalizeContent();\n              this.history.recordUndo();\n\n              if (!isPreventTrigger) {\n                this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n              }\n            }\n            /**\n             * handle tab key\n             */\n\n          }, {\n            key: \"tab\",\n            value: function tab() {\n              var rng = this.getLastRange();\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.table.tab(rng);\n              } else {\n                if (this.options.tabSize === 0) {\n                  return false;\n                }\n\n                if (!this.isLimited(this.options.tabSize)) {\n                  this.beforeCommand();\n                  this.typing.insertTab(rng, this.options.tabSize);\n                  this.afterCommand();\n                }\n              }\n            }\n            /**\n             * handle shift+tab key\n             */\n\n          }, {\n            key: \"untab\",\n            value: function untab() {\n              var rng = this.getLastRange();\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.table.tab(rng, true);\n              } else {\n                if (this.options.tabSize === 0) {\n                  return false;\n                }\n              }\n            }\n            /**\n             * run given function between beforeCommand and afterCommand\n             */\n\n          }, {\n            key: \"wrapCommand\",\n            value: function wrapCommand(fn) {\n              return function () {\n                this.beforeCommand();\n                fn.apply(this, arguments);\n                this.afterCommand();\n              };\n            }\n            /**\n             * insert image\n             *\n             * @param {String} src\n             * @param {String|Function} param\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"insertImage\",\n            value: function insertImage(src, param) {\n              var _this3 = this;\n\n              return createImage(src, param).then(function ($image) {\n                _this3.beforeCommand();\n\n                if (typeof param === 'function') {\n                  param($image);\n                } else {\n                  if (typeof param === 'string') {\n                    $image.attr('data-filename', param);\n                  }\n\n                  $image.css('width', Math.min(_this3.$editable.width(), $image.width()));\n                }\n\n                $image.show();\n\n                _this3.getLastRange().insertNode($image[0]);\n\n                _this3.setLastRange(range.createFromNodeAfter($image[0]).select());\n\n                _this3.afterCommand();\n              }).fail(function (e) {\n                _this3.context.triggerEvent('image.upload.error', e);\n              });\n            }\n            /**\n             * insertImages\n             * @param {File[]} files\n             */\n\n          }, {\n            key: \"insertImagesAsDataURL\",\n            value: function insertImagesAsDataURL(files) {\n              var _this4 = this;\n\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(files, function (idx, file) {\n                var filename = file.name;\n\n                if (_this4.options.maximumImageFileSize && _this4.options.maximumImageFileSize < file.size) {\n                  _this4.context.triggerEvent('image.upload.error', _this4.lang.image.maximumFileSizeError);\n                } else {\n                  readFileAsDataURL(file).then(function (dataURL) {\n                    return _this4.insertImage(dataURL, filename);\n                  }).fail(function () {\n                    _this4.context.triggerEvent('image.upload.error');\n                  });\n                }\n              });\n            }\n            /**\n             * insertImagesOrCallback\n             * @param {File[]} files\n             */\n\n          }, {\n            key: \"insertImagesOrCallback\",\n            value: function insertImagesOrCallback(files) {\n              var callbacks = this.options.callbacks; // If onImageUpload set,\n\n              if (callbacks.onImageUpload) {\n                this.context.triggerEvent('image.upload', files); // else insert Image as dataURL\n              } else {\n                this.insertImagesAsDataURL(files);\n              }\n            }\n            /**\n             * return selected plain text\n             * @return {String} text\n             */\n\n          }, {\n            key: \"getSelectedText\",\n            value: function getSelectedText() {\n              var rng = this.getLastRange(); // if range on anchor, expand range with anchor\n\n              if (rng.isOnAnchor()) {\n                rng = range.createFromNode(dom.ancestor(rng.sc, dom.isAnchor));\n              }\n\n              return rng.toString();\n            }\n          }, {\n            key: \"onFormatBlock\",\n            value: function onFormatBlock(tagName, $target) {\n              // [workaround] for MSIE, IE need `<`\n              document.execCommand('FormatBlock', false, env.isMSIE ? '<' + tagName + '>' : tagName); // support custom class\n\n              if ($target && $target.length) {\n                // find the exact element has given tagName\n                if ($target[0].tagName.toUpperCase() !== tagName.toUpperCase()) {\n                  $target = $target.find(tagName);\n                }\n\n                if ($target && $target.length) {\n                  var className = $target[0].className || '';\n\n                  if (className) {\n                    var currentRange = this.createRange();\n                    var $parent = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()([currentRange.sc, currentRange.ec]).closest(tagName);\n                    $parent.addClass(className);\n                  }\n                }\n              }\n            }\n          }, {\n            key: \"formatPara\",\n            value: function formatPara() {\n              this.formatBlock('P');\n            }\n          }, {\n            key: \"fontStyling\",\n            value: function fontStyling(target, value) {\n              var rng = this.getLastRange();\n\n              if (rng !== '') {\n                var spans = this.style.styleNodes(rng);\n                this.$editor.find('.note-status-output').html('');\n                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(spans).css(target, value); // [workaround] added styled bogus span for style\n                //  - also bogus character needed for cursor position\n\n                if (rng.isCollapsed()) {\n                  var firstSpan = lists.head(spans);\n\n                  if (firstSpan && !dom.nodeLength(firstSpan)) {\n                    firstSpan.innerHTML = dom.ZERO_WIDTH_NBSP_CHAR;\n                    range.createFromNode(firstSpan.firstChild).select();\n                    this.setLastRange();\n                    this.$editable.data(KEY_BOGUS, firstSpan);\n                  }\n                } else {\n                  this.setLastRange(this.createRangeFromList(spans).select());\n                }\n              } else {\n                var noteStatusOutput = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.now();\n                this.$editor.find('.note-status-output').html('<div id=\"note-status-output-' + noteStatusOutput + '\" class=\"alert alert-info\">' + this.lang.output.noSelection + '</div>');\n                setTimeout(function () {\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('#note-status-output-' + noteStatusOutput).remove();\n                }, 5000);\n              }\n            }\n            /**\n             * unlink\n             *\n             * @type command\n             */\n\n          }, {\n            key: \"unlink\",\n            value: function unlink() {\n              var rng = this.getLastRange();\n\n              if (rng.isOnAnchor()) {\n                var anchor = dom.ancestor(rng.sc, dom.isAnchor);\n                rng = range.createFromNode(anchor);\n                rng.select();\n                this.setLastRange();\n                this.beforeCommand();\n                document.execCommand('unlink');\n                this.afterCommand();\n              }\n            }\n            /**\n             * returns link info\n             *\n             * @return {Object}\n             * @return {WrappedRange} return.range\n             * @return {String} return.text\n             * @return {Boolean} [return.isNewWindow=true]\n             * @return {String} [return.url=\"\"]\n             */\n\n          }, {\n            key: \"getLinkInfo\",\n            value: function getLinkInfo() {\n              var rng = this.getLastRange().expand(dom.isAnchor); // Get the first anchor on range(for edit).\n\n              var $anchor = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(lists.head(rng.nodes(dom.isAnchor)));\n              var linkInfo = {\n                range: rng,\n                text: rng.toString(),\n                url: $anchor.length ? $anchor.attr('href') : ''\n              }; // When anchor exists,\n\n              if ($anchor.length) {\n                // Set isNewWindow by checking its target.\n                linkInfo.isNewWindow = $anchor.attr('target') === '_blank';\n              }\n\n              return linkInfo;\n            }\n          }, {\n            key: \"addRow\",\n            value: function addRow(position) {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.addRow(rng, position);\n                this.afterCommand();\n              }\n            }\n          }, {\n            key: \"addCol\",\n            value: function addCol(position) {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.addCol(rng, position);\n                this.afterCommand();\n              }\n            }\n          }, {\n            key: \"deleteRow\",\n            value: function deleteRow() {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.deleteRow(rng);\n                this.afterCommand();\n              }\n            }\n          }, {\n            key: \"deleteCol\",\n            value: function deleteCol() {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.deleteCol(rng);\n                this.afterCommand();\n              }\n            }\n          }, {\n            key: \"deleteTable\",\n            value: function deleteTable() {\n              var rng = this.getLastRange(this.$editable);\n\n              if (rng.isCollapsed() && rng.isOnCell()) {\n                this.beforeCommand();\n                this.table.deleteTable(rng);\n                this.afterCommand();\n              }\n            }\n            /**\n             * @param {Position} pos\n             * @param {jQuery} $target - target element\n             * @param {Boolean} [bKeepRatio] - keep ratio\n             */\n\n          }, {\n            key: \"resizeTo\",\n            value: function resizeTo(pos, $target, bKeepRatio) {\n              var imageSize;\n\n              if (bKeepRatio) {\n                var newRatio = pos.y / pos.x;\n                var ratio = $target.data('ratio');\n                imageSize = {\n                  width: ratio > newRatio ? pos.x : pos.y / ratio,\n                  height: ratio > newRatio ? pos.x * ratio : pos.y\n                };\n              } else {\n                imageSize = {\n                  width: pos.x,\n                  height: pos.y\n                };\n              }\n\n              $target.css(imageSize);\n            }\n            /**\n             * returns whether editable area has focus or not.\n             */\n\n          }, {\n            key: \"hasFocus\",\n            value: function hasFocus() {\n              return this.$editable.is(':focus');\n            }\n            /**\n             * set focus\n             */\n\n          }, {\n            key: \"focus\",\n            value: function focus() {\n              // [workaround] Screen will move when page is scolled in IE.\n              //  - do focus when not focused\n              if (!this.hasFocus()) {\n                this.$editable.focus();\n              }\n            }\n            /**\n             * returns whether contents is empty or not.\n             * @return {Boolean}\n             */\n\n          }, {\n            key: \"isEmpty\",\n            value: function isEmpty() {\n              return dom.isEmpty(this.$editable[0]) || dom.emptyPara === this.$editable.html();\n            }\n            /**\n             * Removes all contents and restores the editable instance to an _emptyPara_.\n             */\n\n          }, {\n            key: \"empty\",\n            value: function empty() {\n              this.context.invoke('code', dom.emptyPara);\n            }\n            /**\n             * normalize content\n             */\n\n          }, {\n            key: \"normalizeContent\",\n            value: function normalizeContent() {\n              this.$editable[0].normalize();\n            }\n          }]);\n          return Editor;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Clipboard.js\n\n\n        function Clipboard_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Clipboard_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Clipboard_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Clipboard_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Clipboard_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Clipboard_Clipboard = /*#__PURE__*/function () {\n          function Clipboard(context) {\n            Clipboard_classCallCheck(this, Clipboard);\n            this.context = context;\n            this.$editable = context.layoutInfo.editable;\n          }\n\n          Clipboard_createClass(Clipboard, [{\n            key: \"initialize\",\n            value: function initialize() {\n              this.$editable.on('paste', this.pasteByEvent.bind(this));\n            }\n            /**\n             * paste by clipboard event\n             *\n             * @param {Event} event\n             */\n\n          }, {\n            key: \"pasteByEvent\",\n            value: function pasteByEvent(event) {\n              var _this = this;\n\n              var clipboardData = event.originalEvent.clipboardData;\n\n              if (clipboardData && clipboardData.items && clipboardData.items.length) {\n                var item = clipboardData.items.length > 1 ? clipboardData.items[1] : lists.head(clipboardData.items);\n\n                if (item.kind === 'file' && item.type.indexOf('image/') !== -1) {\n                  // paste img file\n                  this.context.invoke('editor.insertImagesOrCallback', [item.getAsFile()]);\n                  event.preventDefault();\n                } else if (item.kind === 'string') {\n                  // paste text with maxTextLength check\n                  if (this.context.invoke('editor.isLimited', clipboardData.getData('Text').length)) {\n                    event.preventDefault();\n                  }\n                }\n              } else if (window.clipboardData) {\n                // for IE\n                var text = window.clipboardData.getData('text');\n\n                if (this.context.invoke('editor.isLimited', text.length)) {\n                  event.preventDefault();\n                }\n              } // Call editor.afterCommand after proceeding default event handler\n\n\n              setTimeout(function () {\n                _this.context.invoke('editor.afterCommand');\n              }, 10);\n            }\n          }]);\n          return Clipboard;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Dropzone.js\n\n\n        function Dropzone_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Dropzone_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Dropzone_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Dropzone_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Dropzone_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Dropzone_Dropzone = /*#__PURE__*/function () {\n          function Dropzone(context) {\n            Dropzone_classCallCheck(this, Dropzone);\n            this.context = context;\n            this.$eventListener = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);\n            this.$editor = context.layoutInfo.editor;\n            this.$editable = context.layoutInfo.editable;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            this.documentEventHandlers = {};\n            this.$dropzone = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(['<div class=\"note-dropzone\">', '<div class=\"note-dropzone-message\"></div>', '</div>'].join('')).prependTo(this.$editor);\n          }\n          /**\n           * attach Drag and Drop Events\n           */\n\n\n          Dropzone_createClass(Dropzone, [{\n            key: \"initialize\",\n            value: function initialize() {\n              if (this.options.disableDragAndDrop) {\n                // prevent default drop event\n                this.documentEventHandlers.onDrop = function (e) {\n                  e.preventDefault();\n                }; // do not consider outside of dropzone\n\n\n                this.$eventListener = this.$dropzone;\n                this.$eventListener.on('drop', this.documentEventHandlers.onDrop);\n              } else {\n                this.attachDragAndDropEvent();\n              }\n            }\n            /**\n             * attach Drag and Drop Events\n             */\n\n          }, {\n            key: \"attachDragAndDropEvent\",\n            value: function attachDragAndDropEvent() {\n              var _this = this;\n\n              var collection = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()();\n              var $dropzoneMessage = this.$dropzone.find('.note-dropzone-message');\n\n              this.documentEventHandlers.onDragenter = function (e) {\n                var isCodeview = _this.context.invoke('codeview.isActivated');\n\n                var hasEditorSize = _this.$editor.width() > 0 && _this.$editor.height() > 0;\n\n                if (!isCodeview && !collection.length && hasEditorSize) {\n                  _this.$editor.addClass('dragover');\n\n                  _this.$dropzone.width(_this.$editor.width());\n\n                  _this.$dropzone.height(_this.$editor.height());\n\n                  $dropzoneMessage.text(_this.lang.image.dragImageHere);\n                }\n\n                collection = collection.add(e.target);\n              };\n\n              this.documentEventHandlers.onDragleave = function (e) {\n                collection = collection.not(e.target); // If nodeName is BODY, then just make it over (fix for IE)\n\n                if (!collection.length || e.target.nodeName === 'BODY') {\n                  collection = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()();\n\n                  _this.$editor.removeClass('dragover');\n                }\n              };\n\n              this.documentEventHandlers.onDrop = function () {\n                collection = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()();\n\n                _this.$editor.removeClass('dragover');\n              }; // show dropzone on dragenter when dragging a object to document\n              // -but only if the editor is visible, i.e. has a positive width and height\n\n\n              this.$eventListener.on('dragenter', this.documentEventHandlers.onDragenter).on('dragleave', this.documentEventHandlers.onDragleave).on('drop', this.documentEventHandlers.onDrop); // change dropzone's message on hover.\n\n              this.$dropzone.on('dragenter', function () {\n                _this.$dropzone.addClass('hover');\n\n                $dropzoneMessage.text(_this.lang.image.dropImage);\n              }).on('dragleave', function () {\n                _this.$dropzone.removeClass('hover');\n\n                $dropzoneMessage.text(_this.lang.image.dragImageHere);\n              }); // attach dropImage\n\n              this.$dropzone.on('drop', function (event) {\n                var dataTransfer = event.originalEvent.dataTransfer; // stop the browser from opening the dropped content\n\n                event.preventDefault();\n\n                if (dataTransfer && dataTransfer.files && dataTransfer.files.length) {\n                  _this.$editable.focus();\n\n                  _this.context.invoke('editor.insertImagesOrCallback', dataTransfer.files);\n                } else {\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(dataTransfer.types, function (idx, type) {\n                    // skip moz-specific types\n                    if (type.toLowerCase().indexOf('_moz_') > -1) {\n                      return;\n                    }\n\n                    var content = dataTransfer.getData(type);\n\n                    if (type.toLowerCase().indexOf('text') > -1) {\n                      _this.context.invoke('editor.pasteHTML', content);\n                    } else {\n                      external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(content).each(function (idx, item) {\n                        _this.context.invoke('editor.insertNode', item);\n                      });\n                    }\n                  });\n                }\n              }).on('dragover', false); // prevent default dragover event\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              var _this2 = this;\n\n              Object.keys(this.documentEventHandlers).forEach(function (key) {\n                _this2.$eventListener.off(key.substr(2).toLowerCase(), _this2.documentEventHandlers[key]);\n              });\n              this.documentEventHandlers = {};\n            }\n          }]);\n          return Dropzone;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Codeview.js\n\n\n        function _createForOfIteratorHelper(o) {\n          if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n            if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {\n              var i = 0;\n\n              var F = function F() {};\n\n              return {\n                s: F,\n                n: function n() {\n                  if (i >= o.length) return {\n                    done: true\n                  };\n                  return {\n                    done: false,\n                    value: o[i++]\n                  };\n                },\n                e: function e(_e) {\n                  throw _e;\n                },\n                f: F\n              };\n            }\n\n            throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n          }\n\n          var it,\n              normalCompletion = true,\n              didErr = false,\n              err;\n          return {\n            s: function s() {\n              it = o[Symbol.iterator]();\n            },\n            n: function n() {\n              var step = it.next();\n              normalCompletion = step.done;\n              return step;\n            },\n            e: function e(_e2) {\n              didErr = true;\n              err = _e2;\n            },\n            f: function f() {\n              try {\n                if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n              } finally {\n                if (didErr) throw err;\n              }\n            }\n          };\n        }\n\n        function _unsupportedIterableToArray(o, minLen) {\n          if (!o) return;\n          if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n          var n = Object.prototype.toString.call(o).slice(8, -1);\n          if (n === \"Object\" && o.constructor) n = o.constructor.name;\n          if (n === \"Map\" || n === \"Set\") return Array.from(n);\n          if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n        }\n\n        function _arrayLikeToArray(arr, len) {\n          if (len == null || len > arr.length) len = arr.length;\n\n          for (var i = 0, arr2 = new Array(len); i < len; i++) {\n            arr2[i] = arr[i];\n          }\n\n          return arr2;\n        }\n\n        function Codeview_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Codeview_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Codeview_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Codeview_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Codeview_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * @class Codeview\n         */\n\n\n        var Codeview_CodeView = /*#__PURE__*/function () {\n          function CodeView(context) {\n            Codeview_classCallCheck(this, CodeView);\n            this.context = context;\n            this.$editor = context.layoutInfo.editor;\n            this.$editable = context.layoutInfo.editable;\n            this.$codable = context.layoutInfo.codable;\n            this.options = context.options;\n            this.CodeMirrorConstructor = window.CodeMirror;\n\n            if (this.options.codemirror.CodeMirrorConstructor) {\n              this.CodeMirrorConstructor = this.options.codemirror.CodeMirrorConstructor;\n            }\n          }\n\n          Codeview_createClass(CodeView, [{\n            key: \"sync\",\n            value: function sync(html) {\n              var isCodeview = this.isActivated();\n              var CodeMirror = this.CodeMirrorConstructor;\n\n              if (isCodeview) {\n                if (html) {\n                  if (CodeMirror) {\n                    this.$codable.data('cmEditor').getDoc().setValue(html);\n                  } else {\n                    this.$codable.val(html);\n                  }\n                } else {\n                  if (CodeMirror) {\n                    this.$codable.data('cmEditor').save();\n                  }\n                }\n              }\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this = this;\n\n              this.$codable.on('keyup', function (event) {\n                if (event.keyCode === core_key.code.ESCAPE) {\n                  _this.deactivate();\n                }\n              });\n            }\n            /**\n             * @return {Boolean}\n             */\n\n          }, {\n            key: \"isActivated\",\n            value: function isActivated() {\n              return this.$editor.hasClass('codeview');\n            }\n            /**\n             * toggle codeview\n             */\n\n          }, {\n            key: \"toggle\",\n            value: function toggle() {\n              if (this.isActivated()) {\n                this.deactivate();\n              } else {\n                this.activate();\n              }\n\n              this.context.triggerEvent('codeview.toggled');\n            }\n            /**\n             * purify input value\n             * @param value\n             * @returns {*}\n             */\n\n          }, {\n            key: \"purify\",\n            value: function purify(value) {\n              if (this.options.codeviewFilter) {\n                // filter code view regex\n                value = value.replace(this.options.codeviewFilterRegex, ''); // allow specific iframe tag\n\n                if (this.options.codeviewIframeFilter) {\n                  var whitelist = this.options.codeviewIframeWhitelistSrc.concat(this.options.codeviewIframeWhitelistSrcBase);\n                  value = value.replace(/(<iframe.*?>.*?(?:<\\/iframe>)?)/gi, function (tag) {\n                    // remove if src attribute is duplicated\n                    if (/<.+src(?==?('|\"|\\s)?)[\\s\\S]+src(?=('|\"|\\s)?)[^>]*?>/i.test(tag)) {\n                      return '';\n                    }\n\n                    var _iterator = _createForOfIteratorHelper(whitelist),\n                        _step;\n\n                    try {\n                      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                        var src = _step.value; // pass if src is trusted\n\n                        if (new RegExp('src=\"(https?:)?\\/\\/' + src.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, '\\\\$&') + '\\/(.+)\"').test(tag)) {\n                          return tag;\n                        }\n                      }\n                    } catch (err) {\n                      _iterator.e(err);\n                    } finally {\n                      _iterator.f();\n                    }\n\n                    return '';\n                  });\n                }\n              }\n\n              return value;\n            }\n            /**\n             * activate code view\n             */\n\n          }, {\n            key: \"activate\",\n            value: function activate() {\n              var _this2 = this;\n\n              var CodeMirror = this.CodeMirrorConstructor;\n              this.$codable.val(dom.html(this.$editable, this.options.prettifyHtml));\n              this.$codable.height(this.$editable.height());\n              this.context.invoke('toolbar.updateCodeview', true);\n              this.context.invoke('airPopover.updateCodeview', true);\n              this.$editor.addClass('codeview');\n              this.$codable.focus(); // activate CodeMirror as codable\n\n              if (CodeMirror) {\n                var cmEditor = CodeMirror.fromTextArea(this.$codable[0], this.options.codemirror); // CodeMirror TernServer\n\n                if (this.options.codemirror.tern) {\n                  var server = new CodeMirror.TernServer(this.options.codemirror.tern);\n                  cmEditor.ternServer = server;\n                  cmEditor.on('cursorActivity', function (cm) {\n                    server.updateArgHints(cm);\n                  });\n                }\n\n                cmEditor.on('blur', function (event) {\n                  _this2.context.triggerEvent('blur.codeview', cmEditor.getValue(), event);\n                });\n                cmEditor.on('change', function () {\n                  _this2.context.triggerEvent('change.codeview', cmEditor.getValue(), cmEditor);\n                }); // CodeMirror hasn't Padding.\n\n                cmEditor.setSize(null, this.$editable.outerHeight());\n                this.$codable.data('cmEditor', cmEditor);\n              } else {\n                this.$codable.on('blur', function (event) {\n                  _this2.context.triggerEvent('blur.codeview', _this2.$codable.val(), event);\n                });\n                this.$codable.on('input', function () {\n                  _this2.context.triggerEvent('change.codeview', _this2.$codable.val(), _this2.$codable);\n                });\n              }\n            }\n            /**\n             * deactivate code view\n             */\n\n          }, {\n            key: \"deactivate\",\n            value: function deactivate() {\n              var CodeMirror = this.CodeMirrorConstructor; // deactivate CodeMirror as codable\n\n              if (CodeMirror) {\n                var cmEditor = this.$codable.data('cmEditor');\n                this.$codable.val(cmEditor.getValue());\n                cmEditor.toTextArea();\n              }\n\n              var value = this.purify(dom.value(this.$codable, this.options.prettifyHtml) || dom.emptyPara);\n              var isChange = this.$editable.html() !== value;\n              this.$editable.html(value);\n              this.$editable.height(this.options.height ? this.$codable.height() : 'auto');\n              this.$editor.removeClass('codeview');\n\n              if (isChange) {\n                this.context.triggerEvent('change', this.$editable.html(), this.$editable);\n              }\n\n              this.$editable.focus();\n              this.context.invoke('toolbar.updateCodeview', false);\n              this.context.invoke('airPopover.updateCodeview', false);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              if (this.isActivated()) {\n                this.deactivate();\n              }\n            }\n          }]);\n          return CodeView;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Statusbar.js\n\n\n        function Statusbar_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Statusbar_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Statusbar_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Statusbar_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Statusbar_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var EDITABLE_PADDING = 24;\n\n        var Statusbar_Statusbar = /*#__PURE__*/function () {\n          function Statusbar(context) {\n            Statusbar_classCallCheck(this, Statusbar);\n            this.$document = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);\n            this.$statusbar = context.layoutInfo.statusbar;\n            this.$editable = context.layoutInfo.editable;\n            this.options = context.options;\n          }\n\n          Statusbar_createClass(Statusbar, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var _this = this;\n\n              if (this.options.airMode || this.options.disableResizeEditor) {\n                this.destroy();\n                return;\n              }\n\n              this.$statusbar.on('mousedown', function (event) {\n                event.preventDefault();\n                event.stopPropagation();\n\n                var editableTop = _this.$editable.offset().top - _this.$document.scrollTop();\n\n                var onMouseMove = function onMouseMove(event) {\n                  var height = event.clientY - (editableTop + EDITABLE_PADDING);\n                  height = _this.options.minheight > 0 ? Math.max(height, _this.options.minheight) : height;\n                  height = _this.options.maxHeight > 0 ? Math.min(height, _this.options.maxHeight) : height;\n\n                  _this.$editable.height(height);\n                };\n\n                _this.$document.on('mousemove', onMouseMove).one('mouseup', function () {\n                  _this.$document.off('mousemove', onMouseMove);\n                });\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$statusbar.off();\n              this.$statusbar.addClass('locked');\n            }\n          }]);\n          return Statusbar;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Fullscreen.js\n\n\n        function Fullscreen_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Fullscreen_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Fullscreen_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Fullscreen_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Fullscreen_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Fullscreen_Fullscreen = /*#__PURE__*/function () {\n          function Fullscreen(context) {\n            var _this = this;\n\n            Fullscreen_classCallCheck(this, Fullscreen);\n            this.context = context;\n            this.$editor = context.layoutInfo.editor;\n            this.$toolbar = context.layoutInfo.toolbar;\n            this.$editable = context.layoutInfo.editable;\n            this.$codable = context.layoutInfo.codable;\n            this.$window = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(window);\n            this.$scrollbar = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('html, body');\n\n            this.onResize = function () {\n              _this.resizeTo({\n                h: _this.$window.height() - _this.$toolbar.outerHeight()\n              });\n            };\n          }\n\n          Fullscreen_createClass(Fullscreen, [{\n            key: \"resizeTo\",\n            value: function resizeTo(size) {\n              this.$editable.css('height', size.h);\n              this.$codable.css('height', size.h);\n\n              if (this.$codable.data('cmeditor')) {\n                this.$codable.data('cmeditor').setsize(null, size.h);\n              }\n            }\n            /**\n             * toggle fullscreen\n             */\n\n          }, {\n            key: \"toggle\",\n            value: function toggle() {\n              this.$editor.toggleClass('fullscreen');\n\n              if (this.isFullscreen()) {\n                this.$editable.data('orgHeight', this.$editable.css('height'));\n                this.$editable.data('orgMaxHeight', this.$editable.css('maxHeight'));\n                this.$editable.css('maxHeight', '');\n                this.$window.on('resize', this.onResize).trigger('resize');\n                this.$scrollbar.css('overflow', 'hidden');\n              } else {\n                this.$window.off('resize', this.onResize);\n                this.resizeTo({\n                  h: this.$editable.data('orgHeight')\n                });\n                this.$editable.css('maxHeight', this.$editable.css('orgMaxHeight'));\n                this.$scrollbar.css('overflow', 'visible');\n              }\n\n              this.context.invoke('toolbar.updateFullscreen', this.isFullscreen());\n            }\n          }, {\n            key: \"isFullscreen\",\n            value: function isFullscreen() {\n              return this.$editor.hasClass('fullscreen');\n            }\n          }]);\n          return Fullscreen;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Handle.js\n\n\n        function Handle_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Handle_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Handle_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Handle_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Handle_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Handle_Handle = /*#__PURE__*/function () {\n          function Handle(context) {\n            var _this = this;\n\n            Handle_classCallCheck(this, Handle);\n            this.context = context;\n            this.$document = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);\n            this.$editingArea = context.layoutInfo.editingArea;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            this.events = {\n              'summernote.mousedown': function summernoteMousedown(we, e) {\n                if (_this.update(e.target, e)) {\n                  e.preventDefault();\n                }\n              },\n              'summernote.keyup summernote.scroll summernote.change summernote.dialog.shown': function summernoteKeyupSummernoteScrollSummernoteChangeSummernoteDialogShown() {\n                _this.update();\n              },\n              'summernote.disable summernote.blur': function summernoteDisableSummernoteBlur() {\n                _this.hide();\n              },\n              'summernote.codeview.toggled': function summernoteCodeviewToggled() {\n                _this.update();\n              }\n            };\n          }\n\n          Handle_createClass(Handle, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this;\n\n              this.$handle = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(['<div class=\"note-handle\">', '<div class=\"note-control-selection\">', '<div class=\"note-control-selection-bg\"></div>', '<div class=\"note-control-holder note-control-nw\"></div>', '<div class=\"note-control-holder note-control-ne\"></div>', '<div class=\"note-control-holder note-control-sw\"></div>', '<div class=\"', this.options.disableResizeImage ? 'note-control-holder' : 'note-control-sizing', ' note-control-se\"></div>', this.options.disableResizeImage ? '' : '<div class=\"note-control-selection-info\"></div>', '</div>', '</div>'].join('')).prependTo(this.$editingArea);\n              this.$handle.on('mousedown', function (event) {\n                if (dom.isControlSizing(event.target)) {\n                  event.preventDefault();\n                  event.stopPropagation();\n\n                  var $target = _this2.$handle.find('.note-control-selection').data('target');\n\n                  var posStart = $target.offset();\n\n                  var scrollTop = _this2.$document.scrollTop();\n\n                  var onMouseMove = function onMouseMove(event) {\n                    _this2.context.invoke('editor.resizeTo', {\n                      x: event.clientX - posStart.left,\n                      y: event.clientY - (posStart.top - scrollTop)\n                    }, $target, !event.shiftKey);\n\n                    _this2.update($target[0], event);\n                  };\n\n                  _this2.$document.on('mousemove', onMouseMove).one('mouseup', function (e) {\n                    e.preventDefault();\n\n                    _this2.$document.off('mousemove', onMouseMove);\n\n                    _this2.context.invoke('editor.afterCommand');\n                  });\n\n                  if (!$target.data('ratio')) {\n                    // original ratio.\n                    $target.data('ratio', $target.height() / $target.width());\n                  }\n                }\n              }); // Listen for scrolling on the handle overlay.\n\n              this.$handle.on('wheel', function (e) {\n                e.preventDefault();\n\n                _this2.update();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$handle.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update(target, event) {\n              if (this.context.isDisabled()) {\n                return false;\n              }\n\n              var isImage = dom.isImg(target);\n              var $selection = this.$handle.find('.note-control-selection');\n              this.context.invoke('imagePopover.update', target, event);\n\n              if (isImage) {\n                var $image = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(target);\n                var position = $image.position();\n                var pos = {\n                  left: position.left + parseInt($image.css('marginLeft'), 10),\n                  top: position.top + parseInt($image.css('marginTop'), 10)\n                }; // exclude margin\n\n                var imageSize = {\n                  w: $image.outerWidth(false),\n                  h: $image.outerHeight(false)\n                };\n                $selection.css({\n                  display: 'block',\n                  left: pos.left,\n                  top: pos.top,\n                  width: imageSize.w,\n                  height: imageSize.h\n                }).data('target', $image); // save current image element.\n\n                var origImageObj = new Image();\n                origImageObj.src = $image.attr('src');\n                var sizingText = imageSize.w + 'x' + imageSize.h + ' (' + this.lang.image.original + ': ' + origImageObj.width + 'x' + origImageObj.height + ')';\n                $selection.find('.note-control-selection-info').text(sizingText);\n                this.context.invoke('editor.saveTarget', target);\n              } else {\n                this.hide();\n              }\n\n              return isImage;\n            }\n            /**\n             * hide\n             *\n             * @param {jQuery} $handle\n             */\n\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.context.invoke('editor.clearTarget');\n              this.$handle.children().hide();\n            }\n          }]);\n          return Handle;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/AutoLink.js\n\n\n        function AutoLink_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function AutoLink_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function AutoLink_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) AutoLink_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) AutoLink_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var defaultScheme = 'http://';\n        var linkPattern = /^([A-Za-z][A-Za-z0-9+-.]*\\:[\\/]{2}|tel:|mailto:[A-Z0-9._%+-]+@)?(www\\.)?(.+)$/i;\n\n        var AutoLink_AutoLink = /*#__PURE__*/function () {\n          function AutoLink(context) {\n            var _this = this;\n\n            AutoLink_classCallCheck(this, AutoLink);\n            this.context = context;\n            this.options = context.options;\n            this.events = {\n              'summernote.keyup': function summernoteKeyup(we, e) {\n                if (!e.isDefaultPrevented()) {\n                  _this.handleKeyup(e);\n                }\n              },\n              'summernote.keydown': function summernoteKeydown(we, e) {\n                _this.handleKeydown(e);\n              }\n            };\n          }\n\n          AutoLink_createClass(AutoLink, [{\n            key: \"initialize\",\n            value: function initialize() {\n              this.lastWordRange = null;\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.lastWordRange = null;\n            }\n          }, {\n            key: \"replace\",\n            value: function replace() {\n              if (!this.lastWordRange) {\n                return;\n              }\n\n              var keyword = this.lastWordRange.toString();\n              var match = keyword.match(linkPattern);\n\n              if (match && (match[1] || match[2])) {\n                var link = match[1] ? keyword : defaultScheme + keyword;\n                var urlText = this.options.showDomainOnlyForAutolink ? keyword.replace(/^(?:https?:\\/\\/)?(?:tel?:?)?(?:mailto?:?)?(?:www\\.)?/i, '').split('/')[0] : keyword;\n                var node = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<a />').html(urlText).attr('href', link)[0];\n\n                if (this.context.options.linkTargetBlank) {\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).attr('target', '_blank');\n                }\n\n                this.lastWordRange.insertNode(node);\n                this.lastWordRange = null;\n                this.context.invoke('editor.focus');\n              }\n            }\n          }, {\n            key: \"handleKeydown\",\n            value: function handleKeydown(e) {\n              if (lists.contains([core_key.code.ENTER, core_key.code.SPACE], e.keyCode)) {\n                var wordRange = this.context.invoke('editor.createRange').getWordRange();\n                this.lastWordRange = wordRange;\n              }\n            }\n          }, {\n            key: \"handleKeyup\",\n            value: function handleKeyup(e) {\n              if (lists.contains([core_key.code.ENTER, core_key.code.SPACE], e.keyCode)) {\n                this.replace();\n              }\n            }\n          }]);\n          return AutoLink;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/AutoSync.js\n\n\n        function AutoSync_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function AutoSync_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function AutoSync_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) AutoSync_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) AutoSync_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * textarea auto sync.\n         */\n\n\n        var AutoSync_AutoSync = /*#__PURE__*/function () {\n          function AutoSync(context) {\n            var _this = this;\n\n            AutoSync_classCallCheck(this, AutoSync);\n            this.$note = context.layoutInfo.note;\n            this.events = {\n              'summernote.change': function summernoteChange() {\n                _this.$note.val(context.invoke('code'));\n              }\n            };\n          }\n\n          AutoSync_createClass(AutoSync, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return dom.isTextarea(this.$note[0]);\n            }\n          }]);\n          return AutoSync;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/AutoReplace.js\n\n\n        function AutoReplace_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function AutoReplace_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function AutoReplace_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) AutoReplace_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) AutoReplace_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var AutoReplace_AutoReplace = /*#__PURE__*/function () {\n          function AutoReplace(context) {\n            var _this = this;\n\n            AutoReplace_classCallCheck(this, AutoReplace);\n            this.context = context;\n            this.options = context.options.replace || {};\n            this.keys = [core_key.code.ENTER, core_key.code.SPACE, core_key.code.PERIOD, core_key.code.COMMA, core_key.code.SEMICOLON, core_key.code.SLASH];\n            this.previousKeydownCode = null;\n            this.events = {\n              'summernote.keyup': function summernoteKeyup(we, e) {\n                if (!e.isDefaultPrevented()) {\n                  _this.handleKeyup(e);\n                }\n              },\n              'summernote.keydown': function summernoteKeydown(we, e) {\n                _this.handleKeydown(e);\n              }\n            };\n          }\n\n          AutoReplace_createClass(AutoReplace, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !!this.options.match;\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.lastWord = null;\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.lastWord = null;\n            }\n          }, {\n            key: \"replace\",\n            value: function replace() {\n              if (!this.lastWord) {\n                return;\n              }\n\n              var self = this;\n              var keyword = this.lastWord.toString();\n              this.options.match(keyword, function (match) {\n                if (match) {\n                  var node = '';\n\n                  if (typeof match === 'string') {\n                    node = dom.createText(match);\n                  } else if (match instanceof jQuery) {\n                    node = match[0];\n                  } else if (match instanceof Node) {\n                    node = match;\n                  }\n\n                  if (!node) return;\n                  self.lastWord.insertNode(node);\n                  self.lastWord = null;\n                  self.context.invoke('editor.focus');\n                }\n              });\n            }\n          }, {\n            key: \"handleKeydown\",\n            value: function handleKeydown(e) {\n              // this forces it to remember the last whole word, even if multiple termination keys are pressed\n              // before the previous key is let go.\n              if (this.previousKeydownCode && lists.contains(this.keys, this.previousKeydownCode)) {\n                this.previousKeydownCode = e.keyCode;\n                return;\n              }\n\n              if (lists.contains(this.keys, e.keyCode)) {\n                var wordRange = this.context.invoke('editor.createRange').getWordRange();\n                this.lastWord = wordRange;\n              }\n\n              this.previousKeydownCode = e.keyCode;\n            }\n          }, {\n            key: \"handleKeyup\",\n            value: function handleKeyup(e) {\n              if (lists.contains(this.keys, e.keyCode)) {\n                this.replace();\n              }\n            }\n          }]);\n          return AutoReplace;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Placeholder.js\n\n\n        function Placeholder_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Placeholder_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Placeholder_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Placeholder_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Placeholder_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Placeholder_Placeholder = /*#__PURE__*/function () {\n          function Placeholder(context) {\n            var _this = this;\n\n            Placeholder_classCallCheck(this, Placeholder);\n            this.context = context;\n            this.$editingArea = context.layoutInfo.editingArea;\n            this.options = context.options;\n\n            if (this.options.inheritPlaceholder === true) {\n              // get placeholder value from the original element\n              this.options.placeholder = this.context.$note.attr('placeholder') || this.options.placeholder;\n            }\n\n            this.events = {\n              'summernote.init summernote.change': function summernoteInitSummernoteChange() {\n                _this.update();\n              },\n              'summernote.codeview.toggled': function summernoteCodeviewToggled() {\n                _this.update();\n              }\n            };\n          }\n\n          Placeholder_createClass(Placeholder, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !!this.options.placeholder;\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this;\n\n              this.$placeholder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div class=\"note-placeholder\">');\n              this.$placeholder.on('click', function () {\n                _this2.context.invoke('focus');\n              }).html(this.options.placeholder).prependTo(this.$editingArea);\n              this.update();\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$placeholder.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update() {\n              var isShow = !this.context.invoke('codeview.isActivated') && this.context.invoke('editor.isEmpty');\n              this.$placeholder.toggle(isShow);\n            }\n          }]);\n          return Placeholder;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Buttons.js\n\n\n        function Buttons_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Buttons_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Buttons_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Buttons_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Buttons_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Buttons_Buttons = /*#__PURE__*/function () {\n          function Buttons(context) {\n            Buttons_classCallCheck(this, Buttons);\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.context = context;\n            this.$toolbar = context.layoutInfo.toolbar;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            this.invertedKeyMap = func.invertObject(this.options.keyMap[env.isMac ? 'mac' : 'pc']);\n          }\n\n          Buttons_createClass(Buttons, [{\n            key: \"representShortcut\",\n            value: function representShortcut(editorMethod) {\n              var shortcut = this.invertedKeyMap[editorMethod];\n\n              if (!this.options.shortcuts || !shortcut) {\n                return '';\n              }\n\n              if (env.isMac) {\n                shortcut = shortcut.replace('CMD', '⌘').replace('SHIFT', '⇧');\n              }\n\n              shortcut = shortcut.replace('BACKSLASH', '\\\\').replace('SLASH', '/').replace('LEFTBRACKET', '[').replace('RIGHTBRACKET', ']');\n              return ' (' + shortcut + ')';\n            }\n          }, {\n            key: \"button\",\n            value: function button(o) {\n              if (!this.options.tooltip && o.tooltip) {\n                delete o.tooltip;\n              }\n\n              o.container = this.options.container;\n              return this.ui.button(o);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.addToolbarButtons();\n              this.addImagePopoverButtons();\n              this.addLinkPopoverButtons();\n              this.addTablePopoverButtons();\n              this.fontInstalledMap = {};\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              delete this.fontInstalledMap;\n            }\n          }, {\n            key: \"isFontInstalled\",\n            value: function isFontInstalled(name) {\n              if (!Object.prototype.hasOwnProperty.call(this.fontInstalledMap, name)) {\n                this.fontInstalledMap[name] = env.isFontInstalled(name) || lists.contains(this.options.fontNamesIgnoreCheck, name);\n              }\n\n              return this.fontInstalledMap[name];\n            }\n          }, {\n            key: \"isFontDeservedToAdd\",\n            value: function isFontDeservedToAdd(name) {\n              name = name.toLowerCase();\n              return name !== '' && this.isFontInstalled(name) && env.genericFontFamilies.indexOf(name) === -1;\n            }\n          }, {\n            key: \"colorPalette\",\n            value: function colorPalette(className, tooltip, backColor, foreColor) {\n              var _this = this;\n\n              return this.ui.buttonGroup({\n                className: 'note-color ' + className,\n                children: [this.button({\n                  className: 'note-current-color-button',\n                  contents: this.ui.icon(this.options.icons.font + ' note-recent-color'),\n                  tooltip: tooltip,\n                  click: function click(e) {\n                    var $button = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.currentTarget);\n\n                    if (backColor && foreColor) {\n                      _this.context.invoke('editor.color', {\n                        backColor: $button.attr('data-backColor'),\n                        foreColor: $button.attr('data-foreColor')\n                      });\n                    } else if (backColor) {\n                      _this.context.invoke('editor.color', {\n                        backColor: $button.attr('data-backColor')\n                      });\n                    } else if (foreColor) {\n                      _this.context.invoke('editor.color', {\n                        foreColor: $button.attr('data-foreColor')\n                      });\n                    }\n                  },\n                  callback: function callback($button) {\n                    var $recentColor = $button.find('.note-recent-color');\n\n                    if (backColor) {\n                      $recentColor.css('background-color', _this.options.colorButton.backColor);\n                      $button.attr('data-backColor', _this.options.colorButton.backColor);\n                    }\n\n                    if (foreColor) {\n                      $recentColor.css('color', _this.options.colorButton.foreColor);\n                      $button.attr('data-foreColor', _this.options.colorButton.foreColor);\n                    } else {\n                      $recentColor.css('color', 'transparent');\n                    }\n                  }\n                }), this.button({\n                  className: 'dropdown-toggle',\n                  contents: this.ui.dropdownButtonContents('', this.options),\n                  tooltip: this.lang.color.more,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), this.ui.dropdown({\n                  items: (backColor ? ['<div class=\"note-palette\">', '<div class=\"note-palette-title\">' + this.lang.color.background + '</div>', '<div>', '<button type=\"button\" class=\"note-color-reset btn btn-light btn-default\" data-event=\"backColor\" data-value=\"transparent\">', this.lang.color.transparent, '</button>', '</div>', '<div class=\"note-holder\" data-event=\"backColor\"><!-- back colors --></div>', '<div>', '<button type=\"button\" class=\"note-color-select btn btn-light btn-default\" data-event=\"openPalette\" data-value=\"backColorPicker\">', this.lang.color.cpSelect, '</button>', '<input type=\"color\" id=\"backColorPicker\" class=\"note-btn note-color-select-btn\" value=\"' + this.options.colorButton.backColor + '\" data-event=\"backColorPalette\">', '</div>', '<div class=\"note-holder-custom\" id=\"backColorPalette\" data-event=\"backColor\"></div>', '</div>'].join('') : '') + (foreColor ? ['<div class=\"note-palette\">', '<div class=\"note-palette-title\">' + this.lang.color.foreground + '</div>', '<div>', '<button type=\"button\" class=\"note-color-reset btn btn-light btn-default\" data-event=\"removeFormat\" data-value=\"foreColor\">', this.lang.color.resetToDefault, '</button>', '</div>', '<div class=\"note-holder\" data-event=\"foreColor\"><!-- fore colors --></div>', '<div>', '<button type=\"button\" class=\"note-color-select btn btn-light btn-default\" data-event=\"openPalette\" data-value=\"foreColorPicker\">', this.lang.color.cpSelect, '</button>', '<input type=\"color\" id=\"foreColorPicker\" class=\"note-btn note-color-select-btn\" value=\"' + this.options.colorButton.foreColor + '\" data-event=\"foreColorPalette\">', '</div>', // Fix missing Div, Commented to find easily if it's wrong\n                  '<div class=\"note-holder-custom\" id=\"foreColorPalette\" data-event=\"foreColor\"></div>', '</div>'].join('') : ''),\n                  callback: function callback($dropdown) {\n                    $dropdown.find('.note-holder').each(function (idx, item) {\n                      var $holder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item);\n                      $holder.append(_this.ui.palette({\n                        colors: _this.options.colors,\n                        colorsName: _this.options.colorsName,\n                        eventName: $holder.data('event'),\n                        container: _this.options.container,\n                        tooltip: _this.options.tooltip\n                      }).render());\n                    });\n                    /* TODO: do we have to record recent custom colors within cookies? */\n\n                    var customColors = [['#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF', '#FFFFFF']];\n                    $dropdown.find('.note-holder-custom').each(function (idx, item) {\n                      var $holder = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item);\n                      $holder.append(_this.ui.palette({\n                        colors: customColors,\n                        colorsName: customColors,\n                        eventName: $holder.data('event'),\n                        container: _this.options.container,\n                        tooltip: _this.options.tooltip\n                      }).render());\n                    });\n                    $dropdown.find('input[type=color]').each(function (idx, item) {\n                      external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item).change(function () {\n                        var $chip = $dropdown.find('#' + external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this).data('event')).find('.note-color-btn').first();\n                        var color = this.value.toUpperCase();\n                        $chip.css('background-color', color).attr('aria-label', color).attr('data-value', color).attr('data-original-title', color);\n                        $chip.click();\n                      });\n                    });\n                  },\n                  click: function click(event) {\n                    event.stopPropagation();\n                    var $parent = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('.' + className).find('.note-dropdown-menu');\n                    var $button = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target);\n                    var eventName = $button.data('event');\n                    var value = $button.attr('data-value');\n\n                    if (eventName === 'openPalette') {\n                      var $picker = $parent.find('#' + value);\n                      var $palette = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()($parent.find('#' + $picker.data('event')).find('.note-color-row')[0]); // Shift palette chips\n\n                      var $chip = $palette.find('.note-color-btn').last().detach(); // Set chip attributes\n\n                      var color = $picker.val();\n                      $chip.css('background-color', color).attr('aria-label', color).attr('data-value', color).attr('data-original-title', color);\n                      $palette.prepend($chip);\n                      $picker.click();\n                    } else {\n                      if (lists.contains(['backColor', 'foreColor'], eventName)) {\n                        var key = eventName === 'backColor' ? 'background-color' : 'color';\n                        var $color = $button.closest('.note-color').find('.note-recent-color');\n                        var $currentButton = $button.closest('.note-color').find('.note-current-color-button');\n                        $color.css(key, value);\n                        $currentButton.attr('data-' + eventName, value);\n                      }\n\n                      _this.context.invoke('editor.' + eventName, value);\n                    }\n                  }\n                })]\n              }).render();\n            }\n          }, {\n            key: \"addToolbarButtons\",\n            value: function addToolbarButtons() {\n              var _this2 = this;\n\n              this.context.memo('button.style', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.magic), _this2.options),\n                  tooltip: _this2.lang.style.style,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdown({\n                  className: 'dropdown-style',\n                  items: _this2.options.styleTags,\n                  title: _this2.lang.style.style,\n                  template: function template(item) {\n                    // TBD: need to be simplified\n                    if (typeof item === 'string') {\n                      item = {\n                        tag: item,\n                        title: Object.prototype.hasOwnProperty.call(_this2.lang.style, item) ? _this2.lang.style[item] : item\n                      };\n                    }\n\n                    var tag = item.tag;\n                    var title = item.title;\n                    var style = item.style ? ' style=\"' + item.style + '\" ' : '';\n                    var className = item.className ? ' class=\"' + item.className + '\"' : '';\n                    return '<' + tag + style + className + '>' + title + '</' + tag + '>';\n                  },\n                  click: _this2.context.createInvokeHandler('editor.formatBlock')\n                })]).render();\n              });\n\n              var _loop = function _loop(styleIdx, styleLen) {\n                var item = _this2.options.styleTags[styleIdx];\n\n                _this2.context.memo('button.style.' + item, function () {\n                  return _this2.button({\n                    className: 'note-btn-style-' + item,\n                    contents: '<div data-value=\"' + item + '\">' + item.toUpperCase() + '</div>',\n                    tooltip: _this2.lang.style[item],\n                    click: _this2.context.createInvokeHandler('editor.formatBlock')\n                  }).render();\n                });\n              };\n\n              for (var styleIdx = 0, styleLen = this.options.styleTags.length; styleIdx < styleLen; styleIdx++) {\n                _loop(styleIdx, styleLen);\n              }\n\n              this.context.memo('button.bold', function () {\n                return _this2.button({\n                  className: 'note-btn-bold',\n                  contents: _this2.ui.icon(_this2.options.icons.bold),\n                  tooltip: _this2.lang.font.bold + _this2.representShortcut('bold'),\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.bold')\n                }).render();\n              });\n              this.context.memo('button.italic', function () {\n                return _this2.button({\n                  className: 'note-btn-italic',\n                  contents: _this2.ui.icon(_this2.options.icons.italic),\n                  tooltip: _this2.lang.font.italic + _this2.representShortcut('italic'),\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.italic')\n                }).render();\n              });\n              this.context.memo('button.underline', function () {\n                return _this2.button({\n                  className: 'note-btn-underline',\n                  contents: _this2.ui.icon(_this2.options.icons.underline),\n                  tooltip: _this2.lang.font.underline + _this2.representShortcut('underline'),\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.underline')\n                }).render();\n              });\n              this.context.memo('button.clear', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.eraser),\n                  tooltip: _this2.lang.font.clear + _this2.representShortcut('removeFormat'),\n                  click: _this2.context.createInvokeHandler('editor.removeFormat')\n                }).render();\n              });\n              this.context.memo('button.strikethrough', function () {\n                return _this2.button({\n                  className: 'note-btn-strikethrough',\n                  contents: _this2.ui.icon(_this2.options.icons.strikethrough),\n                  tooltip: _this2.lang.font.strikethrough + _this2.representShortcut('strikethrough'),\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.strikethrough')\n                }).render();\n              });\n              this.context.memo('button.superscript', function () {\n                return _this2.button({\n                  className: 'note-btn-superscript',\n                  contents: _this2.ui.icon(_this2.options.icons.superscript),\n                  tooltip: _this2.lang.font.superscript,\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.superscript')\n                }).render();\n              });\n              this.context.memo('button.subscript', function () {\n                return _this2.button({\n                  className: 'note-btn-subscript',\n                  contents: _this2.ui.icon(_this2.options.icons.subscript),\n                  tooltip: _this2.lang.font.subscript,\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.subscript')\n                }).render();\n              });\n              this.context.memo('button.fontname', function () {\n                var styleInfo = _this2.context.invoke('editor.currentStyle');\n\n                if (_this2.options.addDefaultFonts) {\n                  // Add 'default' fonts into the fontnames array if not exist\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(styleInfo['font-family'].split(','), function (idx, fontname) {\n                    fontname = fontname.trim().replace(/['\"]+/g, '');\n\n                    if (_this2.isFontDeservedToAdd(fontname)) {\n                      if (_this2.options.fontNames.indexOf(fontname) === -1) {\n                        _this2.options.fontNames.push(fontname);\n                      }\n                    }\n                  });\n                }\n\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents('<span class=\"note-current-fontname\"></span>', _this2.options),\n                  tooltip: _this2.lang.font.name,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdownCheck({\n                  className: 'dropdown-fontname',\n                  checkClassName: _this2.options.icons.menuCheck,\n                  items: _this2.options.fontNames.filter(_this2.isFontInstalled.bind(_this2)),\n                  title: _this2.lang.font.name,\n                  template: function template(item) {\n                    return '<span style=\"font-family: ' + env.validFontName(item) + '\">' + item + '</span>';\n                  },\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.fontName')\n                })]).render();\n              });\n              this.context.memo('button.fontsize', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents('<span class=\"note-current-fontsize\"></span>', _this2.options),\n                  tooltip: _this2.lang.font.size,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdownCheck({\n                  className: 'dropdown-fontsize',\n                  checkClassName: _this2.options.icons.menuCheck,\n                  items: _this2.options.fontSizes,\n                  title: _this2.lang.font.size,\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.fontSize')\n                })]).render();\n              });\n              this.context.memo('button.fontsizeunit', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents('<span class=\"note-current-fontsizeunit\"></span>', _this2.options),\n                  tooltip: _this2.lang.font.sizeunit,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdownCheck({\n                  className: 'dropdown-fontsizeunit',\n                  checkClassName: _this2.options.icons.menuCheck,\n                  items: _this2.options.fontSizeUnits,\n                  title: _this2.lang.font.sizeunit,\n                  click: _this2.context.createInvokeHandlerAndUpdateState('editor.fontSizeUnit')\n                })]).render();\n              });\n              this.context.memo('button.color', function () {\n                return _this2.colorPalette('note-color-all', _this2.lang.color.recent, true, true);\n              });\n              this.context.memo('button.forecolor', function () {\n                return _this2.colorPalette('note-color-fore', _this2.lang.color.foreground, false, true);\n              });\n              this.context.memo('button.backcolor', function () {\n                return _this2.colorPalette('note-color-back', _this2.lang.color.background, true, false);\n              });\n              this.context.memo('button.ul', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.unorderedlist),\n                  tooltip: _this2.lang.lists.unordered + _this2.representShortcut('insertUnorderedList'),\n                  click: _this2.context.createInvokeHandler('editor.insertUnorderedList')\n                }).render();\n              });\n              this.context.memo('button.ol', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.orderedlist),\n                  tooltip: _this2.lang.lists.ordered + _this2.representShortcut('insertOrderedList'),\n                  click: _this2.context.createInvokeHandler('editor.insertOrderedList')\n                }).render();\n              });\n              var justifyLeft = this.button({\n                contents: this.ui.icon(this.options.icons.alignLeft),\n                tooltip: this.lang.paragraph.left + this.representShortcut('justifyLeft'),\n                click: this.context.createInvokeHandler('editor.justifyLeft')\n              });\n              var justifyCenter = this.button({\n                contents: this.ui.icon(this.options.icons.alignCenter),\n                tooltip: this.lang.paragraph.center + this.representShortcut('justifyCenter'),\n                click: this.context.createInvokeHandler('editor.justifyCenter')\n              });\n              var justifyRight = this.button({\n                contents: this.ui.icon(this.options.icons.alignRight),\n                tooltip: this.lang.paragraph.right + this.representShortcut('justifyRight'),\n                click: this.context.createInvokeHandler('editor.justifyRight')\n              });\n              var justifyFull = this.button({\n                contents: this.ui.icon(this.options.icons.alignJustify),\n                tooltip: this.lang.paragraph.justify + this.representShortcut('justifyFull'),\n                click: this.context.createInvokeHandler('editor.justifyFull')\n              });\n              var outdent = this.button({\n                contents: this.ui.icon(this.options.icons.outdent),\n                tooltip: this.lang.paragraph.outdent + this.representShortcut('outdent'),\n                click: this.context.createInvokeHandler('editor.outdent')\n              });\n              var indent = this.button({\n                contents: this.ui.icon(this.options.icons.indent),\n                tooltip: this.lang.paragraph.indent + this.representShortcut('indent'),\n                click: this.context.createInvokeHandler('editor.indent')\n              });\n              this.context.memo('button.justifyLeft', func.invoke(justifyLeft, 'render'));\n              this.context.memo('button.justifyCenter', func.invoke(justifyCenter, 'render'));\n              this.context.memo('button.justifyRight', func.invoke(justifyRight, 'render'));\n              this.context.memo('button.justifyFull', func.invoke(justifyFull, 'render'));\n              this.context.memo('button.outdent', func.invoke(outdent, 'render'));\n              this.context.memo('button.indent', func.invoke(indent, 'render'));\n              this.context.memo('button.paragraph', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.alignLeft), _this2.options),\n                  tooltip: _this2.lang.paragraph.paragraph,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdown([_this2.ui.buttonGroup({\n                  className: 'note-align',\n                  children: [justifyLeft, justifyCenter, justifyRight, justifyFull]\n                }), _this2.ui.buttonGroup({\n                  className: 'note-list',\n                  children: [outdent, indent]\n                })])]).render();\n              });\n              this.context.memo('button.height', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.textHeight), _this2.options),\n                  tooltip: _this2.lang.font.height,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdownCheck({\n                  items: _this2.options.lineHeights,\n                  checkClassName: _this2.options.icons.menuCheck,\n                  className: 'dropdown-line-height',\n                  title: _this2.lang.font.height,\n                  click: _this2.context.createInvokeHandler('editor.lineHeight')\n                })]).render();\n              });\n              this.context.memo('button.table', function () {\n                return _this2.ui.buttonGroup([_this2.button({\n                  className: 'dropdown-toggle',\n                  contents: _this2.ui.dropdownButtonContents(_this2.ui.icon(_this2.options.icons.table), _this2.options),\n                  tooltip: _this2.lang.table.table,\n                  data: {\n                    toggle: 'dropdown'\n                  }\n                }), _this2.ui.dropdown({\n                  title: _this2.lang.table.table,\n                  className: 'note-table',\n                  items: ['<div class=\"note-dimension-picker\">', '<div class=\"note-dimension-picker-mousecatcher\" data-event=\"insertTable\" data-value=\"1x1\"></div>', '<div class=\"note-dimension-picker-highlighted\"></div>', '<div class=\"note-dimension-picker-unhighlighted\"></div>', '</div>', '<div class=\"note-dimension-display\">1 x 1</div>'].join('')\n                })], {\n                  callback: function callback($node) {\n                    var $catcher = $node.find('.note-dimension-picker-mousecatcher');\n                    $catcher.css({\n                      width: _this2.options.insertTableMaxSize.col + 'em',\n                      height: _this2.options.insertTableMaxSize.row + 'em'\n                    }).mousedown(_this2.context.createInvokeHandler('editor.insertTable')).on('mousemove', _this2.tableMoveHandler.bind(_this2));\n                  }\n                }).render();\n              });\n              this.context.memo('button.link', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.link),\n                  tooltip: _this2.lang.link.link + _this2.representShortcut('linkDialog.show'),\n                  click: _this2.context.createInvokeHandler('linkDialog.show')\n                }).render();\n              });\n              this.context.memo('button.picture', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.picture),\n                  tooltip: _this2.lang.image.image,\n                  click: _this2.context.createInvokeHandler('imageDialog.show')\n                }).render();\n              });\n              this.context.memo('button.video', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.video),\n                  tooltip: _this2.lang.video.video,\n                  click: _this2.context.createInvokeHandler('videoDialog.show')\n                }).render();\n              });\n              this.context.memo('button.hr', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.minus),\n                  tooltip: _this2.lang.hr.insert + _this2.representShortcut('insertHorizontalRule'),\n                  click: _this2.context.createInvokeHandler('editor.insertHorizontalRule')\n                }).render();\n              });\n              this.context.memo('button.fullscreen', function () {\n                return _this2.button({\n                  className: 'btn-fullscreen note-codeview-keep',\n                  contents: _this2.ui.icon(_this2.options.icons.arrowsAlt),\n                  tooltip: _this2.lang.options.fullscreen,\n                  click: _this2.context.createInvokeHandler('fullscreen.toggle')\n                }).render();\n              });\n              this.context.memo('button.codeview', function () {\n                return _this2.button({\n                  className: 'btn-codeview note-codeview-keep',\n                  contents: _this2.ui.icon(_this2.options.icons.code),\n                  tooltip: _this2.lang.options.codeview,\n                  click: _this2.context.createInvokeHandler('codeview.toggle')\n                }).render();\n              });\n              this.context.memo('button.redo', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.redo),\n                  tooltip: _this2.lang.history.redo + _this2.representShortcut('redo'),\n                  click: _this2.context.createInvokeHandler('editor.redo')\n                }).render();\n              });\n              this.context.memo('button.undo', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.undo),\n                  tooltip: _this2.lang.history.undo + _this2.representShortcut('undo'),\n                  click: _this2.context.createInvokeHandler('editor.undo')\n                }).render();\n              });\n              this.context.memo('button.help', function () {\n                return _this2.button({\n                  contents: _this2.ui.icon(_this2.options.icons.question),\n                  tooltip: _this2.lang.options.help,\n                  click: _this2.context.createInvokeHandler('helpDialog.show')\n                }).render();\n              });\n            }\n            /**\n             * image: [\n             *   ['imageResize', ['resizeFull', 'resizeHalf', 'resizeQuarter', 'resizeNone']],\n             *   ['float', ['floatLeft', 'floatRight', 'floatNone']],\n             *   ['remove', ['removeMedia']],\n             * ],\n             */\n\n          }, {\n            key: \"addImagePopoverButtons\",\n            value: function addImagePopoverButtons() {\n              var _this3 = this; // Image Size Buttons\n\n\n              this.context.memo('button.resizeFull', function () {\n                return _this3.button({\n                  contents: '<span class=\"note-fontsize-10\">100%</span>',\n                  tooltip: _this3.lang.image.resizeFull,\n                  click: _this3.context.createInvokeHandler('editor.resize', '1')\n                }).render();\n              });\n              this.context.memo('button.resizeHalf', function () {\n                return _this3.button({\n                  contents: '<span class=\"note-fontsize-10\">50%</span>',\n                  tooltip: _this3.lang.image.resizeHalf,\n                  click: _this3.context.createInvokeHandler('editor.resize', '0.5')\n                }).render();\n              });\n              this.context.memo('button.resizeQuarter', function () {\n                return _this3.button({\n                  contents: '<span class=\"note-fontsize-10\">25%</span>',\n                  tooltip: _this3.lang.image.resizeQuarter,\n                  click: _this3.context.createInvokeHandler('editor.resize', '0.25')\n                }).render();\n              });\n              this.context.memo('button.resizeNone', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.rollback),\n                  tooltip: _this3.lang.image.resizeNone,\n                  click: _this3.context.createInvokeHandler('editor.resize', '0')\n                }).render();\n              }); // Float Buttons\n\n              this.context.memo('button.floatLeft', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.floatLeft),\n                  tooltip: _this3.lang.image.floatLeft,\n                  click: _this3.context.createInvokeHandler('editor.floatMe', 'left')\n                }).render();\n              });\n              this.context.memo('button.floatRight', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.floatRight),\n                  tooltip: _this3.lang.image.floatRight,\n                  click: _this3.context.createInvokeHandler('editor.floatMe', 'right')\n                }).render();\n              });\n              this.context.memo('button.floatNone', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.rollback),\n                  tooltip: _this3.lang.image.floatNone,\n                  click: _this3.context.createInvokeHandler('editor.floatMe', 'none')\n                }).render();\n              }); // Remove Buttons\n\n              this.context.memo('button.removeMedia', function () {\n                return _this3.button({\n                  contents: _this3.ui.icon(_this3.options.icons.trash),\n                  tooltip: _this3.lang.image.remove,\n                  click: _this3.context.createInvokeHandler('editor.removeMedia')\n                }).render();\n              });\n            }\n          }, {\n            key: \"addLinkPopoverButtons\",\n            value: function addLinkPopoverButtons() {\n              var _this4 = this;\n\n              this.context.memo('button.linkDialogShow', function () {\n                return _this4.button({\n                  contents: _this4.ui.icon(_this4.options.icons.link),\n                  tooltip: _this4.lang.link.edit,\n                  click: _this4.context.createInvokeHandler('linkDialog.show')\n                }).render();\n              });\n              this.context.memo('button.unlink', function () {\n                return _this4.button({\n                  contents: _this4.ui.icon(_this4.options.icons.unlink),\n                  tooltip: _this4.lang.link.unlink,\n                  click: _this4.context.createInvokeHandler('editor.unlink')\n                }).render();\n              });\n            }\n            /**\n             * table : [\n             *  ['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']],\n             *  ['delete', ['deleteRow', 'deleteCol', 'deleteTable']]\n             * ],\n             */\n\n          }, {\n            key: \"addTablePopoverButtons\",\n            value: function addTablePopoverButtons() {\n              var _this5 = this;\n\n              this.context.memo('button.addRowUp', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.rowAbove),\n                  tooltip: _this5.lang.table.addRowAbove,\n                  click: _this5.context.createInvokeHandler('editor.addRow', 'top')\n                }).render();\n              });\n              this.context.memo('button.addRowDown', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.rowBelow),\n                  tooltip: _this5.lang.table.addRowBelow,\n                  click: _this5.context.createInvokeHandler('editor.addRow', 'bottom')\n                }).render();\n              });\n              this.context.memo('button.addColLeft', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.colBefore),\n                  tooltip: _this5.lang.table.addColLeft,\n                  click: _this5.context.createInvokeHandler('editor.addCol', 'left')\n                }).render();\n              });\n              this.context.memo('button.addColRight', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.colAfter),\n                  tooltip: _this5.lang.table.addColRight,\n                  click: _this5.context.createInvokeHandler('editor.addCol', 'right')\n                }).render();\n              });\n              this.context.memo('button.deleteRow', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.rowRemove),\n                  tooltip: _this5.lang.table.delRow,\n                  click: _this5.context.createInvokeHandler('editor.deleteRow')\n                }).render();\n              });\n              this.context.memo('button.deleteCol', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.colRemove),\n                  tooltip: _this5.lang.table.delCol,\n                  click: _this5.context.createInvokeHandler('editor.deleteCol')\n                }).render();\n              });\n              this.context.memo('button.deleteTable', function () {\n                return _this5.button({\n                  className: 'btn-md',\n                  contents: _this5.ui.icon(_this5.options.icons.trash),\n                  tooltip: _this5.lang.table.delTable,\n                  click: _this5.context.createInvokeHandler('editor.deleteTable')\n                }).render();\n              });\n            }\n          }, {\n            key: \"build\",\n            value: function build($container, groups) {\n              for (var groupIdx = 0, groupLen = groups.length; groupIdx < groupLen; groupIdx++) {\n                var group = groups[groupIdx];\n                var groupName = Array.isArray(group) ? group[0] : group;\n                var buttons = Array.isArray(group) ? group.length === 1 ? [group[0]] : group[1] : [group];\n                var $group = this.ui.buttonGroup({\n                  className: 'note-' + groupName\n                }).render();\n\n                for (var idx = 0, len = buttons.length; idx < len; idx++) {\n                  var btn = this.context.memo('button.' + buttons[idx]);\n\n                  if (btn) {\n                    $group.append(typeof btn === 'function' ? btn(this.context) : btn);\n                  }\n                }\n\n                $group.appendTo($container);\n              }\n            }\n            /**\n             * @param {jQuery} [$container]\n             */\n\n          }, {\n            key: \"updateCurrentStyle\",\n            value: function updateCurrentStyle($container) {\n              var _this6 = this;\n\n              var $cont = $container || this.$toolbar;\n              var styleInfo = this.context.invoke('editor.currentStyle');\n              this.updateBtnStates($cont, {\n                '.note-btn-bold': function noteBtnBold() {\n                  return styleInfo['font-bold'] === 'bold';\n                },\n                '.note-btn-italic': function noteBtnItalic() {\n                  return styleInfo['font-italic'] === 'italic';\n                },\n                '.note-btn-underline': function noteBtnUnderline() {\n                  return styleInfo['font-underline'] === 'underline';\n                },\n                '.note-btn-subscript': function noteBtnSubscript() {\n                  return styleInfo['font-subscript'] === 'subscript';\n                },\n                '.note-btn-superscript': function noteBtnSuperscript() {\n                  return styleInfo['font-superscript'] === 'superscript';\n                },\n                '.note-btn-strikethrough': function noteBtnStrikethrough() {\n                  return styleInfo['font-strikethrough'] === 'strikethrough';\n                }\n              });\n\n              if (styleInfo['font-family']) {\n                var fontNames = styleInfo['font-family'].split(',').map(function (name) {\n                  return name.replace(/[\\'\\\"]/g, '').replace(/\\s+$/, '').replace(/^\\s+/, '');\n                });\n                var fontName = lists.find(fontNames, this.isFontInstalled.bind(this));\n                $cont.find('.dropdown-fontname a').each(function (idx, item) {\n                  var $item = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item); // always compare string to avoid creating another func.\n\n                  var isChecked = $item.data('value') + '' === fontName + '';\n                  $item.toggleClass('checked', isChecked);\n                });\n                $cont.find('.note-current-fontname').text(fontName).css('font-family', fontName);\n              }\n\n              if (styleInfo['font-size']) {\n                var fontSize = styleInfo['font-size'];\n                $cont.find('.dropdown-fontsize a').each(function (idx, item) {\n                  var $item = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item); // always compare with string to avoid creating another func.\n\n                  var isChecked = $item.data('value') + '' === fontSize + '';\n                  $item.toggleClass('checked', isChecked);\n                });\n                $cont.find('.note-current-fontsize').text(fontSize);\n                var fontSizeUnit = styleInfo['font-size-unit'];\n                $cont.find('.dropdown-fontsizeunit a').each(function (idx, item) {\n                  var $item = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item);\n                  var isChecked = $item.data('value') + '' === fontSizeUnit + '';\n                  $item.toggleClass('checked', isChecked);\n                });\n                $cont.find('.note-current-fontsizeunit').text(fontSizeUnit);\n              }\n\n              if (styleInfo['line-height']) {\n                var lineHeight = styleInfo['line-height'];\n                $cont.find('.dropdown-line-height li a').each(function (idx, item) {\n                  // always compare with string to avoid creating another func.\n                  var isChecked = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(item).data('value') + '' === lineHeight + '';\n                  _this6.className = isChecked ? 'checked' : '';\n                });\n              }\n            }\n          }, {\n            key: \"updateBtnStates\",\n            value: function updateBtnStates($container, infos) {\n              var _this7 = this;\n\n              external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.each(infos, function (selector, pred) {\n                _this7.ui.toggleBtnActive($container.find(selector), pred());\n              });\n            }\n          }, {\n            key: \"tableMoveHandler\",\n            value: function tableMoveHandler(event) {\n              var PX_PER_EM = 18;\n              var $picker = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target.parentNode); // target is mousecatcher\n\n              var $dimensionDisplay = $picker.next();\n              var $catcher = $picker.find('.note-dimension-picker-mousecatcher');\n              var $highlighted = $picker.find('.note-dimension-picker-highlighted');\n              var $unhighlighted = $picker.find('.note-dimension-picker-unhighlighted');\n              var posOffset; // HTML5 with jQuery - e.offsetX is undefined in Firefox\n\n              if (event.offsetX === undefined) {\n                var posCatcher = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(event.target).offset();\n                posOffset = {\n                  x: event.pageX - posCatcher.left,\n                  y: event.pageY - posCatcher.top\n                };\n              } else {\n                posOffset = {\n                  x: event.offsetX,\n                  y: event.offsetY\n                };\n              }\n\n              var dim = {\n                c: Math.ceil(posOffset.x / PX_PER_EM) || 1,\n                r: Math.ceil(posOffset.y / PX_PER_EM) || 1\n              };\n              $highlighted.css({\n                width: dim.c + 'em',\n                height: dim.r + 'em'\n              });\n              $catcher.data('value', dim.c + 'x' + dim.r);\n\n              if (dim.c > 3 && dim.c < this.options.insertTableMaxSize.col) {\n                $unhighlighted.css({\n                  width: dim.c + 1 + 'em'\n                });\n              }\n\n              if (dim.r > 3 && dim.r < this.options.insertTableMaxSize.row) {\n                $unhighlighted.css({\n                  height: dim.r + 1 + 'em'\n                });\n              }\n\n              $dimensionDisplay.html(dim.c + ' x ' + dim.r);\n            }\n          }]);\n          return Buttons;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/Toolbar.js\n\n\n        function Toolbar_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function Toolbar_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function Toolbar_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) Toolbar_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) Toolbar_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var Toolbar_Toolbar = /*#__PURE__*/function () {\n          function Toolbar(context) {\n            Toolbar_classCallCheck(this, Toolbar);\n            this.context = context;\n            this.$window = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(window);\n            this.$document = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document);\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.$note = context.layoutInfo.note;\n            this.$editor = context.layoutInfo.editor;\n            this.$toolbar = context.layoutInfo.toolbar;\n            this.$editable = context.layoutInfo.editable;\n            this.$statusbar = context.layoutInfo.statusbar;\n            this.options = context.options;\n            this.isFollowing = false;\n            this.followScroll = this.followScroll.bind(this);\n          }\n\n          Toolbar_createClass(Toolbar, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !this.options.airMode;\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this = this;\n\n              this.options.toolbar = this.options.toolbar || [];\n\n              if (!this.options.toolbar.length) {\n                this.$toolbar.hide();\n              } else {\n                this.context.invoke('buttons.build', this.$toolbar, this.options.toolbar);\n              }\n\n              if (this.options.toolbarContainer) {\n                this.$toolbar.appendTo(this.options.toolbarContainer);\n              }\n\n              this.changeContainer(false);\n              this.$note.on('summernote.keyup summernote.mouseup summernote.change', function () {\n                _this.context.invoke('buttons.updateCurrentStyle');\n              });\n              this.context.invoke('buttons.updateCurrentStyle');\n\n              if (this.options.followingToolbar) {\n                this.$window.on('scroll resize', this.followScroll);\n              }\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$toolbar.children().remove();\n\n              if (this.options.followingToolbar) {\n                this.$window.off('scroll resize', this.followScroll);\n              }\n            }\n          }, {\n            key: \"followScroll\",\n            value: function followScroll() {\n              if (this.$editor.hasClass('fullscreen')) {\n                return false;\n              }\n\n              var editorHeight = this.$editor.outerHeight();\n              var editorWidth = this.$editor.width();\n              var toolbarHeight = this.$toolbar.height();\n              var statusbarHeight = this.$statusbar.height(); // check if the web app is currently using another static bar\n\n              var otherBarHeight = 0;\n\n              if (this.options.otherStaticBar) {\n                otherBarHeight = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.otherStaticBar).outerHeight();\n              }\n\n              var currentOffset = this.$document.scrollTop();\n              var editorOffsetTop = this.$editor.offset().top;\n              var editorOffsetBottom = editorOffsetTop + editorHeight;\n              var activateOffset = editorOffsetTop - otherBarHeight;\n              var deactivateOffsetBottom = editorOffsetBottom - otherBarHeight - toolbarHeight - statusbarHeight;\n\n              if (!this.isFollowing && currentOffset > activateOffset && currentOffset < deactivateOffsetBottom - toolbarHeight) {\n                this.isFollowing = true;\n                this.$editable.css({\n                  marginTop: this.$toolbar.outerHeight()\n                });\n                this.$toolbar.css({\n                  position: 'fixed',\n                  top: otherBarHeight,\n                  width: editorWidth,\n                  zIndex: 1000\n                });\n              } else if (this.isFollowing && (currentOffset < activateOffset || currentOffset > deactivateOffsetBottom)) {\n                this.isFollowing = false;\n                this.$toolbar.css({\n                  position: 'relative',\n                  top: 0,\n                  width: '100%',\n                  zIndex: 'auto'\n                });\n                this.$editable.css({\n                  marginTop: ''\n                });\n              }\n            }\n          }, {\n            key: \"changeContainer\",\n            value: function changeContainer(isFullscreen) {\n              if (isFullscreen) {\n                this.$toolbar.prependTo(this.$editor);\n              } else {\n                if (this.options.toolbarContainer) {\n                  this.$toolbar.appendTo(this.options.toolbarContainer);\n                }\n              }\n\n              if (this.options.followingToolbar) {\n                this.followScroll();\n              }\n            }\n          }, {\n            key: \"updateFullscreen\",\n            value: function updateFullscreen(isFullscreen) {\n              this.ui.toggleBtnActive(this.$toolbar.find('.btn-fullscreen'), isFullscreen);\n              this.changeContainer(isFullscreen);\n            }\n          }, {\n            key: \"updateCodeview\",\n            value: function updateCodeview(isCodeview) {\n              this.ui.toggleBtnActive(this.$toolbar.find('.btn-codeview'), isCodeview);\n\n              if (isCodeview) {\n                this.deactivate();\n              } else {\n                this.activate();\n              }\n            }\n          }, {\n            key: \"activate\",\n            value: function activate(isIncludeCodeview) {\n              var $btn = this.$toolbar.find('button');\n\n              if (!isIncludeCodeview) {\n                $btn = $btn.not('.note-codeview-keep');\n              }\n\n              this.ui.toggleBtn($btn, true);\n            }\n          }, {\n            key: \"deactivate\",\n            value: function deactivate(isIncludeCodeview) {\n              var $btn = this.$toolbar.find('button');\n\n              if (!isIncludeCodeview) {\n                $btn = $btn.not('.note-codeview-keep');\n              }\n\n              this.ui.toggleBtn($btn, false);\n            }\n          }]);\n          return Toolbar;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/LinkDialog.js\n\n\n        function LinkDialog_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function LinkDialog_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function LinkDialog_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) LinkDialog_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) LinkDialog_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var LinkDialog_LinkDialog = /*#__PURE__*/function () {\n          function LinkDialog(context) {\n            LinkDialog_classCallCheck(this, LinkDialog);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.$body = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document.body);\n            this.$editor = context.layoutInfo.editor;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n            context.memo('help.linkDialog.show', this.options.langInfo.help['linkDialog.show']);\n          }\n\n          LinkDialog_createClass(LinkDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var $container = this.options.dialogsInBody ? this.$body : this.options.container;\n              var body = ['<div class=\"form-group note-form-group\">', \"<label for=\\\"note-dialog-link-txt-\".concat(this.options.id, \"\\\" class=\\\"note-form-label\\\">\").concat(this.lang.link.textToDisplay, \"</label>\"), \"<input id=\\\"note-dialog-link-txt-\".concat(this.options.id, \"\\\" class=\\\"note-link-text form-control note-form-control note-input\\\" type=\\\"text\\\"/>\"), '</div>', '<div class=\"form-group note-form-group\">', \"<label for=\\\"note-dialog-link-url-\".concat(this.options.id, \"\\\" class=\\\"note-form-label\\\">\").concat(this.lang.link.url, \"</label>\"), \"<input id=\\\"note-dialog-link-url-\".concat(this.options.id, \"\\\" class=\\\"note-link-url form-control note-form-control note-input\\\" type=\\\"text\\\" value=\\\"http://\\\"/>\"), '</div>', !this.options.disableLinkTarget ? external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div/>').append(this.ui.checkbox({\n                className: 'sn-checkbox-open-in-new-window',\n                text: this.lang.link.openInNewWindow,\n                checked: true\n              }).render()).html() : '', external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div/>').append(this.ui.checkbox({\n                className: 'sn-checkbox-use-protocol',\n                text: this.lang.link.useProtocol,\n                checked: true\n              }).render()).html()].join('');\n              var buttonClass = 'btn btn-primary note-btn note-btn-primary note-link-btn';\n              var footer = \"<input type=\\\"button\\\" href=\\\"#\\\" class=\\\"\".concat(buttonClass, \"\\\" value=\\\"\").concat(this.lang.link.insert, \"\\\" disabled>\");\n              this.$dialog = this.ui.dialog({\n                className: 'link-dialog',\n                title: this.lang.link.insert,\n                fade: this.options.dialogsFade,\n                body: body,\n                footer: footer\n              }).render().appendTo($container);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.ui.hideDialog(this.$dialog);\n              this.$dialog.remove();\n            }\n          }, {\n            key: \"bindEnterKey\",\n            value: function bindEnterKey($input, $btn) {\n              $input.on('keypress', function (event) {\n                if (event.keyCode === core_key.code.ENTER) {\n                  event.preventDefault();\n                  $btn.trigger('click');\n                }\n              });\n            }\n            /**\n             * toggle update button\n             */\n\n          }, {\n            key: \"toggleLinkBtn\",\n            value: function toggleLinkBtn($linkBtn, $linkText, $linkUrl) {\n              this.ui.toggleBtn($linkBtn, $linkText.val() && $linkUrl.val());\n            }\n            /**\n             * Show link dialog and set event handlers on dialog controls.\n             *\n             * @param {Object} linkInfo\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"showLinkDialog\",\n            value: function showLinkDialog(linkInfo) {\n              var _this = this;\n\n              return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function (deferred) {\n                var $linkText = _this.$dialog.find('.note-link-text');\n\n                var $linkUrl = _this.$dialog.find('.note-link-url');\n\n                var $linkBtn = _this.$dialog.find('.note-link-btn');\n\n                var $openInNewWindow = _this.$dialog.find('.sn-checkbox-open-in-new-window input[type=checkbox]');\n\n                var $useProtocol = _this.$dialog.find('.sn-checkbox-use-protocol input[type=checkbox]');\n\n                _this.ui.onDialogShown(_this.$dialog, function () {\n                  _this.context.triggerEvent('dialog.shown'); // If no url was given and given text is valid URL then copy that into URL Field\n\n\n                  if (!linkInfo.url && func.isValidUrl(linkInfo.text)) {\n                    linkInfo.url = linkInfo.text;\n                  }\n\n                  $linkText.on('input paste propertychange', function () {\n                    // If linktext was modified by input events,\n                    // cloning text from linkUrl will be stopped.\n                    linkInfo.text = $linkText.val();\n\n                    _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);\n                  }).val(linkInfo.text);\n                  $linkUrl.on('input paste propertychange', function () {\n                    // Display same text on `Text to display` as default\n                    // when linktext has no text\n                    if (!linkInfo.text) {\n                      $linkText.val($linkUrl.val());\n                    }\n\n                    _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);\n                  }).val(linkInfo.url);\n\n                  if (!env.isSupportTouch) {\n                    $linkUrl.trigger('focus');\n                  }\n\n                  _this.toggleLinkBtn($linkBtn, $linkText, $linkUrl);\n\n                  _this.bindEnterKey($linkUrl, $linkBtn);\n\n                  _this.bindEnterKey($linkText, $linkBtn);\n\n                  var isNewWindowChecked = linkInfo.isNewWindow !== undefined ? linkInfo.isNewWindow : _this.context.options.linkTargetBlank;\n                  $openInNewWindow.prop('checked', isNewWindowChecked);\n                  var useProtocolChecked = linkInfo.url ? false : _this.context.options.useProtocol;\n                  $useProtocol.prop('checked', useProtocolChecked);\n                  $linkBtn.one('click', function (event) {\n                    event.preventDefault();\n                    deferred.resolve({\n                      range: linkInfo.range,\n                      url: $linkUrl.val(),\n                      text: $linkText.val(),\n                      isNewWindow: $openInNewWindow.is(':checked'),\n                      checkProtocol: $useProtocol.is(':checked')\n                    });\n\n                    _this.ui.hideDialog(_this.$dialog);\n                  });\n                });\n\n                _this.ui.onDialogHidden(_this.$dialog, function () {\n                  // detach events\n                  $linkText.off();\n                  $linkUrl.off();\n                  $linkBtn.off();\n\n                  if (deferred.state() === 'pending') {\n                    deferred.reject();\n                  }\n                });\n\n                _this.ui.showDialog(_this.$dialog);\n              }).promise();\n            }\n            /**\n             * @param {Object} layoutInfo\n             */\n\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this2 = this;\n\n              var linkInfo = this.context.invoke('editor.getLinkInfo');\n              this.context.invoke('editor.saveRange');\n              this.showLinkDialog(linkInfo).then(function (linkInfo) {\n                _this2.context.invoke('editor.restoreRange');\n\n                _this2.context.invoke('editor.createLink', linkInfo);\n              }).fail(function () {\n                _this2.context.invoke('editor.restoreRange');\n              });\n            }\n          }]);\n          return LinkDialog;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/LinkPopover.js\n\n\n        function LinkPopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function LinkPopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function LinkPopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) LinkPopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) LinkPopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var LinkPopover_LinkPopover = /*#__PURE__*/function () {\n          function LinkPopover(context) {\n            var _this = this;\n\n            LinkPopover_classCallCheck(this, LinkPopover);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.options = context.options;\n            this.events = {\n              'summernote.keyup summernote.mouseup summernote.change summernote.scroll': function summernoteKeyupSummernoteMouseupSummernoteChangeSummernoteScroll() {\n                _this.update();\n              },\n              'summernote.disable summernote.dialog.shown summernote.blur': function summernoteDisableSummernoteDialogShownSummernoteBlur() {\n                _this.hide();\n              }\n            };\n          }\n\n          LinkPopover_createClass(LinkPopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !lists.isEmpty(this.options.popover.link);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.$popover = this.ui.popover({\n                className: 'note-link-popover',\n                callback: function callback($node) {\n                  var $content = $node.find('.popover-content,.note-popover-content');\n                  $content.prepend('<span><a target=\"_blank\"></a>&nbsp;</span>');\n                }\n              }).render().appendTo(this.options.container);\n              var $content = this.$popover.find('.popover-content,.note-popover-content');\n              this.context.invoke('buttons.build', $content, this.options.popover.link);\n              this.$popover.on('mousedown', function (e) {\n                e.preventDefault();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update() {\n              // Prevent focusing on editable when invoke('code') is executed\n              if (!this.context.invoke('editor.hasFocus')) {\n                this.hide();\n                return;\n              }\n\n              var rng = this.context.invoke('editor.getLastRange');\n\n              if (rng.isCollapsed() && rng.isOnAnchor()) {\n                var anchor = dom.ancestor(rng.sc, dom.isAnchor);\n                var href = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(anchor).attr('href');\n                this.$popover.find('a').attr('href', href).text(href);\n                var pos = dom.posFromPlaceholder(anchor);\n                var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();\n                pos.top -= containerOffset.top;\n                pos.left -= containerOffset.left;\n                this.$popover.css({\n                  display: 'block',\n                  left: pos.left,\n                  top: pos.top\n                });\n              } else {\n                this.hide();\n              }\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.$popover.hide();\n            }\n          }]);\n          return LinkPopover;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/ImageDialog.js\n\n\n        function ImageDialog_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function ImageDialog_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function ImageDialog_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) ImageDialog_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) ImageDialog_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var ImageDialog_ImageDialog = /*#__PURE__*/function () {\n          function ImageDialog(context) {\n            ImageDialog_classCallCheck(this, ImageDialog);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.$body = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document.body);\n            this.$editor = context.layoutInfo.editor;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n          }\n\n          ImageDialog_createClass(ImageDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var imageLimitation = '';\n\n              if (this.options.maximumImageFileSize) {\n                var unit = Math.floor(Math.log(this.options.maximumImageFileSize) / Math.log(1024));\n                var readableSize = (this.options.maximumImageFileSize / Math.pow(1024, unit)).toFixed(2) * 1 + ' ' + ' KMGTP'[unit] + 'B';\n                imageLimitation = \"<small>\".concat(this.lang.image.maximumFileSize + ' : ' + readableSize, \"</small>\");\n              }\n\n              var $container = this.options.dialogsInBody ? this.$body : this.options.container;\n              var body = ['<div class=\"form-group note-form-group note-group-select-from-files\">', '<label for=\"note-dialog-image-file-' + this.options.id + '\" class=\"note-form-label\">' + this.lang.image.selectFromFiles + '</label>', '<input id=\"note-dialog-image-file-' + this.options.id + '\" class=\"note-image-input form-control-file note-form-control note-input\" ', ' type=\"file\" name=\"files\" accept=\"image/*\" multiple=\"multiple\"/>', imageLimitation, '</div>', '<div class=\"form-group note-group-image-url\">', '<label for=\"note-dialog-image-url-' + this.options.id + '\" class=\"note-form-label\">' + this.lang.image.url + '</label>', '<input id=\"note-dialog-image-url-' + this.options.id + '\" class=\"note-image-url form-control note-form-control note-input\" type=\"text\"/>', '</div>'].join('');\n              var buttonClass = 'btn btn-primary note-btn note-btn-primary note-image-btn';\n              var footer = \"<input type=\\\"button\\\" href=\\\"#\\\" class=\\\"\".concat(buttonClass, \"\\\" value=\\\"\").concat(this.lang.image.insert, \"\\\" disabled>\");\n              this.$dialog = this.ui.dialog({\n                title: this.lang.image.insert,\n                fade: this.options.dialogsFade,\n                body: body,\n                footer: footer\n              }).render().appendTo($container);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.ui.hideDialog(this.$dialog);\n              this.$dialog.remove();\n            }\n          }, {\n            key: \"bindEnterKey\",\n            value: function bindEnterKey($input, $btn) {\n              $input.on('keypress', function (event) {\n                if (event.keyCode === core_key.code.ENTER) {\n                  event.preventDefault();\n                  $btn.trigger('click');\n                }\n              });\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this = this;\n\n              this.context.invoke('editor.saveRange');\n              this.showImageDialog().then(function (data) {\n                // [workaround] hide dialog before restore range for IE range focus\n                _this.ui.hideDialog(_this.$dialog);\n\n                _this.context.invoke('editor.restoreRange');\n\n                if (typeof data === 'string') {\n                  // image url\n                  // If onImageLinkInsert set,\n                  if (_this.options.callbacks.onImageLinkInsert) {\n                    _this.context.triggerEvent('image.link.insert', data);\n                  } else {\n                    _this.context.invoke('editor.insertImage', data);\n                  }\n                } else {\n                  // array of files\n                  _this.context.invoke('editor.insertImagesOrCallback', data);\n                }\n              }).fail(function () {\n                _this.context.invoke('editor.restoreRange');\n              });\n            }\n            /**\n             * show image dialog\n             *\n             * @param {jQuery} $dialog\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"showImageDialog\",\n            value: function showImageDialog() {\n              var _this2 = this;\n\n              return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function (deferred) {\n                var $imageInput = _this2.$dialog.find('.note-image-input');\n\n                var $imageUrl = _this2.$dialog.find('.note-image-url');\n\n                var $imageBtn = _this2.$dialog.find('.note-image-btn');\n\n                _this2.ui.onDialogShown(_this2.$dialog, function () {\n                  _this2.context.triggerEvent('dialog.shown'); // Cloning imageInput to clear element.\n\n\n                  $imageInput.replaceWith($imageInput.clone().on('change', function (event) {\n                    deferred.resolve(event.target.files || event.target.value);\n                  }).val(''));\n                  $imageUrl.on('input paste propertychange', function () {\n                    _this2.ui.toggleBtn($imageBtn, $imageUrl.val());\n                  }).val('');\n\n                  if (!env.isSupportTouch) {\n                    $imageUrl.trigger('focus');\n                  }\n\n                  $imageBtn.click(function (event) {\n                    event.preventDefault();\n                    deferred.resolve($imageUrl.val());\n                  });\n\n                  _this2.bindEnterKey($imageUrl, $imageBtn);\n                });\n\n                _this2.ui.onDialogHidden(_this2.$dialog, function () {\n                  $imageInput.off();\n                  $imageUrl.off();\n                  $imageBtn.off();\n\n                  if (deferred.state() === 'pending') {\n                    deferred.reject();\n                  }\n                });\n\n                _this2.ui.showDialog(_this2.$dialog);\n              });\n            }\n          }]);\n          return ImageDialog;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/ImagePopover.js\n\n\n        function ImagePopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function ImagePopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function ImagePopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) ImagePopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) ImagePopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n        /**\n         * Image popover module\n         *  mouse events that show/hide popover will be handled by Handle.js.\n         *  Handle.js will receive the events and invoke 'imagePopover.update'.\n         */\n\n\n        var ImagePopover_ImagePopover = /*#__PURE__*/function () {\n          function ImagePopover(context) {\n            var _this = this;\n\n            ImagePopover_classCallCheck(this, ImagePopover);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.editable = context.layoutInfo.editable[0];\n            this.options = context.options;\n            this.events = {\n              'summernote.disable summernote.blur': function summernoteDisableSummernoteBlur() {\n                _this.hide();\n              }\n            };\n          }\n\n          ImagePopover_createClass(ImagePopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !lists.isEmpty(this.options.popover.image);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.$popover = this.ui.popover({\n                className: 'note-image-popover'\n              }).render().appendTo(this.options.container);\n              var $content = this.$popover.find('.popover-content,.note-popover-content');\n              this.context.invoke('buttons.build', $content, this.options.popover.image);\n              this.$popover.on('mousedown', function (e) {\n                e.preventDefault();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update(target, event) {\n              if (dom.isImg(target)) {\n                var position = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(target).offset();\n                var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();\n                var pos = {};\n\n                if (this.options.popatmouse) {\n                  pos.left = event.pageX - 20;\n                  pos.top = event.pageY;\n                } else {\n                  pos = position;\n                }\n\n                pos.top -= containerOffset.top;\n                pos.left -= containerOffset.left;\n                this.$popover.css({\n                  display: 'block',\n                  left: pos.left,\n                  top: pos.top\n                });\n              } else {\n                this.hide();\n              }\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.$popover.hide();\n            }\n          }]);\n          return ImagePopover;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/TablePopover.js\n\n\n        function TablePopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function TablePopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function TablePopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) TablePopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) TablePopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var TablePopover_TablePopover = /*#__PURE__*/function () {\n          function TablePopover(context) {\n            var _this = this;\n\n            TablePopover_classCallCheck(this, TablePopover);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.options = context.options;\n            this.events = {\n              'summernote.mousedown': function summernoteMousedown(we, e) {\n                _this.update(e.target);\n              },\n              'summernote.keyup summernote.scroll summernote.change': function summernoteKeyupSummernoteScrollSummernoteChange() {\n                _this.update();\n              },\n              'summernote.disable summernote.blur': function summernoteDisableSummernoteBlur() {\n                _this.hide();\n              }\n            };\n          }\n\n          TablePopover_createClass(TablePopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return !lists.isEmpty(this.options.popover.table);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              this.$popover = this.ui.popover({\n                className: 'note-table-popover'\n              }).render().appendTo(this.options.container);\n              var $content = this.$popover.find('.popover-content,.note-popover-content');\n              this.context.invoke('buttons.build', $content, this.options.popover.table); // [workaround] Disable Firefox's default table editor\n\n              if (env.isFF) {\n                document.execCommand('enableInlineTableEditing', false, false);\n              }\n\n              this.$popover.on('mousedown', function (e) {\n                e.preventDefault();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update(target) {\n              if (this.context.isDisabled()) {\n                return false;\n              }\n\n              var isCell = dom.isCell(target);\n\n              if (isCell) {\n                var pos = dom.posFromPlaceholder(target);\n                var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();\n                pos.top -= containerOffset.top;\n                pos.left -= containerOffset.left;\n                this.$popover.css({\n                  display: 'block',\n                  left: pos.left,\n                  top: pos.top\n                });\n              } else {\n                this.hide();\n              }\n\n              return isCell;\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.$popover.hide();\n            }\n          }]);\n          return TablePopover;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/VideoDialog.js\n\n\n        function VideoDialog_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function VideoDialog_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function VideoDialog_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) VideoDialog_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) VideoDialog_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var VideoDialog_VideoDialog = /*#__PURE__*/function () {\n          function VideoDialog(context) {\n            VideoDialog_classCallCheck(this, VideoDialog);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.$body = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document.body);\n            this.$editor = context.layoutInfo.editor;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n          }\n\n          VideoDialog_createClass(VideoDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var $container = this.options.dialogsInBody ? this.$body : this.options.container;\n              var body = ['<div class=\"form-group note-form-group row-fluid\">', \"<label for=\\\"note-dialog-video-url-\".concat(this.options.id, \"\\\" class=\\\"note-form-label\\\">\").concat(this.lang.video.url, \" <small class=\\\"text-muted\\\">\").concat(this.lang.video.providers, \"</small></label>\"), \"<input id=\\\"note-dialog-video-url-\".concat(this.options.id, \"\\\" class=\\\"note-video-url form-control note-form-control note-input\\\" type=\\\"text\\\"/>\"), '</div>'].join('');\n              var buttonClass = 'btn btn-primary note-btn note-btn-primary note-video-btn';\n              var footer = \"<input type=\\\"button\\\" href=\\\"#\\\" class=\\\"\".concat(buttonClass, \"\\\" value=\\\"\").concat(this.lang.video.insert, \"\\\" disabled>\");\n              this.$dialog = this.ui.dialog({\n                title: this.lang.video.insert,\n                fade: this.options.dialogsFade,\n                body: body,\n                footer: footer\n              }).render().appendTo($container);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.ui.hideDialog(this.$dialog);\n              this.$dialog.remove();\n            }\n          }, {\n            key: \"bindEnterKey\",\n            value: function bindEnterKey($input, $btn) {\n              $input.on('keypress', function (event) {\n                if (event.keyCode === core_key.code.ENTER) {\n                  event.preventDefault();\n                  $btn.trigger('click');\n                }\n              });\n            }\n          }, {\n            key: \"createVideoNode\",\n            value: function createVideoNode(url) {\n              // video url patterns(youtube, instagram, vimeo, dailymotion, youku, mp4, ogg, webm)\n              var ytRegExp = /\\/\\/(?:(?:www|m)\\.)?(?:youtu\\.be\\/|youtube\\.com\\/(?:embed\\/|v\\/|watch\\?v=|watch\\?.+&v=))([\\w|-]{11})(?:(?:[\\?&]t=)(\\S+))?$/;\n              var ytRegExpForStart = /^(?:(\\d+)h)?(?:(\\d+)m)?(?:(\\d+)s)?$/;\n              var ytMatch = url.match(ytRegExp);\n              var igRegExp = /(?:www\\.|\\/\\/)instagram\\.com\\/p\\/(.[a-zA-Z0-9_-]*)/;\n              var igMatch = url.match(igRegExp);\n              var vRegExp = /\\/\\/vine\\.co\\/v\\/([a-zA-Z0-9]+)/;\n              var vMatch = url.match(vRegExp);\n              var vimRegExp = /\\/\\/(player\\.)?vimeo\\.com\\/([a-z]*\\/)*(\\d+)[?]?.*/;\n              var vimMatch = url.match(vimRegExp);\n              var dmRegExp = /.+dailymotion.com\\/(video|hub)\\/([^_]+)[^#]*(#video=([^_&]+))?/;\n              var dmMatch = url.match(dmRegExp);\n              var youkuRegExp = /\\/\\/v\\.youku\\.com\\/v_show\\/id_(\\w+)=*\\.html/;\n              var youkuMatch = url.match(youkuRegExp);\n              var qqRegExp = /\\/\\/v\\.qq\\.com.*?vid=(.+)/;\n              var qqMatch = url.match(qqRegExp);\n              var qqRegExp2 = /\\/\\/v\\.qq\\.com\\/x?\\/?(page|cover).*?\\/([^\\/]+)\\.html\\??.*/;\n              var qqMatch2 = url.match(qqRegExp2);\n              var mp4RegExp = /^.+.(mp4|m4v)$/;\n              var mp4Match = url.match(mp4RegExp);\n              var oggRegExp = /^.+.(ogg|ogv)$/;\n              var oggMatch = url.match(oggRegExp);\n              var webmRegExp = /^.+.(webm)$/;\n              var webmMatch = url.match(webmRegExp);\n              var fbRegExp = /(?:www\\.|\\/\\/)facebook\\.com\\/([^\\/]+)\\/videos\\/([0-9]+)/;\n              var fbMatch = url.match(fbRegExp);\n              var $video;\n\n              if (ytMatch && ytMatch[1].length === 11) {\n                var youtubeId = ytMatch[1];\n                var start = 0;\n\n                if (typeof ytMatch[2] !== 'undefined') {\n                  var ytMatchForStart = ytMatch[2].match(ytRegExpForStart);\n\n                  if (ytMatchForStart) {\n                    for (var n = [3600, 60, 1], i = 0, r = n.length; i < r; i++) {\n                      start += typeof ytMatchForStart[i + 1] !== 'undefined' ? n[i] * parseInt(ytMatchForStart[i + 1], 10) : 0;\n                    }\n                  }\n                }\n\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<iframe>').attr('frameborder', 0).attr('src', '//www.youtube.com/embed/' + youtubeId + (start > 0 ? '?start=' + start : '')).attr('width', '640').attr('height', '360');\n              } else if (igMatch && igMatch[0].length) {\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<iframe>').attr('frameborder', 0).attr('src', 'https://instagram.com/p/' + igMatch[1] + '/embed/').attr('width', '612').attr('height', '710').attr('scrolling', 'no').attr('allowtransparency', 'true');\n              } else if (vMatch && vMatch[0].length) {\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<iframe>').attr('frameborder', 0).attr('src', vMatch[0] + '/embed/simple').attr('width', '600').attr('height', '600').attr('class', 'vine-embed');\n              } else if (vimMatch && vimMatch[3].length) {\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>').attr('frameborder', 0).attr('src', '//player.vimeo.com/video/' + vimMatch[3]).attr('width', '640').attr('height', '360');\n              } else if (dmMatch && dmMatch[2].length) {\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<iframe>').attr('frameborder', 0).attr('src', '//www.dailymotion.com/embed/video/' + dmMatch[2]).attr('width', '640').attr('height', '360');\n              } else if (youkuMatch && youkuMatch[1].length) {\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>').attr('frameborder', 0).attr('height', '498').attr('width', '510').attr('src', '//player.youku.com/embed/' + youkuMatch[1]);\n              } else if (qqMatch && qqMatch[1].length || qqMatch2 && qqMatch2[2].length) {\n                var vid = qqMatch && qqMatch[1].length ? qqMatch[1] : qqMatch2[2];\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<iframe webkitallowfullscreen mozallowfullscreen allowfullscreen>').attr('frameborder', 0).attr('height', '310').attr('width', '500').attr('src', 'https://v.qq.com/txp/iframe/player.html?vid=' + vid + '&amp;auto=0');\n              } else if (mp4Match || oggMatch || webmMatch) {\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<video controls>').attr('src', url).attr('width', '640').attr('height', '360');\n              } else if (fbMatch && fbMatch[0].length) {\n                $video = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<iframe>').attr('frameborder', 0).attr('src', 'https://www.facebook.com/plugins/video.php?href=' + encodeURIComponent(fbMatch[0]) + '&show_text=0&width=560').attr('width', '560').attr('height', '301').attr('scrolling', 'no').attr('allowtransparency', 'true');\n              } else {\n                // this is not a known video link. Now what, Cat? Now what?\n                return false;\n              }\n\n              $video.addClass('note-video-clip');\n              return $video[0];\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this = this;\n\n              var text = this.context.invoke('editor.getSelectedText');\n              this.context.invoke('editor.saveRange');\n              this.showVideoDialog(text).then(function (url) {\n                // [workaround] hide dialog before restore range for IE range focus\n                _this.ui.hideDialog(_this.$dialog);\n\n                _this.context.invoke('editor.restoreRange'); // build node\n\n\n                var $node = _this.createVideoNode(url);\n\n                if ($node) {\n                  // insert video node\n                  _this.context.invoke('editor.insertNode', $node);\n                }\n              }).fail(function () {\n                _this.context.invoke('editor.restoreRange');\n              });\n            }\n            /**\n             * show video dialog\n             *\n             * @param {jQuery} $dialog\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"showVideoDialog\",\n            value: function showVideoDialog()\n            /* text */\n            {\n              var _this2 = this;\n\n              return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function (deferred) {\n                var $videoUrl = _this2.$dialog.find('.note-video-url');\n\n                var $videoBtn = _this2.$dialog.find('.note-video-btn');\n\n                _this2.ui.onDialogShown(_this2.$dialog, function () {\n                  _this2.context.triggerEvent('dialog.shown');\n\n                  $videoUrl.on('input paste propertychange', function () {\n                    _this2.ui.toggleBtn($videoBtn, $videoUrl.val());\n                  });\n\n                  if (!env.isSupportTouch) {\n                    $videoUrl.trigger('focus');\n                  }\n\n                  $videoBtn.click(function (event) {\n                    event.preventDefault();\n                    deferred.resolve($videoUrl.val());\n                  });\n\n                  _this2.bindEnterKey($videoUrl, $videoBtn);\n                });\n\n                _this2.ui.onDialogHidden(_this2.$dialog, function () {\n                  $videoUrl.off();\n                  $videoBtn.off();\n\n                  if (deferred.state() === 'pending') {\n                    deferred.reject();\n                  }\n                });\n\n                _this2.ui.showDialog(_this2.$dialog);\n              });\n            }\n          }]);\n          return VideoDialog;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/HelpDialog.js\n\n\n        function HelpDialog_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function HelpDialog_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function HelpDialog_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) HelpDialog_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) HelpDialog_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var HelpDialog_HelpDialog = /*#__PURE__*/function () {\n          function HelpDialog(context) {\n            HelpDialog_classCallCheck(this, HelpDialog);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.$body = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(document.body);\n            this.$editor = context.layoutInfo.editor;\n            this.options = context.options;\n            this.lang = this.options.langInfo;\n          }\n\n          HelpDialog_createClass(HelpDialog, [{\n            key: \"initialize\",\n            value: function initialize() {\n              var $container = this.options.dialogsInBody ? this.$body : this.options.container;\n              var body = ['<p class=\"text-center\">', '<a href=\"http://summernote.org/\" target=\"_blank\">Summernote 0.8.18</a> · ', '<a href=\"https://github.com/summernote/summernote\" target=\"_blank\">Project</a> · ', '<a href=\"https://github.com/summernote/summernote/issues\" target=\"_blank\">Issues</a>', '</p>'].join('');\n              this.$dialog = this.ui.dialog({\n                title: this.lang.options.help,\n                fade: this.options.dialogsFade,\n                body: this.createShortcutList(),\n                footer: body,\n                callback: function callback($node) {\n                  $node.find('.modal-body,.note-modal-body').css({\n                    'max-height': 300,\n                    'overflow': 'scroll'\n                  });\n                }\n              }).render().appendTo($container);\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.ui.hideDialog(this.$dialog);\n              this.$dialog.remove();\n            }\n          }, {\n            key: \"createShortcutList\",\n            value: function createShortcutList() {\n              var _this = this;\n\n              var keyMap = this.options.keyMap[env.isMac ? 'mac' : 'pc'];\n              return Object.keys(keyMap).map(function (key) {\n                var command = keyMap[key];\n                var $row = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div><div class=\"help-list-item\"></div></div>');\n                $row.append(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<label><kbd>' + key + '</kdb></label>').css({\n                  'width': 180,\n                  'margin-right': 10\n                })).append(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<span/>').html(_this.context.memo('help.' + command) || command));\n                return $row.html();\n              }).join('');\n            }\n            /**\n             * show help dialog\n             *\n             * @return {Promise}\n             */\n\n          }, {\n            key: \"showHelpDialog\",\n            value: function showHelpDialog() {\n              var _this2 = this;\n\n              return external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.Deferred(function (deferred) {\n                _this2.ui.onDialogShown(_this2.$dialog, function () {\n                  _this2.context.triggerEvent('dialog.shown');\n\n                  deferred.resolve();\n                });\n\n                _this2.ui.showDialog(_this2.$dialog);\n              }).promise();\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              var _this3 = this;\n\n              this.context.invoke('editor.saveRange');\n              this.showHelpDialog().then(function () {\n                _this3.context.invoke('editor.restoreRange');\n              });\n            }\n          }]);\n          return HelpDialog;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/AirPopover.js\n\n\n        function AirPopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function AirPopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function AirPopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) AirPopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) AirPopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var AIRMODE_POPOVER_X_OFFSET = -5;\n        var AIRMODE_POPOVER_Y_OFFSET = 5;\n\n        var AirPopover_AirPopover = /*#__PURE__*/function () {\n          function AirPopover(context) {\n            var _this = this;\n\n            AirPopover_classCallCheck(this, AirPopover);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.options = context.options;\n            this.hidable = true;\n            this.onContextmenu = false;\n            this.pageX = null;\n            this.pageY = null;\n            this.events = {\n              'summernote.contextmenu': function summernoteContextmenu(e) {\n                if (_this.options.editing) {\n                  e.preventDefault();\n                  e.stopPropagation();\n                  _this.onContextmenu = true;\n\n                  _this.update(true);\n                }\n              },\n              'summernote.mousedown': function summernoteMousedown(we, e) {\n                _this.pageX = e.pageX;\n                _this.pageY = e.pageY;\n              },\n              'summernote.keyup summernote.mouseup summernote.scroll': function summernoteKeyupSummernoteMouseupSummernoteScroll(we, e) {\n                if (_this.options.editing && !_this.onContextmenu) {\n                  _this.pageX = e.pageX;\n                  _this.pageY = e.pageY;\n\n                  _this.update();\n                }\n\n                _this.onContextmenu = false;\n              },\n              'summernote.disable summernote.change summernote.dialog.shown summernote.blur': function summernoteDisableSummernoteChangeSummernoteDialogShownSummernoteBlur() {\n                _this.hide();\n              },\n              'summernote.focusout': function summernoteFocusout() {\n                if (!_this.$popover.is(':active,:focus')) {\n                  _this.hide();\n                }\n              }\n            };\n          }\n\n          AirPopover_createClass(AirPopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return this.options.airMode && !lists.isEmpty(this.options.popover.air);\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this;\n\n              this.$popover = this.ui.popover({\n                className: 'note-air-popover'\n              }).render().appendTo(this.options.container);\n              var $content = this.$popover.find('.popover-content');\n              this.context.invoke('buttons.build', $content, this.options.popover.air); // disable hiding this popover preemptively by 'summernote.blur' event.\n\n              this.$popover.on('mousedown', function () {\n                _this2.hidable = false;\n              }); // (re-)enable hiding after 'summernote.blur' has been handled (aka. ignored).\n\n              this.$popover.on('mouseup', function () {\n                _this2.hidable = true;\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"update\",\n            value: function update(forcelyOpen) {\n              var styleInfo = this.context.invoke('editor.currentStyle');\n\n              if (styleInfo.range && (!styleInfo.range.isCollapsed() || forcelyOpen)) {\n                var rect = {\n                  left: this.pageX,\n                  top: this.pageY\n                };\n                var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();\n                rect.top -= containerOffset.top;\n                rect.left -= containerOffset.left;\n                this.$popover.css({\n                  display: 'block',\n                  left: Math.max(rect.left, 0) + AIRMODE_POPOVER_X_OFFSET,\n                  top: rect.top + AIRMODE_POPOVER_Y_OFFSET\n                });\n                this.context.invoke('buttons.updateCurrentStyle', this.$popover);\n              } else {\n                this.hide();\n              }\n            }\n          }, {\n            key: \"updateCodeview\",\n            value: function updateCodeview(isCodeview) {\n              this.ui.toggleBtnActive(this.$popover.find('.btn-codeview'), isCodeview);\n\n              if (isCodeview) {\n                this.hide();\n              }\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              if (this.hidable) {\n                this.$popover.hide();\n              }\n            }\n          }]);\n          return AirPopover;\n        }(); // CONCATENATED MODULE: ./src/js/base/module/HintPopover.js\n\n\n        function HintPopover_classCallCheck(instance, Constructor) {\n          if (!(instance instanceof Constructor)) {\n            throw new TypeError(\"Cannot call a class as a function\");\n          }\n        }\n\n        function HintPopover_defineProperties(target, props) {\n          for (var i = 0; i < props.length; i++) {\n            var descriptor = props[i];\n            descriptor.enumerable = descriptor.enumerable || false;\n            descriptor.configurable = true;\n            if (\"value\" in descriptor) descriptor.writable = true;\n            Object.defineProperty(target, descriptor.key, descriptor);\n          }\n        }\n\n        function HintPopover_createClass(Constructor, protoProps, staticProps) {\n          if (protoProps) HintPopover_defineProperties(Constructor.prototype, protoProps);\n          if (staticProps) HintPopover_defineProperties(Constructor, staticProps);\n          return Constructor;\n        }\n\n        var POPOVER_DIST = 5;\n\n        var HintPopover_HintPopover = /*#__PURE__*/function () {\n          function HintPopover(context) {\n            var _this = this;\n\n            HintPopover_classCallCheck(this, HintPopover);\n            this.context = context;\n            this.ui = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.ui;\n            this.$editable = context.layoutInfo.editable;\n            this.options = context.options;\n            this.hint = this.options.hint || [];\n            this.direction = this.options.hintDirection || 'bottom';\n            this.hints = Array.isArray(this.hint) ? this.hint : [this.hint];\n            this.events = {\n              'summernote.keyup': function summernoteKeyup(we, e) {\n                if (!e.isDefaultPrevented()) {\n                  _this.handleKeyup(e);\n                }\n              },\n              'summernote.keydown': function summernoteKeydown(we, e) {\n                _this.handleKeydown(e);\n              },\n              'summernote.disable summernote.dialog.shown summernote.blur': function summernoteDisableSummernoteDialogShownSummernoteBlur() {\n                _this.hide();\n              }\n            };\n          }\n\n          HintPopover_createClass(HintPopover, [{\n            key: \"shouldInitialize\",\n            value: function shouldInitialize() {\n              return this.hints.length > 0;\n            }\n          }, {\n            key: \"initialize\",\n            value: function initialize() {\n              var _this2 = this;\n\n              this.lastWordRange = null;\n              this.matchingWord = null;\n              this.$popover = this.ui.popover({\n                className: 'note-hint-popover',\n                hideArrow: true,\n                direction: ''\n              }).render().appendTo(this.options.container);\n              this.$popover.hide();\n              this.$content = this.$popover.find('.popover-content,.note-popover-content');\n              this.$content.on('click', '.note-hint-item', function (e) {\n                _this2.$content.find('.active').removeClass('active');\n\n                external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.currentTarget).addClass('active');\n\n                _this2.replace();\n              });\n              this.$popover.on('mousedown', function (e) {\n                e.preventDefault();\n              });\n            }\n          }, {\n            key: \"destroy\",\n            value: function destroy() {\n              this.$popover.remove();\n            }\n          }, {\n            key: \"selectItem\",\n            value: function selectItem($item) {\n              this.$content.find('.active').removeClass('active');\n              $item.addClass('active');\n              this.$content[0].scrollTop = $item[0].offsetTop - this.$content.innerHeight() / 2;\n            }\n          }, {\n            key: \"moveDown\",\n            value: function moveDown() {\n              var $current = this.$content.find('.note-hint-item.active');\n              var $next = $current.next();\n\n              if ($next.length) {\n                this.selectItem($next);\n              } else {\n                var $nextGroup = $current.parent().next();\n\n                if (!$nextGroup.length) {\n                  $nextGroup = this.$content.find('.note-hint-group').first();\n                }\n\n                this.selectItem($nextGroup.find('.note-hint-item').first());\n              }\n            }\n          }, {\n            key: \"moveUp\",\n            value: function moveUp() {\n              var $current = this.$content.find('.note-hint-item.active');\n              var $prev = $current.prev();\n\n              if ($prev.length) {\n                this.selectItem($prev);\n              } else {\n                var $prevGroup = $current.parent().prev();\n\n                if (!$prevGroup.length) {\n                  $prevGroup = this.$content.find('.note-hint-group').last();\n                }\n\n                this.selectItem($prevGroup.find('.note-hint-item').last());\n              }\n            }\n          }, {\n            key: \"replace\",\n            value: function replace() {\n              var $item = this.$content.find('.note-hint-item.active');\n\n              if ($item.length) {\n                var node = this.nodeFromItem($item); // If matchingWord length = 0 -> capture OK / open hint / but as mention capture \"\" (\\w*)\n\n                if (this.matchingWord !== null && this.matchingWord.length === 0) {\n                  this.lastWordRange.so = this.lastWordRange.eo; // Else si > 0 and normal case -> adjust range \"before\" for correct position of insertion\n                } else if (this.matchingWord !== null && this.matchingWord.length > 0 && !this.lastWordRange.isCollapsed()) {\n                  var rangeCompute = this.lastWordRange.eo - this.lastWordRange.so - this.matchingWord.length;\n\n                  if (rangeCompute > 0) {\n                    this.lastWordRange.so += rangeCompute;\n                  }\n                }\n\n                this.lastWordRange.insertNode(node);\n\n                if (this.options.hintSelect === 'next') {\n                  var blank = document.createTextNode('');\n                  external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(node).after(blank);\n                  range.createFromNodeBefore(blank).select();\n                } else {\n                  range.createFromNodeAfter(node).select();\n                }\n\n                this.lastWordRange = null;\n                this.hide();\n                this.context.invoke('editor.focus');\n              }\n            }\n          }, {\n            key: \"nodeFromItem\",\n            value: function nodeFromItem($item) {\n              var hint = this.hints[$item.data('index')];\n              var item = $item.data('item');\n              var node = hint.content ? hint.content(item) : item;\n\n              if (typeof node === 'string') {\n                node = dom.createText(node);\n              }\n\n              return node;\n            }\n          }, {\n            key: \"createItemTemplates\",\n            value: function createItemTemplates(hintIdx, items) {\n              var hint = this.hints[hintIdx];\n              return items.map(function (item\n              /*, idx */\n              ) {\n                var $item = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div class=\"note-hint-item\"/>');\n                $item.append(hint.template ? hint.template(item) : item + '');\n                $item.data({\n                  'index': hintIdx,\n                  'item': item\n                });\n                return $item;\n              });\n            }\n          }, {\n            key: \"handleKeydown\",\n            value: function handleKeydown(e) {\n              if (!this.$popover.is(':visible')) {\n                return;\n              }\n\n              if (e.keyCode === core_key.code.ENTER) {\n                e.preventDefault();\n                this.replace();\n              } else if (e.keyCode === core_key.code.UP) {\n                e.preventDefault();\n                this.moveUp();\n              } else if (e.keyCode === core_key.code.DOWN) {\n                e.preventDefault();\n                this.moveDown();\n              }\n            }\n          }, {\n            key: \"searchKeyword\",\n            value: function searchKeyword(index, keyword, callback) {\n              var hint = this.hints[index];\n\n              if (hint && hint.match.test(keyword) && hint.search) {\n                var matches = hint.match.exec(keyword);\n                this.matchingWord = matches[0];\n                hint.search(matches[1], callback);\n              } else {\n                callback();\n              }\n            }\n          }, {\n            key: \"createGroup\",\n            value: function createGroup(idx, keyword) {\n              var _this3 = this;\n\n              var $group = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()('<div class=\"note-hint-group note-hint-group-' + idx + '\"></div>');\n              this.searchKeyword(idx, keyword, function (items) {\n                items = items || [];\n\n                if (items.length) {\n                  $group.html(_this3.createItemTemplates(idx, items));\n\n                  _this3.show();\n                }\n              });\n              return $group;\n            }\n          }, {\n            key: \"handleKeyup\",\n            value: function handleKeyup(e) {\n              var _this4 = this;\n\n              if (!lists.contains([core_key.code.ENTER, core_key.code.UP, core_key.code.DOWN], e.keyCode)) {\n                var _range = this.context.invoke('editor.getLastRange');\n\n                var wordRange, keyword;\n\n                if (this.options.hintMode === 'words') {\n                  wordRange = _range.getWordsRange(_range);\n                  keyword = wordRange.toString();\n                  this.hints.forEach(function (hint) {\n                    if (hint.match.test(keyword)) {\n                      wordRange = _range.getWordsMatchRange(hint.match);\n                      return false;\n                    }\n                  });\n\n                  if (!wordRange) {\n                    this.hide();\n                    return;\n                  }\n\n                  keyword = wordRange.toString();\n                } else {\n                  wordRange = _range.getWordRange();\n                  keyword = wordRange.toString();\n                }\n\n                if (this.hints.length && keyword) {\n                  this.$content.empty();\n                  var bnd = func.rect2bnd(lists.last(wordRange.getClientRects()));\n                  var containerOffset = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(this.options.container).offset();\n\n                  if (bnd) {\n                    bnd.top -= containerOffset.top;\n                    bnd.left -= containerOffset.left;\n                    this.$popover.hide();\n                    this.lastWordRange = wordRange;\n                    this.hints.forEach(function (hint, idx) {\n                      if (hint.match.test(keyword)) {\n                        _this4.createGroup(idx, keyword).appendTo(_this4.$content);\n                      }\n                    }); // select first .note-hint-item\n\n                    this.$content.find('.note-hint-item:first').addClass('active'); // set position for popover after group is created\n\n                    if (this.direction === 'top') {\n                      this.$popover.css({\n                        left: bnd.left,\n                        top: bnd.top - this.$popover.outerHeight() - POPOVER_DIST\n                      });\n                    } else {\n                      this.$popover.css({\n                        left: bnd.left,\n                        top: bnd.top + bnd.height + POPOVER_DIST\n                      });\n                    }\n                  }\n                } else {\n                  this.hide();\n                }\n              }\n            }\n          }, {\n            key: \"show\",\n            value: function show() {\n              this.$popover.show();\n            }\n          }, {\n            key: \"hide\",\n            value: function hide() {\n              this.$popover.hide();\n            }\n          }]);\n          return HintPopover;\n        }(); // CONCATENATED MODULE: ./src/js/base/settings.js\n\n\n        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote, {\n          version: '0.8.18',\n          plugins: {},\n          dom: dom,\n          range: range,\n          lists: lists,\n          options: {\n            langInfo: external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.lang['en-US'],\n            editing: true,\n            modules: {\n              'editor': Editor_Editor,\n              'clipboard': Clipboard_Clipboard,\n              'dropzone': Dropzone_Dropzone,\n              'codeview': Codeview_CodeView,\n              'statusbar': Statusbar_Statusbar,\n              'fullscreen': Fullscreen_Fullscreen,\n              'handle': Handle_Handle,\n              // FIXME: HintPopover must be front of autolink\n              //  - Script error about range when Enter key is pressed on hint popover\n              'hintPopover': HintPopover_HintPopover,\n              'autoLink': AutoLink_AutoLink,\n              'autoSync': AutoSync_AutoSync,\n              'autoReplace': AutoReplace_AutoReplace,\n              'placeholder': Placeholder_Placeholder,\n              'buttons': Buttons_Buttons,\n              'toolbar': Toolbar_Toolbar,\n              'linkDialog': LinkDialog_LinkDialog,\n              'linkPopover': LinkPopover_LinkPopover,\n              'imageDialog': ImageDialog_ImageDialog,\n              'imagePopover': ImagePopover_ImagePopover,\n              'tablePopover': TablePopover_TablePopover,\n              'videoDialog': VideoDialog_VideoDialog,\n              'helpDialog': HelpDialog_HelpDialog,\n              'airPopover': AirPopover_AirPopover\n            },\n            buttons: {},\n            lang: 'en-US',\n            followingToolbar: false,\n            toolbarPosition: 'top',\n            otherStaticBar: '',\n            // toolbar\n            codeviewKeepButton: false,\n            toolbar: [['style', ['style']], ['font', ['bold', 'underline', 'clear']], ['fontname', ['fontname']], ['color', ['color']], ['para', ['ul', 'ol', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture', 'video']], ['view', ['fullscreen', 'codeview', 'help']]],\n            // popover\n            popatmouse: true,\n            popover: {\n              image: [['resize', ['resizeFull', 'resizeHalf', 'resizeQuarter', 'resizeNone']], ['float', ['floatLeft', 'floatRight', 'floatNone']], ['remove', ['removeMedia']]],\n              link: [['link', ['linkDialogShow', 'unlink']]],\n              table: [['add', ['addRowDown', 'addRowUp', 'addColLeft', 'addColRight']], ['delete', ['deleteRow', 'deleteCol', 'deleteTable']]],\n              air: [['color', ['color']], ['font', ['bold', 'underline', 'clear']], ['para', ['ul', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture']], ['view', ['fullscreen', 'codeview']]]\n            },\n            // air mode: inline editor\n            airMode: false,\n            overrideContextMenu: false,\n            // TBD\n            width: null,\n            height: null,\n            linkTargetBlank: true,\n            useProtocol: true,\n            defaultProtocol: 'http://',\n            focus: false,\n            tabDisabled: false,\n            tabSize: 4,\n            styleWithCSS: false,\n            shortcuts: true,\n            textareaAutoSync: true,\n            tooltip: 'auto',\n            container: null,\n            maxTextLength: 0,\n            blockquoteBreakingLevel: 2,\n            spellCheck: true,\n            disableGrammar: false,\n            placeholder: null,\n            inheritPlaceholder: false,\n            // TODO: need to be documented\n            recordEveryKeystroke: false,\n            historyLimit: 200,\n            // TODO: need to be documented\n            showDomainOnlyForAutolink: false,\n            // TODO: need to be documented\n            hintMode: 'word',\n            hintSelect: 'after',\n            hintDirection: 'bottom',\n            styleTags: ['p', 'blockquote', 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'],\n            fontNames: ['Arial', 'Arial Black', 'Comic Sans MS', 'Courier New', 'Helvetica Neue', 'Helvetica', 'Impact', 'Lucida Grande', 'Tahoma', 'Times New Roman', 'Verdana'],\n            fontNamesIgnoreCheck: [],\n            addDefaultFonts: true,\n            fontSizes: ['8', '9', '10', '11', '12', '14', '18', '24', '36'],\n            fontSizeUnits: ['px', 'pt'],\n            // pallete colors(n x n)\n            colors: [['#000000', '#424242', '#636363', '#9C9C94', '#CEC6CE', '#EFEFEF', '#F7F7F7', '#FFFFFF'], ['#FF0000', '#FF9C00', '#FFFF00', '#00FF00', '#00FFFF', '#0000FF', '#9C00FF', '#FF00FF'], ['#F7C6CE', '#FFE7CE', '#FFEFC6', '#D6EFD6', '#CEDEE7', '#CEE7F7', '#D6D6E7', '#E7D6DE'], ['#E79C9C', '#FFC69C', '#FFE79C', '#B5D6A5', '#A5C6CE', '#9CC6EF', '#B5A5D6', '#D6A5BD'], ['#E76363', '#F7AD6B', '#FFD663', '#94BD7B', '#73A5AD', '#6BADDE', '#8C7BC6', '#C67BA5'], ['#CE0000', '#E79439', '#EFC631', '#6BA54A', '#4A7B8C', '#3984C6', '#634AA5', '#A54A7B'], ['#9C0000', '#B56308', '#BD9400', '#397B21', '#104A5A', '#085294', '#311873', '#731842'], ['#630000', '#7B3900', '#846300', '#295218', '#083139', '#003163', '#21104A', '#4A1031']],\n            // http://chir.ag/projects/name-that-color/\n            colorsName: [['Black', 'Tundora', 'Dove Gray', 'Star Dust', 'Pale Slate', 'Gallery', 'Alabaster', 'White'], ['Red', 'Orange Peel', 'Yellow', 'Green', 'Cyan', 'Blue', 'Electric Violet', 'Magenta'], ['Azalea', 'Karry', 'Egg White', 'Zanah', 'Botticelli', 'Tropical Blue', 'Mischka', 'Twilight'], ['Tonys Pink', 'Peach Orange', 'Cream Brulee', 'Sprout', 'Casper', 'Perano', 'Cold Purple', 'Careys Pink'], ['Mandy', 'Rajah', 'Dandelion', 'Olivine', 'Gulf Stream', 'Viking', 'Blue Marguerite', 'Puce'], ['Guardsman Red', 'Fire Bush', 'Golden Dream', 'Chelsea Cucumber', 'Smalt Blue', 'Boston Blue', 'Butterfly Bush', 'Cadillac'], ['Sangria', 'Mai Tai', 'Buddha Gold', 'Forest Green', 'Eden', 'Venice Blue', 'Meteorite', 'Claret'], ['Rosewood', 'Cinnamon', 'Olive', 'Parsley', 'Tiber', 'Midnight Blue', 'Valentino', 'Loulou']],\n            colorButton: {\n              foreColor: '#000000',\n              backColor: '#FFFF00'\n            },\n            lineHeights: ['1.0', '1.2', '1.4', '1.5', '1.6', '1.8', '2.0', '3.0'],\n            tableClassName: 'table table-bordered',\n            insertTableMaxSize: {\n              col: 10,\n              row: 10\n            },\n            // By default, dialogs are attached in container.\n            dialogsInBody: false,\n            dialogsFade: false,\n            maximumImageFileSize: null,\n            callbacks: {\n              onBeforeCommand: null,\n              onBlur: null,\n              onBlurCodeview: null,\n              onChange: null,\n              onChangeCodeview: null,\n              onDialogShown: null,\n              onEnter: null,\n              onFocus: null,\n              onImageLinkInsert: null,\n              onImageUpload: null,\n              onImageUploadError: null,\n              onInit: null,\n              onKeydown: null,\n              onKeyup: null,\n              onMousedown: null,\n              onMouseup: null,\n              onPaste: null,\n              onScroll: null\n            },\n            codemirror: {\n              mode: 'text/html',\n              htmlMode: true,\n              lineNumbers: true\n            },\n            codeviewFilter: false,\n            codeviewFilterRegex: /<\\/*(?:applet|b(?:ase|gsound|link)|embed|frame(?:set)?|ilayer|l(?:ayer|ink)|meta|object|s(?:cript|tyle)|t(?:itle|extarea)|xml)[^>]*?>/gi,\n            codeviewIframeFilter: true,\n            codeviewIframeWhitelistSrc: [],\n            codeviewIframeWhitelistSrcBase: ['www.youtube.com', 'www.youtube-nocookie.com', 'www.facebook.com', 'vine.co', 'instagram.com', 'player.vimeo.com', 'www.dailymotion.com', 'player.youku.com', 'v.qq.com'],\n            keyMap: {\n              pc: {\n                'ESC': 'escape',\n                'ENTER': 'insertParagraph',\n                'CTRL+Z': 'undo',\n                'CTRL+Y': 'redo',\n                'TAB': 'tab',\n                'SHIFT+TAB': 'untab',\n                'CTRL+B': 'bold',\n                'CTRL+I': 'italic',\n                'CTRL+U': 'underline',\n                'CTRL+SHIFT+S': 'strikethrough',\n                'CTRL+BACKSLASH': 'removeFormat',\n                'CTRL+SHIFT+L': 'justifyLeft',\n                'CTRL+SHIFT+E': 'justifyCenter',\n                'CTRL+SHIFT+R': 'justifyRight',\n                'CTRL+SHIFT+J': 'justifyFull',\n                'CTRL+SHIFT+NUM7': 'insertUnorderedList',\n                'CTRL+SHIFT+NUM8': 'insertOrderedList',\n                'CTRL+LEFTBRACKET': 'outdent',\n                'CTRL+RIGHTBRACKET': 'indent',\n                'CTRL+NUM0': 'formatPara',\n                'CTRL+NUM1': 'formatH1',\n                'CTRL+NUM2': 'formatH2',\n                'CTRL+NUM3': 'formatH3',\n                'CTRL+NUM4': 'formatH4',\n                'CTRL+NUM5': 'formatH5',\n                'CTRL+NUM6': 'formatH6',\n                'CTRL+ENTER': 'insertHorizontalRule',\n                'CTRL+K': 'linkDialog.show'\n              },\n              mac: {\n                'ESC': 'escape',\n                'ENTER': 'insertParagraph',\n                'CMD+Z': 'undo',\n                'CMD+SHIFT+Z': 'redo',\n                'TAB': 'tab',\n                'SHIFT+TAB': 'untab',\n                'CMD+B': 'bold',\n                'CMD+I': 'italic',\n                'CMD+U': 'underline',\n                'CMD+SHIFT+S': 'strikethrough',\n                'CMD+BACKSLASH': 'removeFormat',\n                'CMD+SHIFT+L': 'justifyLeft',\n                'CMD+SHIFT+E': 'justifyCenter',\n                'CMD+SHIFT+R': 'justifyRight',\n                'CMD+SHIFT+J': 'justifyFull',\n                'CMD+SHIFT+NUM7': 'insertUnorderedList',\n                'CMD+SHIFT+NUM8': 'insertOrderedList',\n                'CMD+LEFTBRACKET': 'outdent',\n                'CMD+RIGHTBRACKET': 'indent',\n                'CMD+NUM0': 'formatPara',\n                'CMD+NUM1': 'formatH1',\n                'CMD+NUM2': 'formatH2',\n                'CMD+NUM3': 'formatH3',\n                'CMD+NUM4': 'formatH4',\n                'CMD+NUM5': 'formatH5',\n                'CMD+NUM6': 'formatH6',\n                'CMD+ENTER': 'insertHorizontalRule',\n                'CMD+K': 'linkDialog.show'\n              }\n            },\n            icons: {\n              'align': 'note-icon-align',\n              'alignCenter': 'note-icon-align-center',\n              'alignJustify': 'note-icon-align-justify',\n              'alignLeft': 'note-icon-align-left',\n              'alignRight': 'note-icon-align-right',\n              'rowBelow': 'note-icon-row-below',\n              'colBefore': 'note-icon-col-before',\n              'colAfter': 'note-icon-col-after',\n              'rowAbove': 'note-icon-row-above',\n              'rowRemove': 'note-icon-row-remove',\n              'colRemove': 'note-icon-col-remove',\n              'indent': 'note-icon-align-indent',\n              'outdent': 'note-icon-align-outdent',\n              'arrowsAlt': 'note-icon-arrows-alt',\n              'bold': 'note-icon-bold',\n              'caret': 'note-icon-caret',\n              'circle': 'note-icon-circle',\n              'close': 'note-icon-close',\n              'code': 'note-icon-code',\n              'eraser': 'note-icon-eraser',\n              'floatLeft': 'note-icon-float-left',\n              'floatRight': 'note-icon-float-right',\n              'font': 'note-icon-font',\n              'frame': 'note-icon-frame',\n              'italic': 'note-icon-italic',\n              'link': 'note-icon-link',\n              'unlink': 'note-icon-chain-broken',\n              'magic': 'note-icon-magic',\n              'menuCheck': 'note-icon-menu-check',\n              'minus': 'note-icon-minus',\n              'orderedlist': 'note-icon-orderedlist',\n              'pencil': 'note-icon-pencil',\n              'picture': 'note-icon-picture',\n              'question': 'note-icon-question',\n              'redo': 'note-icon-redo',\n              'rollback': 'note-icon-rollback',\n              'square': 'note-icon-square',\n              'strikethrough': 'note-icon-strikethrough',\n              'subscript': 'note-icon-subscript',\n              'superscript': 'note-icon-superscript',\n              'table': 'note-icon-table',\n              'textHeight': 'note-icon-text-height',\n              'trash': 'note-icon-trash',\n              'underline': 'note-icon-underline',\n              'undo': 'note-icon-undo',\n              'unorderedlist': 'note-icon-unorderedlist',\n              'video': 'note-icon-video'\n            }\n          }\n        });\n        /***/\n      },\n\n      /***/\n      5:\n      /***/\n      function (module, exports, __webpack_require__) {// extracted by mini-css-extract-plugin\n\n        /***/\n      },\n\n      /***/\n      53:\n      /***/\n      function (module, __webpack_exports__, __webpack_require__) {\n        \"use strict\"; // ESM COMPAT FLAG\n\n        __webpack_require__.r(__webpack_exports__); // EXTERNAL MODULE: external {\"root\":\"jQuery\",\"commonjs2\":\"jquery\",\"commonjs\":\"jquery\",\"amd\":\"jquery\"}\n\n\n        var external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_ = __webpack_require__(0);\n\n        var external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default = /*#__PURE__*/__webpack_require__.n(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_); // EXTERNAL MODULE: ./src/js/base/renderer.js\n\n\n        var renderer = __webpack_require__(1); // CONCATENATED MODULE: ./src/js/bs4/ui.js\n\n\n        function _typeof(obj) {\n          \"@babel/helpers - typeof\";\n\n          if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n            _typeof = function _typeof(obj) {\n              return typeof obj;\n            };\n          } else {\n            _typeof = function _typeof(obj) {\n              return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n            };\n          }\n\n          return _typeof(obj);\n        }\n\n        var editor = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"note-editor note-frame card\"/>');\n        var toolbar = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"note-toolbar card-header\" role=\"toolbar\"/>');\n        var editingArea = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"note-editing-area\"/>');\n        var codable = renderer[\"a\"\n        /* default */\n        ].create('<textarea class=\"note-codable\" aria-multiline=\"true\"/>');\n        var editable = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"note-editable card-block\" contentEditable=\"true\" role=\"textbox\" aria-multiline=\"true\"/>');\n        var statusbar = renderer[\"a\"\n        /* default */\n        ].create(['<output class=\"note-status-output\" role=\"status\" aria-live=\"polite\"></output>', '<div class=\"note-statusbar\" role=\"status\">', '<div class=\"note-resizebar\" aria-label=\"Resize\">', '<div class=\"note-icon-bar\"></div>', '<div class=\"note-icon-bar\"></div>', '<div class=\"note-icon-bar\"></div>', '</div>', '</div>'].join(''));\n        var airEditor = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"note-editor note-airframe\"/>');\n        var airEditable = renderer[\"a\"\n        /* default */\n        ].create(['<div class=\"note-editable\" contentEditable=\"true\" role=\"textbox\" aria-multiline=\"true\"></div>', '<output class=\"note-status-output\" role=\"status\" aria-live=\"polite\"></output>'].join(''));\n        var buttonGroup = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"note-btn-group btn-group\">');\n        var dropdown = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"note-dropdown-menu dropdown-menu\" role=\"list\">', function ($node, options) {\n          var markup = Array.isArray(options.items) ? options.items.map(function (item) {\n            var value = typeof item === 'string' ? item : item.value || '';\n            var content = options.template ? options.template(item) : item;\n            var option = _typeof(item) === 'object' ? item.option : undefined;\n            var dataValue = 'data-value=\"' + value + '\"';\n            var dataOption = option !== undefined ? ' data-option=\"' + option + '\"' : '';\n            return '<a class=\"dropdown-item\" href=\"#\" ' + (dataValue + dataOption) + ' role=\"listitem\" aria-label=\"' + value + '\">' + content + '</a>';\n          }).join('') : options.items;\n          $node.html(markup).attr({\n            'aria-label': options.title\n          });\n\n          if (options && options.codeviewKeepButton) {\n            $node.addClass('note-codeview-keep');\n          }\n        });\n\n        var dropdownButtonContents = function dropdownButtonContents(contents) {\n          return contents;\n        };\n\n        var dropdownCheck = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"note-dropdown-menu dropdown-menu note-check\" role=\"list\">', function ($node, options) {\n          var markup = Array.isArray(options.items) ? options.items.map(function (item) {\n            var value = typeof item === 'string' ? item : item.value || '';\n            var content = options.template ? options.template(item) : item;\n            return '<a class=\"dropdown-item\" href=\"#\" data-value=\"' + value + '\" role=\"listitem\" aria-label=\"' + item + '\">' + icon(options.checkClassName) + ' ' + content + '</a>';\n          }).join('') : options.items;\n          $node.html(markup).attr({\n            'aria-label': options.title\n          });\n\n          if (options && options.codeviewKeepButton) {\n            $node.addClass('note-codeview-keep');\n          }\n        });\n        var dialog = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"modal note-modal\" aria-hidden=\"false\" tabindex=\"-1\" role=\"dialog\"/>', function ($node, options) {\n          if (options.fade) {\n            $node.addClass('fade');\n          }\n\n          $node.attr({\n            'aria-label': options.title\n          });\n          $node.html(['<div class=\"modal-dialog\">', '<div class=\"modal-content\">', options.title ? '<div class=\"modal-header\">' + '<h4 class=\"modal-title\">' + options.title + '</h4>' + '<button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" aria-hidden=\"true\">&times;</button>' + '</div>' : '', '<div class=\"modal-body\">' + options.body + '</div>', options.footer ? '<div class=\"modal-footer\">' + options.footer + '</div>' : '', '</div>', '</div>'].join(''));\n        });\n        var popover = renderer[\"a\"\n        /* default */\n        ].create(['<div class=\"note-popover popover in\">', '<div class=\"arrow\"></div>', '<div class=\"popover-content note-children-container\"></div>', '</div>'].join(''), function ($node, options) {\n          var direction = typeof options.direction !== 'undefined' ? options.direction : 'bottom';\n          $node.addClass(direction);\n\n          if (options.hideArrow) {\n            $node.find('.arrow').hide();\n          }\n        });\n        var ui_checkbox = renderer[\"a\"\n        /* default */\n        ].create('<div class=\"form-check\"></div>', function ($node, options) {\n          $node.html(['<label class=\"form-check-label\"' + (options.id ? ' for=\"note-' + options.id + '\"' : '') + '>', '<input type=\"checkbox\" class=\"form-check-input\"' + (options.id ? ' id=\"note-' + options.id + '\"' : ''), options.checked ? ' checked' : '', ' aria-label=\"' + (options.text ? options.text : '') + '\"', ' aria-checked=\"' + (options.checked ? 'true' : 'false') + '\"/>', ' ' + (options.text ? options.text : '') + '</label>'].join(''));\n        });\n\n        var icon = function icon(iconClassName, tagName) {\n          tagName = tagName || 'i';\n          return '<' + tagName + ' class=\"' + iconClassName + '\"></' + tagName + '>';\n        };\n\n        var ui_ui = function ui(editorOptions) {\n          return {\n            editor: editor,\n            toolbar: toolbar,\n            editingArea: editingArea,\n            codable: codable,\n            editable: editable,\n            statusbar: statusbar,\n            airEditor: airEditor,\n            airEditable: airEditable,\n            buttonGroup: buttonGroup,\n            dropdown: dropdown,\n            dropdownButtonContents: dropdownButtonContents,\n            dropdownCheck: dropdownCheck,\n            dialog: dialog,\n            popover: popover,\n            icon: icon,\n            checkbox: ui_checkbox,\n            options: editorOptions,\n            palette: function palette($node, options) {\n              return renderer[\"a\"\n              /* default */\n              ].create('<div class=\"note-color-palette\"/>', function ($node, options) {\n                var contents = [];\n\n                for (var row = 0, rowSize = options.colors.length; row < rowSize; row++) {\n                  var eventName = options.eventName;\n                  var colors = options.colors[row];\n                  var colorsName = options.colorsName[row];\n                  var buttons = [];\n\n                  for (var col = 0, colSize = colors.length; col < colSize; col++) {\n                    var color = colors[col];\n                    var colorName = colorsName[col];\n                    buttons.push(['<button type=\"button\" class=\"note-color-btn\"', 'style=\"background-color:', color, '\" ', 'data-event=\"', eventName, '\" ', 'data-value=\"', color, '\" ', 'title=\"', colorName, '\" ', 'aria-label=\"', colorName, '\" ', 'data-toggle=\"button\" tabindex=\"-1\"></button>'].join(''));\n                  }\n\n                  contents.push('<div class=\"note-color-row\">' + buttons.join('') + '</div>');\n                }\n\n                $node.html(contents.join(''));\n\n                if (options.tooltip) {\n                  $node.find('.note-color-btn').tooltip({\n                    container: options.container || editorOptions.container,\n                    trigger: 'hover',\n                    placement: 'bottom'\n                  });\n                }\n              })($node, options);\n            },\n            button: function button($node, options) {\n              return renderer[\"a\"\n              /* default */\n              ].create('<button type=\"button\" class=\"note-btn btn btn-light btn-sm\" tabindex=\"-1\">', function ($node, options) {\n                if (options && options.tooltip) {\n                  $node.attr({\n                    title: options.tooltip,\n                    'aria-label': options.tooltip\n                  }).tooltip({\n                    container: options.container || editorOptions.container,\n                    trigger: 'hover',\n                    placement: 'bottom'\n                  }).on('click', function (e) {\n                    external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default()(e.currentTarget).tooltip('hide');\n                  });\n                }\n\n                if (options && options.codeviewButton) {\n                  $node.addClass('note-codeview-keep');\n                }\n              })($node, options);\n            },\n            toggleBtn: function toggleBtn($btn, isEnable) {\n              $btn.toggleClass('disabled', !isEnable);\n              $btn.attr('disabled', !isEnable);\n            },\n            toggleBtnActive: function toggleBtnActive($btn, isActive) {\n              $btn.toggleClass('active', isActive);\n            },\n            onDialogShown: function onDialogShown($dialog, handler) {\n              $dialog.one('shown.bs.modal', handler);\n            },\n            onDialogHidden: function onDialogHidden($dialog, handler) {\n              $dialog.one('hidden.bs.modal', handler);\n            },\n            showDialog: function showDialog($dialog) {\n              $dialog.modal('show');\n            },\n            hideDialog: function hideDialog($dialog) {\n              $dialog.modal('hide');\n            },\n            createLayout: function createLayout($note) {\n              var $editor = (editorOptions.airMode ? airEditor([editingArea([codable(), airEditable()])]) : editorOptions.toolbarPosition === 'bottom' ? editor([editingArea([codable(), editable()]), toolbar(), statusbar()]) : editor([toolbar(), editingArea([codable(), editable()]), statusbar()])).render();\n              $editor.insertAfter($note);\n              return {\n                note: $note,\n                editor: $editor,\n                toolbar: $editor.find('.note-toolbar'),\n                editingArea: $editor.find('.note-editing-area'),\n                editable: $editor.find('.note-editable'),\n                codable: $editor.find('.note-codable'),\n                statusbar: $editor.find('.note-statusbar')\n              };\n            },\n            removeLayout: function removeLayout($note, layoutInfo) {\n              $note.html(layoutInfo.editable.html());\n              layoutInfo.editor.remove();\n              $note.show();\n            }\n          };\n        };\n        /* harmony default export */\n\n\n        var bs4_ui = ui_ui; // EXTERNAL MODULE: ./src/js/base/settings.js + 37 modules\n\n        var settings = __webpack_require__(3); // EXTERNAL MODULE: ./src/styles/summernote-bs4.scss\n\n\n        var summernote_bs4 = __webpack_require__(5); // CONCATENATED MODULE: ./src/js/bs4/settings.js\n\n\n        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote = external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.extend(external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote, {\n          ui_template: bs4_ui,\n          \"interface\": 'bs4'\n        });\n        external_root_jQuery_commonjs2_jquery_commonjs_jquery_amd_jquery_default.a.summernote.options.styleTags = ['p', {\n          title: 'Blockquote',\n          tag: 'blockquote',\n          className: 'blockquote',\n          value: 'blockquote'\n        }, 'pre', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6'];\n        /***/\n      }\n      /******/\n\n    })\n  );\n});","map":null,"metadata":{},"sourceType":"script"}